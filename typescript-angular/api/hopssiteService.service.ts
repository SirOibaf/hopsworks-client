/**
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CommentIssueReqDTO } from '../model/commentIssueReqDTO';
import { DatasetIssueReqDTO } from '../model/datasetIssueReqDTO';
import { RatingValueDTO } from '../model/ratingValueDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HopssiteServiceService {

    protected basePath = '///hopsworks-api/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param publicDSId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addComment(publicDSId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addComment(publicDSId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addComment(publicDSId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addComment(publicDSId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling addComment.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/comments`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param publicDSId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDatasetIssue(publicDSId: string, body?: DatasetIssueReqDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addDatasetIssue(publicDSId: string, body?: DatasetIssueReqDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addDatasetIssue(publicDSId: string, body?: DatasetIssueReqDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addDatasetIssue(publicDSId: string, body?: DatasetIssueReqDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling addDatasetIssue.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/issue`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param publicDSId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRating(publicDSId: string, body?: RatingValueDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addRating(publicDSId: string, body?: RatingValueDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addRating(publicDSId: string, body?: RatingValueDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addRating(publicDSId: string, body?: RatingValueDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling addRating.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/rating`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param publicDSId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteComment(commentId: number, publicDSId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteComment(commentId: number, publicDSId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteComment(commentId: number, publicDSId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteComment(commentId: number, publicDSId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');
        }

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling deleteComment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/comments/${encodeURIComponent(String(commentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param publicDSId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllComments(publicDSId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllComments(publicDSId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllComments(publicDSId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllComments(publicDSId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling getAllComments.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/comments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDatasets(filter: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllDatasets(filter: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllDatasets(filter: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllDatasets(filter: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling getAllDatasets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/datasets`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClusterId(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getClusterId(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getClusterId(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getClusterId(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/clusterId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param publicDSId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataset(publicDSId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDataset(publicDSId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDataset(publicDSId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDataset(publicDSId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling getDataset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDisplayCategories(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDisplayCategories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDisplayCategories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDisplayCategories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param publicDSId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLocalDataset(publicDSId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getLocalDataset(publicDSId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getLocalDataset(publicDSId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getLocalDataset(publicDSId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling getLocalDataset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/local`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filter 
     * @param publicDSId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRating(filter: string, publicDSId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRating(filter: string, publicDSId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRating(filter: string, publicDSId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRating(filter: string, publicDSId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling getRating.');
        }

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling getRating.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/rating`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param service 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceInfo(service: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getServiceInfo(service: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getServiceInfo(service: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getServiceInfo(service: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (service === null || service === undefined) {
            throw new Error('Required parameter service was null or undefined when calling getServiceInfo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/services/${encodeURIComponent(String(service))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserId(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getUserId(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getUserId(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getUserId(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/hopssite/userId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param publicDSId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportAbuse(commentId: number, publicDSId: string, body?: CommentIssueReqDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportAbuse(commentId: number, publicDSId: string, body?: CommentIssueReqDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportAbuse(commentId: number, publicDSId: string, body?: CommentIssueReqDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportAbuse(commentId: number, publicDSId: string, body?: CommentIssueReqDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling reportAbuse.');
        }

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling reportAbuse.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/comments/${encodeURIComponent(String(commentId))}/report`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param publicDSId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateComment(commentId: number, publicDSId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateComment(commentId: number, publicDSId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateComment(commentId: number, publicDSId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateComment(commentId: number, publicDSId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling updateComment.');
        }

        if (publicDSId === null || publicDSId === undefined) {
            throw new Error('Required parameter publicDSId was null or undefined when calling updateComment.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/hopssite/datasets/${encodeURIComponent(String(publicDSId))}/comments/${encodeURIComponent(String(commentId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
