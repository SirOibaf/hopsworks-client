/**
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { RepresentsAServingModel } from '../model/representsAServingModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TensorFlowServingServiceService {

    protected basePath = '///hopsworks-api/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create or update a serving instance
     * 
     * @param body serving specification
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrUpdate(body: RepresentsAServingModel, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createOrUpdate(body: RepresentsAServingModel, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createOrUpdate(body: RepresentsAServingModel, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createOrUpdate(body: RepresentsAServingModel, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createOrUpdate.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createOrUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/serving`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a serving instance
     * 
     * @param servingId Id of the serving instance
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteServing(servingId: number, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteServing(servingId: number, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteServing(servingId: number, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteServing(servingId: number, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (servingId === null || servingId === undefined) {
            throw new Error('Required parameter servingId was null or undefined when calling deleteServing.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteServing.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/serving/${encodeURIComponent(String(servingId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get info about a serving instance for the project
     * 
     * @param servingId Id of the Serving instance
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServing(servingId: number, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<RepresentsAServingModel>;
    public getServing(servingId: number, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RepresentsAServingModel>>;
    public getServing(servingId: number, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RepresentsAServingModel>>;
    public getServing(servingId: number, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (servingId === null || servingId === undefined) {
            throw new Error('Required parameter servingId was null or undefined when calling getServing.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getServing.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<RepresentsAServingModel>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/serving/${encodeURIComponent(String(servingId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the list of serving instances for the project
     * 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServings(projectId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RepresentsAServingModel>>;
    public getServings(projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RepresentsAServingModel>>>;
    public getServings(projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RepresentsAServingModel>>>;
    public getServings(projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getServings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RepresentsAServingModel>>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/serving`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start or stop a Serving instance
     * 
     * @param servingId ID of the Serving instance to start/stop
     * @param action Action
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startOrStop(servingId: number, action: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public startOrStop(servingId: number, action: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public startOrStop(servingId: number, action: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public startOrStop(servingId: number, action: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (servingId === null || servingId === undefined) {
            throw new Error('Required parameter servingId was null or undefined when calling startOrStop.');
        }

        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling startOrStop.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling startOrStop.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/serving/${encodeURIComponent(String(servingId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
