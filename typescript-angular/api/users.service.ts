/**
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ActivitiesDTO } from '../model/activitiesDTO';
import { ApiKeyDTO } from '../model/apiKeyDTO';
import { RESTApiJsonResponse } from '../model/rESTApiJsonResponse';
import { SecretDTO } from '../model/secretDTO';
import { UserDTO } from '../model/userDTO';
import { UserProfileDTO } from '../model/userProfileDTO';
import { UserProjectDTO } from '../model/userProjectDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = '///hopsworks-api/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Stores a secret for user
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSecret(body?: SecretDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSecret(body?: SecretDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSecret(body?: SecretDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSecret(body?: SecretDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/users/secrets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates logedin User&#x27;s credentials.
     * 
     * @param oldPassword 
     * @param newPassword 
     * @param confirmedPassword 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeLoginCredentials(oldPassword?: string, newPassword?: string, confirmedPassword?: string, observe?: 'body', reportProgress?: boolean): Observable<RESTApiJsonResponse>;
    public changeLoginCredentials(oldPassword?: string, newPassword?: string, confirmedPassword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RESTApiJsonResponse>>;
    public changeLoginCredentials(oldPassword?: string, newPassword?: string, confirmedPassword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RESTApiJsonResponse>>;
    public changeLoginCredentials(oldPassword?: string, newPassword?: string, confirmedPassword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (oldPassword !== undefined) {
            formParams = formParams.append('oldPassword', <any>oldPassword) || formParams;
        }
        if (newPassword !== undefined) {
            formParams = formParams.append('newPassword', <any>newPassword) || formParams;
        }
        if (confirmedPassword !== undefined) {
            formParams = formParams.append('confirmedPassword', <any>confirmedPassword) || formParams;
        }

        return this.httpClient.post<RESTApiJsonResponse>(`${this.basePath}/users/credentials`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates logedin User&#x27;s security quesion and answer.
     * 
     * @param oldPassword 
     * @param securityQuestion 
     * @param securityAnswer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeSecurityQA(oldPassword?: string, securityQuestion?: string, securityAnswer?: string, observe?: 'body', reportProgress?: boolean): Observable<RESTApiJsonResponse>;
    public changeSecurityQA(oldPassword?: string, securityQuestion?: string, securityAnswer?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RESTApiJsonResponse>>;
    public changeSecurityQA(oldPassword?: string, securityQuestion?: string, securityAnswer?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RESTApiJsonResponse>>;
    public changeSecurityQA(oldPassword?: string, securityQuestion?: string, securityAnswer?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (oldPassword !== undefined) {
            formParams = formParams.append('oldPassword', <any>oldPassword) || formParams;
        }
        if (securityQuestion !== undefined) {
            formParams = formParams.append('securityQuestion', <any>securityQuestion) || formParams;
        }
        if (securityAnswer !== undefined) {
            formParams = formParams.append('securityAnswer', <any>securityAnswer) || formParams;
        }

        return this.httpClient.post<RESTApiJsonResponse>(`${this.basePath}/users/securityQA`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates logedin User&#x27;s two factor setting.
     * 
     * @param password 
     * @param twoFactor 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeTwoFactor(password?: string, twoFactor?: boolean, observe?: 'body', reportProgress?: boolean): Observable<RESTApiJsonResponse>;
    public changeTwoFactor(password?: string, twoFactor?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RESTApiJsonResponse>>;
    public changeTwoFactor(password?: string, twoFactor?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RESTApiJsonResponse>>;
    public changeTwoFactor(password?: string, twoFactor?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }
        if (twoFactor !== undefined) {
            formParams = formParams.append('twoFactor', <any>twoFactor) || formParams;
        }

        return this.httpClient.post<RESTApiJsonResponse>(`${this.basePath}/users/twoFactor`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check api key session.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkSession(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public checkSession(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public checkSession(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public checkSession(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/users/apiKey/session`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an api key.
     * 
     * @param name 
     * @param scope 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create(name?: string, scope?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ApiKeyDTO>;
    public create(name?: string, scope?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiKeyDTO>>;
    public create(name?: string, scope?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiKeyDTO>>;
    public create(name?: string, scope?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (scope) {
            scope.forEach((element) => {
                queryParameters = queryParameters.append('scope', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiKeyDTO>(`${this.basePath}/users/apiKey`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete all api keys.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAll(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/apiKey`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes all secrets of a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAllSecrets(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAllSecrets(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAllSecrets(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAllSecrets(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/secrets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete api key by name.
     * 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteByName(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteByName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteByName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteByName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/apiKey/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a secret by its name
     * 
     * @param secretName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSecret(secretName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSecret(secretName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSecret(secretName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSecret(secretName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (secretName === null || secretName === undefined) {
            throw new Error('Required parameter secretName was null or undefined when calling deleteSecret.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/secrets/${encodeURIComponent(String(secretName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all users.
     * 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;first_name:asc,last_name:desc
     * @param filterBy ex. filter_by&#x3D;role:hops_admin,hops_user&amp;filter_by&#x3D;status:2
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<UserDTO>;
    public findAll(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDTO>>;
    public findAll(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDTO>>;
    public findAll(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserDTO>(`${this.basePath}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds an activity for a user by id.
     * 
     * @param activityId 
     * @param expand ex. expand&#x3D;creator
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllById1(activityId: number, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ActivitiesDTO>;
    public findAllById1(activityId: number, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActivitiesDTO>>;
    public findAllById1(activityId: number, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActivitiesDTO>>;
    public findAllById1(activityId: number, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (activityId === null || activityId === undefined) {
            throw new Error('Required parameter activityId was null or undefined when calling findAllById1.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ActivitiesDTO>(`${this.basePath}/users/activities/${encodeURIComponent(String(activityId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds all activities for a user.
     * 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;ID:asc,date_created:desc
     * @param filterBy ex. filter_by&#x3D;flag:dataset
     * @param expand ex. expand&#x3D;creator
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllByUser1(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ActivitiesDTO>;
    public findAllByUser1(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActivitiesDTO>>;
    public findAllByUser1(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActivitiesDTO>>;
    public findAllByUser1(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ActivitiesDTO>(`${this.basePath}/users/activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find User by Id.
     * 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById(userId: number, observe?: 'body', reportProgress?: boolean): Observable<UserProfileDTO>;
    public findById(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileDTO>>;
    public findById(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileDTO>>;
    public findById(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling findById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserProfileDTO>(`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all api keys.
     * 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;Name:asc,created:desc,modified:desc
     * @param filterBy ex. filter_by&#x3D;name:key, created:2019-01-01T00:00:00.000, created_lt:2019-01-01T00:00:00.000, created_gt:2019-01-01T00:00:00.000, modified:2019-01-01T00:00:00.000, modified_lt:2019-01-01T00:00:00.000, modified_gt:2019-01-01T00:00:00.000
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get4(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ApiKeyDTO>;
    public get4(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiKeyDTO>>;
    public get4(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiKeyDTO>>;
    public get4(offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiKeyDTO>(`${this.basePath}/users/apiKey`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all secrets&#x27; names of a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSecrets(observe?: 'body', reportProgress?: boolean): Observable<SecretDTO>;
    public getAllSecrets(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecretDTO>>;
    public getAllSecrets(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecretDTO>>;
    public getAllSecrets(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SecretDTO>(`${this.basePath}/users/secrets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find api key by name.
     * 
     * @param key 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByKey(key?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiKeyDTO>;
    public getByKey(key?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiKeyDTO>>;
    public getByKey(key?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiKeyDTO>>;
    public getByKey(key?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiKeyDTO>(`${this.basePath}/users/apiKey/key`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find api key by name.
     * 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByName3(name: string, observe?: 'body', reportProgress?: boolean): Observable<ApiKeyDTO>;
    public getByName3(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiKeyDTO>>;
    public getByName3(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiKeyDTO>>;
    public getByName3(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getByName3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiKeyDTO>(`${this.basePath}/users/apiKey/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the logedin User&#x27;s QR code.
     * 
     * @param password 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQRCode(password?: string, observe?: 'body', reportProgress?: boolean): Observable<RESTApiJsonResponse>;
    public getQRCode(password?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RESTApiJsonResponse>>;
    public getQRCode(password?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RESTApiJsonResponse>>;
    public getQRCode(password?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }

        return this.httpClient.post<RESTApiJsonResponse>(`${this.basePath}/users/getQRCode`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the logedin User&#x27;s role in project.
     * 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRole(projectId?: number, observe?: 'body', reportProgress?: boolean): Observable<UserProjectDTO>;
    public getRole(projectId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProjectDTO>>;
    public getRole(projectId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProjectDTO>>;
    public getRole(projectId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (projectId !== undefined) {
            formParams = formParams.append('projectId', <any>projectId) || formParams;
        }

        return this.httpClient.post<UserProjectDTO>(`${this.basePath}/users/getRole`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all api keys scopes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getScopes(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getScopes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getScopes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getScopes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/users/apiKey/scopes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the value of a private secret
     * 
     * @param secretName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSecret(secretName: string, observe?: 'body', reportProgress?: boolean): Observable<SecretDTO>;
    public getSecret(secretName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecretDTO>>;
    public getSecret(secretName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecretDTO>>;
    public getSecret(secretName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (secretName === null || secretName === undefined) {
            throw new Error('Required parameter secretName was null or undefined when calling getSecret.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SecretDTO>(`${this.basePath}/users/secrets/${encodeURIComponent(String(secretName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the value of a shared secret
     * 
     * @param name 
     * @param owner 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSharedSecret(name?: string, owner?: string, observe?: 'body', reportProgress?: boolean): Observable<SecretDTO>;
    public getSharedSecret(name?: string, owner?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecretDTO>>;
    public getSharedSecret(name?: string, owner?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecretDTO>>;
    public getSharedSecret(name?: string, owner?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (owner !== undefined && owner !== null) {
            queryParameters = queryParameters.set('owner', <any>owner);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SecretDTO>(`${this.basePath}/users/secrets/shared`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets logged in User&#x27;s info.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserProfile(observe?: 'body', reportProgress?: boolean): Observable<UserProfileDTO>;
    public getUserProfile(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileDTO>>;
    public getUserProfile(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileDTO>>;
    public getUserProfile(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserProfileDTO>(`${this.basePath}/users/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an api key.
     * 
     * @param name 
     * @param action 
     * @param scope 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update1(name?: string, action?: string, scope?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ApiKeyDTO>;
    public update1(name?: string, action?: string, scope?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiKeyDTO>>;
    public update1(name?: string, action?: string, scope?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiKeyDTO>>;
    public update1(name?: string, action?: string, scope?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }
        if (scope) {
            scope.forEach((element) => {
                queryParameters = queryParameters.append('scope', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<ApiKeyDTO>(`${this.basePath}/users/apiKey`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates logged in User&#x27;s info.
     * 
     * @param firstname 
     * @param lastname 
     * @param phoneNumber 
     * @param toursState 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfile(firstname?: string, lastname?: string, phoneNumber?: string, toursState?: number, observe?: 'body', reportProgress?: boolean): Observable<UserProfileDTO>;
    public updateProfile(firstname?: string, lastname?: string, phoneNumber?: string, toursState?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileDTO>>;
    public updateProfile(firstname?: string, lastname?: string, phoneNumber?: string, toursState?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileDTO>>;
    public updateProfile(firstname?: string, lastname?: string, phoneNumber?: string, toursState?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (firstname !== undefined) {
            formParams = formParams.append('firstname', <any>firstname) || formParams;
        }
        if (lastname !== undefined) {
            formParams = formParams.append('lastname', <any>lastname) || formParams;
        }
        if (phoneNumber !== undefined) {
            formParams = formParams.append('phoneNumber', <any>phoneNumber) || formParams;
        }
        if (toursState !== undefined) {
            formParams = formParams.append('toursState', <any>toursState) || formParams;
        }

        return this.httpClient.post<UserProfileDTO>(`${this.basePath}/users/profile`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
