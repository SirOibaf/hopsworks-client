/**
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CommandDTO } from '../model/commandDTO';
import { EnvironmentDTO } from '../model/environmentDTO';
import { EnvironmentYmlDTO } from '../model/environmentYmlDTO';
import { LibraryDTO } from '../model/libraryDTO';
import { LibrarySearchDTO } from '../model/librarySearchDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PythonService {

    protected basePath = '///hopsworks-api/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete commands for this environment
     * 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling _delete.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/commands`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete commands for this library
     * 
     * @param library 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete1(library: string, version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delete1(library: string, version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delete1(library: string, version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delete1(library: string, version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling delete1.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling delete1.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling delete1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}/commands`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove the python environment with the specified version for this project
     * 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete2(version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<EnvironmentDTO>;
    public delete2(version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvironmentDTO>>;
    public delete2(version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvironmentDTO>>;
    public delete2(version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling delete2.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling delete2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<EnvironmentDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get commands for this environment
     * 
     * @param version 
     * @param projectId 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;ID:asc,date_created:desc
     * @param filterBy ex. filter_by&#x3D;op:create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public get(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public get(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public get(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling get.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling get.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/commands`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all commands for this library
     * 
     * @param library 
     * @param version 
     * @param projectId 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;ID:asc,date_created:desc
     * @param filterBy ex. filter_by&#x3D;op:create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get1(library: string, version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<CommandDTO>;
    public get1(library: string, version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandDTO>>;
    public get1(library: string, version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandDTO>>;
    public get1(library: string, version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling get1.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling get1.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling get1.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommandDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}/commands`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the python libraries installed in this environment
     * 
     * @param version 
     * @param projectId 
     * @param offset 
     * @param limit 
     * @param sortBy ex. sort_by&#x3D;ID:asc,dependency:desc
     * @param filterBy ex. filter_by&#x3D;preinstalled:1
     * @param expand ex. expand&#x3D;commands
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get2(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<LibraryDTO>;
    public get2(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LibraryDTO>>;
    public get2(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LibraryDTO>>;
    public get2(version: string, projectId: number, offset?: number, limit?: number, sortBy?: string, filterBy?: Array<string>, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling get2.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling get2.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sort_by', <any>sortBy);
        }
        if (filterBy) {
            filterBy.forEach((element) => {
                queryParameters = queryParameters.append('filter_by', <any>element);
            })
        }
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LibraryDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the python environment for specific python version
     * 
     * @param version 
     * @param projectId 
     * @param expand ex. expand&#x3D;commands
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get3(version: string, projectId: number, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<EnvironmentDTO>;
    public get3(version: string, projectId: number, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvironmentDTO>>;
    public get3(version: string, projectId: number, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvironmentDTO>>;
    public get3(version: string, projectId: number, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling get3.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling get3.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EnvironmentDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all python environments for this project
     * 
     * @param projectId 
     * @param expand ex. expand&#x3D;commands
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll(projectId: number, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<EnvironmentDTO>;
    public getAll(projectId: number, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvironmentDTO>>;
    public getAll(projectId: number, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvironmentDTO>>;
    public getAll(projectId: number, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getAll.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EnvironmentDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get commands by id
     * 
     * @param commandId 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByName(commandId: number, version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<CommandDTO>;
    public getByName(commandId: number, version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandDTO>>;
    public getByName(commandId: number, version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandDTO>>;
    public getByName(commandId: number, version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandId === null || commandId === undefined) {
            throw new Error('Required parameter commandId was null or undefined when calling getByName.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getByName.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommandDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/commands/${encodeURIComponent(String(commandId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get command by id
     * 
     * @param library 
     * @param commandId 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByName1(library: string, commandId: number, version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<CommandDTO>;
    public getByName1(library: string, commandId: number, version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandDTO>>;
    public getByName1(library: string, commandId: number, version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandDTO>>;
    public getByName1(library: string, commandId: number, version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling getByName1.');
        }

        if (commandId === null || commandId === undefined) {
            throw new Error('Required parameter commandId was null or undefined when calling getByName1.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getByName1.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getByName1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommandDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}/commands/${encodeURIComponent(String(commandId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the a python library installed in this environment
     * 
     * @param library 
     * @param version 
     * @param projectId 
     * @param expand ex. expand&#x3D;commands
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByName2(library: string, version: string, projectId: number, expand?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<LibraryDTO>;
    public getByName2(library: string, version: string, projectId: number, expand?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LibraryDTO>>;
    public getByName2(library: string, version: string, projectId: number, expand?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LibraryDTO>>;
    public getByName2(library: string, version: string, projectId: number, expand?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling getByName2.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getByName2.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getByName2.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand) {
            expand.forEach((element) => {
                queryParameters = queryParameters.append('expand', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LibraryDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Install a python library in the environment
     * 
     * @param library 
     * @param version2 
     * @param projectId 
     * @param packageManager 
     * @param version 
     * @param channel 
     * @param machine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public install(library: string, version2: string, projectId: number, packageManager?: string, version?: string, channel?: string, machine?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public install(library: string, version2: string, projectId: number, packageManager?: string, version?: string, channel?: string, machine?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public install(library: string, version2: string, projectId: number, packageManager?: string, version?: string, channel?: string, machine?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public install(library: string, version2: string, projectId: number, packageManager?: string, version?: string, channel?: string, machine?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling install.');
        }

        if (version2 === null || version2 === undefined) {
            throw new Error('Required parameter version2 was null or undefined when calling install.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling install.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (packageManager !== undefined && packageManager !== null) {
            queryParameters = queryParameters.set('package_manager', <any>packageManager);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (channel !== undefined && channel !== null) {
            queryParameters = queryParameters.set('channel', <any>channel);
        }
        if (machine !== undefined && machine !== null) {
            queryParameters = queryParameters.set('machine', <any>machine);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an environment from version or export an environment as yaml file
     * 
     * @param version 
     * @param projectId 
     * @param action 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public post(version: string, projectId: number, action?: string, observe?: 'body', reportProgress?: boolean): Observable<EnvironmentDTO>;
    public post(version: string, projectId: number, action?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvironmentDTO>>;
    public post(version: string, projectId: number, action?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvironmentDTO>>;
    public post(version: string, projectId: number, action?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling post.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling post.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<EnvironmentDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an environment from yaml file
     * 
     * @param projectId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postYml(projectId: number, body?: EnvironmentYmlDTO, observe?: 'body', reportProgress?: boolean): Observable<EnvironmentDTO>;
    public postYml(projectId: number, body?: EnvironmentYmlDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EnvironmentDTO>>;
    public postYml(projectId: number, body?: EnvironmentYmlDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EnvironmentDTO>>;
    public postYml(projectId: number, body?: EnvironmentYmlDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling postYml.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EnvironmentDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for libraries using conda or pip package managers
     * 
     * @param search 
     * @param version 
     * @param projectId 
     * @param query 
     * @param channel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(search: string, version: string, projectId: number, query?: string, channel?: string, observe?: 'body', reportProgress?: boolean): Observable<LibrarySearchDTO>;
    public search(search: string, version: string, projectId: number, query?: string, channel?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LibrarySearchDTO>>;
    public search(search: string, version: string, projectId: number, query?: string, channel?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LibrarySearchDTO>>;
    public search(search: string, version: string, projectId: number, query?: string, channel?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling search.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling search.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling search.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (channel !== undefined && channel !== null) {
            queryParameters = queryParameters.set('channel', <any>channel);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LibrarySearchDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(search))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uninstall a python library from the environment
     * 
     * @param library 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uninstall(library: string, version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uninstall(library: string, version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uninstall(library: string, version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uninstall(library: string, version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling uninstall.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling uninstall.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling uninstall.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update commands for this library
     * 
     * @param library 
     * @param version 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(library: string, version: string, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public update(library: string, version: string, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public update(library: string, version: string, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public update(library: string, version: string, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (library === null || library === undefined) {
            throw new Error('Required parameter library was null or undefined when calling update.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling update.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling update.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/python/environments/${encodeURIComponent(String(version))}/libraries/${encodeURIComponent(String(library))}/commands`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
