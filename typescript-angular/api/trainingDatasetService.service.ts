/**
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TrainingDatasetDTO } from '../model/trainingDatasetDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TrainingDatasetServiceService {

    protected basePath = '///hopsworks-api/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create training dataset for a featurestore
     * 
     * @param featurestoreId 
     * @param projectId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTrainingDataset(featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, observe?: 'body', reportProgress?: boolean): Observable<TrainingDatasetDTO>;
    public createTrainingDataset(featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingDatasetDTO>>;
    public createTrainingDataset(featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingDatasetDTO>>;
    public createTrainingDataset(featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (featurestoreId === null || featurestoreId === undefined) {
            throw new Error('Required parameter featurestoreId was null or undefined when calling createTrainingDataset.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createTrainingDataset.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TrainingDatasetDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/featurestores/${encodeURIComponent(String(featurestoreId))}/trainingdatasets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset
     * @param featurestoreId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<TrainingDatasetDTO>;
    public deleteTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingDatasetDTO>>;
    public deleteTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingDatasetDTO>>;
    public deleteTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (trainingdatasetid === null || trainingdatasetid === undefined) {
            throw new Error('Required parameter trainingdatasetid was null or undefined when calling deleteTrainingDataset.');
        }

        if (featurestoreId === null || featurestoreId === undefined) {
            throw new Error('Required parameter featurestoreId was null or undefined when calling deleteTrainingDataset.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteTrainingDataset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<TrainingDatasetDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/featurestores/${encodeURIComponent(String(featurestoreId))}/trainingdatasets/${encodeURIComponent(String(trainingdatasetid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset
     * @param featurestoreId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrainingDatasetWithId(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<TrainingDatasetDTO>;
    public getTrainingDatasetWithId(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingDatasetDTO>>;
    public getTrainingDatasetWithId(trainingdatasetid: number, featurestoreId: number, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingDatasetDTO>>;
    public getTrainingDatasetWithId(trainingdatasetid: number, featurestoreId: number, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (trainingdatasetid === null || trainingdatasetid === undefined) {
            throw new Error('Required parameter trainingdatasetid was null or undefined when calling getTrainingDatasetWithId.');
        }

        if (featurestoreId === null || featurestoreId === undefined) {
            throw new Error('Required parameter featurestoreId was null or undefined when calling getTrainingDatasetWithId.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getTrainingDatasetWithId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TrainingDatasetDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/featurestores/${encodeURIComponent(String(featurestoreId))}/trainingdatasets/${encodeURIComponent(String(trainingdatasetid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the list of training datasets for a featurestore
     * 
     * @param featurestoreId 
     * @param projectId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrainingDatasetsForFeaturestore(featurestoreId: number, projectId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TrainingDatasetDTO>>;
    public getTrainingDatasetsForFeaturestore(featurestoreId: number, projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrainingDatasetDTO>>>;
    public getTrainingDatasetsForFeaturestore(featurestoreId: number, projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrainingDatasetDTO>>>;
    public getTrainingDatasetsForFeaturestore(featurestoreId: number, projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (featurestoreId === null || featurestoreId === undefined) {
            throw new Error('Required parameter featurestoreId was null or undefined when calling getTrainingDatasetsForFeaturestore.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getTrainingDatasetsForFeaturestore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TrainingDatasetDTO>>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/featurestores/${encodeURIComponent(String(featurestoreId))}/trainingdatasets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset
     * @param featurestoreId 
     * @param projectId 
     * @param body 
     * @param updateMetadata updateMetadata
     * @param updateStats updateStats
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, updateMetadata?: boolean, updateStats?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TrainingDatasetDTO>;
    public updateTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, updateMetadata?: boolean, updateStats?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingDatasetDTO>>;
    public updateTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, updateMetadata?: boolean, updateStats?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingDatasetDTO>>;
    public updateTrainingDataset(trainingdatasetid: number, featurestoreId: number, projectId: number, body?: TrainingDatasetDTO, updateMetadata?: boolean, updateStats?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (trainingdatasetid === null || trainingdatasetid === undefined) {
            throw new Error('Required parameter trainingdatasetid was null or undefined when calling updateTrainingDataset.');
        }

        if (featurestoreId === null || featurestoreId === undefined) {
            throw new Error('Required parameter featurestoreId was null or undefined when calling updateTrainingDataset.');
        }

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling updateTrainingDataset.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (updateMetadata !== undefined && updateMetadata !== null) {
            queryParameters = queryParameters.set('updateMetadata', <any>updateMetadata);
        }
        if (updateStats !== undefined && updateStats !== null) {
            queryParameters = queryParameters.set('updateStats', <any>updateStats);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TrainingDatasetDTO>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/featurestores/${encodeURIComponent(String(featurestoreId))}/trainingdatasets/${encodeURIComponent(String(trainingdatasetid))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
