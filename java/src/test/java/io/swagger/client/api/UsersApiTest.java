/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActivitiesDTO;
import io.swagger.client.model.ApiKeyDTO;
import io.swagger.client.model.RESTApiJsonResponse;
import io.swagger.client.model.SecretDTO;
import io.swagger.client.model.UserDTO;
import io.swagger.client.model.UserProfileDTO;
import io.swagger.client.model.UserProjectDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Stores a secret for user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSecretTest() throws ApiException {
        SecretDTO body = null;
        api.addSecret(body);

        // TODO: test validations
    }
    /**
     * Updates logedin User&#x27;s credentials.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeLoginCredentialsTest() throws ApiException {
        String oldPassword = null;
        String newPassword = null;
        String confirmedPassword = null;
        RESTApiJsonResponse response = api.changeLoginCredentials(oldPassword, newPassword, confirmedPassword);

        // TODO: test validations
    }
    /**
     * Updates logedin User&#x27;s security quesion and answer.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeSecurityQATest() throws ApiException {
        String oldPassword = null;
        String securityQuestion = null;
        String securityAnswer = null;
        RESTApiJsonResponse response = api.changeSecurityQA(oldPassword, securityQuestion, securityAnswer);

        // TODO: test validations
    }
    /**
     * Updates logedin User&#x27;s two factor setting.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeTwoFactorTest() throws ApiException {
        String password = null;
        Boolean twoFactor = null;
        RESTApiJsonResponse response = api.changeTwoFactor(password, twoFactor);

        // TODO: test validations
    }
    /**
     * Check api key session.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkSessionTest() throws ApiException {
        api.checkSession();

        // TODO: test validations
    }
    /**
     * Create an api key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String name = null;
        List<String> scope = null;
        ApiKeyDTO response = api.create(name, scope);

        // TODO: test validations
    }
    /**
     * Delete all api keys.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllTest() throws ApiException {
        api.deleteAll();

        // TODO: test validations
    }
    /**
     * Deletes all secrets of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllSecretsTest() throws ApiException {
        api.deleteAllSecrets();

        // TODO: test validations
    }
    /**
     * Delete api key by name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByNameTest() throws ApiException {
        String name = null;
        api.deleteByName(name);

        // TODO: test validations
    }
    /**
     * Deletes a secret by its name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecretTest() throws ApiException {
        String secretName = null;
        api.deleteSecret(secretName);

        // TODO: test validations
    }
    /**
     * Get all users.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        UserDTO response = api.findAll(offset, limit, sortBy, filterBy);

        // TODO: test validations
    }
    /**
     * Finds an activity for a user by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllById1Test() throws ApiException {
        Integer activityId = null;
        List<String> expand = null;
        ActivitiesDTO response = api.findAllById1(activityId, expand);

        // TODO: test validations
    }
    /**
     * Finds all activities for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllByUser1Test() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        ActivitiesDTO response = api.findAllByUser1(offset, limit, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * Find User by Id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByIdTest() throws ApiException {
        Integer userId = null;
        UserProfileDTO response = api.findById(userId);

        // TODO: test validations
    }
    /**
     * Get all api keys.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void get4Test() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        ApiKeyDTO response = api.get4(offset, limit, sortBy, filterBy);

        // TODO: test validations
    }
    /**
     * Retrieves all secrets&#x27; names of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSecretsTest() throws ApiException {
        SecretDTO response = api.getAllSecrets();

        // TODO: test validations
    }
    /**
     * Find api key by name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByKeyTest() throws ApiException {
        String key = null;
        ApiKeyDTO response = api.getByKey(key);

        // TODO: test validations
    }
    /**
     * Find api key by name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByName3Test() throws ApiException {
        String name = null;
        ApiKeyDTO response = api.getByName3(name);

        // TODO: test validations
    }
    /**
     * Gets the logedin User&#x27;s QR code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQRCodeTest() throws ApiException {
        String password = null;
        RESTApiJsonResponse response = api.getQRCode(password);

        // TODO: test validations
    }
    /**
     * Gets the logedin User&#x27;s role in project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Integer projectId = null;
        UserProjectDTO response = api.getRole(projectId);

        // TODO: test validations
    }
    /**
     * Get all api keys scopes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScopesTest() throws ApiException {
        api.getScopes();

        // TODO: test validations
    }
    /**
     * Gets the value of a private secret
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretTest() throws ApiException {
        String secretName = null;
        SecretDTO response = api.getSecret(secretName);

        // TODO: test validations
    }
    /**
     * Gets the value of a shared secret
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSharedSecretTest() throws ApiException {
        String name = null;
        String owner = null;
        SecretDTO response = api.getSharedSecret(name, owner);

        // TODO: test validations
    }
    /**
     * Gets logged in User&#x27;s info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        UserProfileDTO response = api.getUserProfile();

        // TODO: test validations
    }
    /**
     * Update an api key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void update1Test() throws ApiException {
        String name = null;
        String action = null;
        List<String> scope = null;
        ApiKeyDTO response = api.update1(name, action, scope);

        // TODO: test validations
    }
    /**
     * Updates logged in User&#x27;s info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String firstname = null;
        String lastname = null;
        String phoneNumber = null;
        Integer toursState = null;
        UserProfileDTO response = api.updateProfile(firstname, lastname, phoneNumber, toursState);

        // TODO: test validations
    }
}
