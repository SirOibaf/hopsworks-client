/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AclDTO;
import io.swagger.client.model.AclsBeanParam;
import io.swagger.client.model.ActivitiesDTO;
import io.swagger.client.model.AirflowDagDTO;
import io.swagger.client.model.CommandDTO;
import io.swagger.client.model.ConstraintGroupDTO;
import io.swagger.client.model.DataSetDTO;
import io.swagger.client.model.DataValidationSettingsDTO;
import io.swagger.client.model.Download;
import io.swagger.client.model.EnvironmentDTO;
import io.swagger.client.model.EnvironmentYmlDTO;
import io.swagger.client.model.ExecutionDTO;
import io.swagger.client.model.FeaturegroupDTO;
import io.swagger.client.model.FeaturegroupImportJobDTO;
import io.swagger.client.model.FeaturegroupPreview;
import io.swagger.client.model.FeaturestoreClientSettingsDTO;
import io.swagger.client.model.FeaturestoreDTO;
import io.swagger.client.model.FeaturestoreStorageConnectorDTO;
import io.swagger.client.model.FeaturestoreUtilJobDTO;
import java.io.File;
import io.swagger.client.model.FileTemplateDTO;
import io.swagger.client.model.InodeIdDTO;
import io.swagger.client.model.JobConfiguration;
import io.swagger.client.model.JobDTO;
import io.swagger.client.model.JobLogDTO;
import io.swagger.client.model.JupyterSettings;
import io.swagger.client.model.LibraryDTO;
import io.swagger.client.model.LibrarySearchDTO;
import io.swagger.client.model.MembersDTO;
import io.swagger.client.model.MoveDTO;
import io.swagger.client.model.Pia;
import io.swagger.client.model.ProjectDTO;
import io.swagger.client.model.RepresentsAServingModel;
import io.swagger.client.model.RowValueQueryResult;
import io.swagger.client.model.ScheduleDTO;
import io.swagger.client.model.SchemaDTO;
import io.swagger.client.model.SparkJobConfiguration;
import io.swagger.client.model.TopicDTO;
import io.swagger.client.model.TopicsBeanParam;
import io.swagger.client.model.TrainingDatasetDTO;
import io.swagger.client.model.TrainingDatasetJobDTO;
import io.swagger.client.model.ValidationResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectServiceApi
 */
@Ignore
public class ProjectServiceApiTest {

    private final ProjectServiceApi api = new ProjectServiceApi();

    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptRequestTest() throws ApiException {
        Long inodeId = null;
        Integer projectId = null;
        api.acceptRequest(inodeId, projectId);

        // TODO: test validations
    }
    /**
     * Add a new ACL for a specified topic.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAclsToTopicTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        AclDTO body = null;
        api.addAclsToTopic(topic, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMembersTest() throws ApiException {
        Integer projectId = null;
        MembersDTO body = null;
        api.addMembers(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTopicSchemaTest() throws ApiException {
        Integer projectId = null;
        SchemaDTO body = null;
        api.addTopicSchema(projectId, body);

        // TODO: test validations
    }
    /**
     * Write Deequ validation rules to Filesystem so validation job can pick it up
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addValidationRulesTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ConstraintGroupDTO body = null;
        DataValidationSettingsDTO response = api.addValidationRules(featuregroupId, featureStoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachTemplateTest() throws ApiException {
        Integer projectId = null;
        FileTemplateDTO body = null;
        api.attachTemplate(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkFileExistTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.checkFileExist(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkFileExistsTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.checkFileExists(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkFileForDownloadTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.checkFileForDownload(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkProjectAccessTest() throws ApiException {
        Integer projectId = null;
        api.checkProjectAccess(projectId);

        // TODO: test validations
    }
    /**
     * Generate an Airflow Python DAG file from a DAG definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void composeDAGTest() throws ApiException {
        Integer projectId = null;
        AirflowDagDTO body = null;
        api.composeDAG(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertIPythonNotebookTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.convertIPythonNotebook(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileTest() throws ApiException {
        Integer projectId = null;
        MoveDTO body = null;
        api.copyFile(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countFileBlocksTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.countFileBlocks(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDataSetDirTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.createDataSetDir(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDataSetDir1Test() throws ApiException {
        Integer projectId = null;
        String body = null;
        api.createDataSetDir1(projectId, body);

        // TODO: test validations
    }
    /**
     * Create feature group in a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFeaturegroupTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        FeaturegroupDTO response = api.createFeaturegroup(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Create a new storage connector for the feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewStorageConnectorWithTypeTest() throws ApiException {
        String connectorType = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO body = null;
        FeaturestoreStorageConnectorDTO response = api.createNewStorageConnectorWithType(connectorType, featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Create or update a serving instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        RepresentsAServingModel body = null;
        Integer projectId = null;
        api.createOrUpdate(body, projectId);

        // TODO: test validations
    }
    /**
     * Configure job to import featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateImportJobTest() throws ApiException {
        FeaturegroupImportJobDTO body = null;
        Integer projectId = null;
        JobDTO response = api.createOrUpdateImportJob(body, projectId);

        // TODO: test validations
    }
    /**
     * Configure job to create training dataset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTrainingDatasetJobTest() throws ApiException {
        TrainingDatasetJobDTO body = null;
        Integer projectId = null;
        JobDTO response = api.createOrUpdateTrainingDatasetJob(body, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectDTO body = null;
        api.createProject(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTopLevelDataSetTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.createTopLevelDataSet(projectId, body);

        // TODO: test validations
    }
    /**
     * Create a new Kafka topic.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTopicTest() throws ApiException {
        Integer projectId = null;
        TopicDTO body = null;
        api.createTopic(projectId, body);

        // TODO: test validations
    }
    /**
     * Create training dataset for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTrainingDatasetTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO body = null;
        TrainingDatasetDTO response = api.createTrainingDataset(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialsTest() throws ApiException {
        Integer projectId = null;
        api.credentials(projectId);

        // TODO: test validations
    }
    /**
     * Delete commands for this environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String version = null;
        Integer projectId = null;
        api.delete(version, projectId);

        // TODO: test validations
    }
    /**
     * Delete commands for this library
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete1Test() throws ApiException {
        String library = null;
        String version = null;
        Integer projectId = null;
        api.delete1(library, version, projectId);

        // TODO: test validations
    }
    /**
     * Remove the python environment with the specified version for this project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete2Test() throws ApiException {
        String version = null;
        Integer projectId = null;
        EnvironmentDTO response = api.delete2(version, projectId);

        // TODO: test validations
    }
    /**
     * Delete the job with the given ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete3Test() throws ApiException {
        String name = null;
        Integer projectId = null;
        api.delete3(name, projectId);

        // TODO: test validations
    }
    /**
     * Delete specific featuregroup from a specific featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeatureGroupFromFeatureStoreTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.deleteFeatureGroupFromFeatureStore(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Delete featuregroup contents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeaturegroupContentsTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.deleteFeaturegroupContents(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSchemaTest() throws ApiException {
        String schemaName = null;
        Integer version = null;
        Integer projectId = null;
        api.deleteSchema(schemaName, version, projectId);

        // TODO: test validations
    }
    /**
     * Delete a serving instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServingTest() throws ApiException {
        Integer servingId = null;
        Integer projectId = null;
        api.deleteServing(servingId, projectId);

        // TODO: test validations
    }
    /**
     * Delete storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorageConnectorWithTypeAndIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.deleteStorageConnectorWithTypeAndId(connectorType, connectorId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Delete a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTrainingDatasetTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO response = api.deleteTrainingDataset(trainingdatasetid, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadCertsTest() throws ApiException {
        Integer projectId = null;
        String password = null;
        api.downloadCerts(projectId, password);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDatasetHdfsTest() throws ApiException {
        String publicDSId = null;
        Integer projectId = null;
        Download body = null;
        api.downloadDatasetHdfs(publicDSId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDatasetKafkaTest() throws ApiException {
        String publicDSId = null;
        Integer projectId = null;
        Download body = null;
        api.downloadDatasetKafka(publicDSId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFromHDFSTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        String token = null;
        api.downloadFromHDFS(path, projectId, token);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exampleTest() throws ApiException {
        String type = null;
        api.example(type);

        // TODO: test validations
    }
    /**
     * Start/Stop a job
     *
     * Starts a job by creating and starting an Execution, stops a job by stopping the Execution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executionTest() throws ApiException {
        String action = null;
        String name = null;
        Integer projectId = null;
        api.execution(action, name, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filePreviewTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        String mode = null;
        api.filePreview(path, projectId, mode);

        // TODO: test validations
    }
    /**
     * Finds an activity in project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllByIdTest() throws ApiException {
        Integer activityId = null;
        Integer projectId = null;
        List<String> expand = null;
        ActivitiesDTO response = api.findAllById(activityId, projectId, expand);

        // TODO: test validations
    }
    /**
     * Finds activities in project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllByProjectTest() throws ApiException {
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        ActivitiesDTO response = api.findAllByProject(projectId, offset, limit, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllByUserTest() throws ApiException {
        api.findAllByUser();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByProjectIDTest() throws ApiException {
        Integer projectId = null;
        api.findByProjectID(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDataSetsInProjectIDTest() throws ApiException {
        Integer projectId = null;
        api.findDataSetsInProjectID(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findMembersByProjectIDTest() throws ApiException {
        Integer projectId = null;
        api.findMembersByProjectID(projectId);

        // TODO: test validations
    }
    /**
     * Get commands for this environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String version = null;
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        api.get(version, projectId, offset, limit, sortBy, filterBy);

        // TODO: test validations
    }
    /**
     * Get all commands for this library
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void get1Test() throws ApiException {
        String library = null;
        String version = null;
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        CommandDTO response = api.get1(library, version, projectId, offset, limit, sortBy, filterBy);

        // TODO: test validations
    }
    /**
     * Get the python libraries installed in this environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void get2Test() throws ApiException {
        String version = null;
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        LibraryDTO response = api.get2(version, projectId, offset, limit, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * Get the python environment for specific python version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void get3Test() throws ApiException {
        String version = null;
        Integer projectId = null;
        List<String> expand = null;
        EnvironmentDTO response = api.get3(version, projectId, expand);

        // TODO: test validations
    }
    /**
     * Get all python environments for this project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        Integer projectId = null;
        List<String> expand = null;
        EnvironmentDTO response = api.getAll(projectId, expand);

        // TODO: test validations
    }
    /**
     * Get a list of all jobs for this project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAll1Test() throws ApiException {
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        JobDTO response = api.getAll1(projectId, offset, limit, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllNotebookServersInProjectTest() throws ApiException {
        Integer projectId = null;
        api.getAllNotebookServersInProject(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllProjectsTest() throws ApiException {
        api.getAllProjects();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppInfoTest() throws ApiException {
        String appId = null;
        Integer projectId = null;
        api.getAppInfo(appId, projectId);

        // TODO: test validations
    }
    /**
     * Get commands by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByNameTest() throws ApiException {
        Integer commandId = null;
        String version = null;
        Integer projectId = null;
        CommandDTO response = api.getByName(commandId, version, projectId);

        // TODO: test validations
    }
    /**
     * Get command by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByName1Test() throws ApiException {
        String library = null;
        Integer commandId = null;
        String version = null;
        Integer projectId = null;
        CommandDTO response = api.getByName1(library, commandId, version, projectId);

        // TODO: test validations
    }
    /**
     * Get the a python library installed in this environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByName2Test() throws ApiException {
        String library = null;
        String version = null;
        Integer projectId = null;
        List<String> expand = null;
        LibraryDTO response = api.getByName2(library, version, projectId, expand);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentMultiplicatorTest() throws ApiException {
        Integer projectId = null;
        api.getCurrentMultiplicator(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetInfoTest() throws ApiException {
        Long inodeId = null;
        api.getDatasetInfo(inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetInfo1Test() throws ApiException {
        Integer projectId = null;
        Long inodeId = null;
        api.getDatasetInfo1(projectId, inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirContentTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.getDirContent(path, projectId);

        // TODO: test validations
    }
    /**
     * Find Execution by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() throws ApiException {
        Integer id = null;
        String name = null;
        Integer projectId = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        ExecutionDTO response = api.getExecution(id, name, projectId, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * Get a list of executions for the job.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionsTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        ExecutionDTO response = api.getExecutions(name, projectId, offset, limit, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtendedDetailsTest() throws ApiException {
        String publicDSId = null;
        Integer projectId = null;
        api.getExtendedDetails(publicDSId, projectId);

        // TODO: test validations
    }
    /**
     * Get specific featuregroup from a specific featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupFromFeatureStoreTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.getFeatureGroupFromFeatureStore(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Preview feature data of a featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupPreviewTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturegroupPreview> response = api.getFeatureGroupPreview(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the SQL schema of a featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupSchemaTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        RowValueQueryResult response = api.getFeatureGroupSchema(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the list of feature groups for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturegroupsForFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturegroupDTO> response = api.getFeaturegroupsForFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore with specific Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreDTO response = api.getFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore with specific name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreByNameTest() throws ApiException {
        String featurestoreName = null;
        Integer projectId = null;
        FeaturestoreDTO response = api.getFeaturestoreByName(featurestoreName, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore Metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreIdTest() throws ApiException {
        String featurestoreName = null;
        Integer projectId = null;
        FeaturestoreClientSettingsDTO response = api.getFeaturestoreId(featurestoreName, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreSettingsTest() throws ApiException {
        Integer projectId = null;
        FeaturestoreClientSettingsDTO response = api.getFeaturestoreSettings(projectId);

        // TODO: test validations
    }
    /**
     * Get the list of feature stores for the project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoresTest() throws ApiException {
        Integer projectId = null;
        List<FeaturestoreDTO> response = api.getFeaturestores(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.getFile(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGitStatusOfJupyterRepoTest() throws ApiException {
        Integer projectId = null;
        api.getGitStatusOfJupyterRepo(projectId);

        // TODO: test validations
    }
    /**
     * Get the job with requested ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        String sortBy = null;
        List<String> filterBy = null;
        List<String> expand = null;
        JobDTO response = api.getJob(name, projectId, sortBy, filterBy, expand);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobUITest() throws ApiException {
        String appId = null;
        String isLivy = null;
        Integer projectId = null;
        api.getJobUI(appId, isLivy, projectId);

        // TODO: test validations
    }
    /**
     * Retrieve log of given execution and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogTest() throws ApiException {
        Integer id = null;
        String type = null;
        String name = null;
        Integer projectId = null;
        JobLogDTO response = api.getLog(id, type, name, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMoreInfoTest() throws ApiException {
        Integer projectId = null;
        Long inodeId = null;
        api.getMoreInfo(projectId, inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMoreInfo1Test() throws ApiException {
        Long inodeId = null;
        api.getMoreInfo1(inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMoreInfo2Test() throws ApiException {
        Integer projectId = null;
        api.getMoreInfo2(projectId);

        // TODO: test validations
    }
    /**
     * Get online featurestore storage connector for this feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnlineFeaturestoreStorageConnectorTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.getOnlineFeaturestoreStorageConnector(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPiaTest() throws ApiException {
        Integer projectId = null;
        api.getPia(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectByNameTest() throws ApiException {
        String projectName = null;
        api.getProjectByName(projectName);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectContentsTest() throws ApiException {
        Integer projectId = null;
        api.getProjectContents(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectSharedWithTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.getProjectSharedWith(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReadmeByInodeIdTest() throws ApiException {
        Long inodeId = null;
        api.getReadmeByInodeId(inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteGitBranchesTest() throws ApiException {
        Integer projectId = null;
        String remoteURI = null;
        String keyName = null;
        api.getRemoteGitBranches(projectId, remoteURI, keyName);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchemaTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        api.getSchema(topic, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchemaContentTest() throws ApiException {
        String schemaName = null;
        Integer schemaVersion = null;
        Integer projectId = null;
        api.getSchemaContent(schemaName, schemaVersion, projectId);

        // TODO: test validations
    }
    /**
     * Get info about a serving instance for the project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServingTest() throws ApiException {
        Integer servingId = null;
        Integer projectId = null;
        RepresentsAServingModel response = api.getServing(servingId, projectId);

        // TODO: test validations
    }
    /**
     * Get the list of serving instances for the project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServingsTest() throws ApiException {
        Integer projectId = null;
        List<RepresentsAServingModel> response = api.getServings(projectId);

        // TODO: test validations
    }
    /**
     * Get a storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorWithIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.getStorageConnectorWithId(connectorType, connectorId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get all storage connectors of a feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorsTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturestoreStorageConnectorDTO> response = api.getStorageConnectors(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get all storage connectors of a specific type of a feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorsOfTypeTest() throws ApiException {
        String connectorType = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturestoreStorageConnectorDTO> response = api.getStorageConnectorsOfType(connectorType, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the running TensorBoard of the logged in user in this project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTensorBoardTest() throws ApiException {
        Integer projectId = null;
        api.getTensorBoard(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTensorBoardUrlsTest() throws ApiException {
        String appId = null;
        Integer projectId = null;
        api.getTensorBoardUrls(appId, projectId);

        // TODO: test validations
    }
    /**
     * Get Kafka topic details.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopicTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        api.getTopic(topic, projectId);

        // TODO: test validations
    }
    /**
     * Get ACL metadata specified by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopicAclTest() throws ApiException {
        String topic = null;
        Integer id = null;
        Integer projectId = null;
        api.getTopicAcl(topic, id, projectId);

        // TODO: test validations
    }
    /**
     * Get all ACLs for a specified topic.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopicAclsTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        AclsBeanParam body = null;
        Integer offset = null;
        Integer limit = null;
        api.getTopicAcls(topic, projectId, body, offset, limit);

        // TODO: test validations
    }
    /**
     * Retrieve Kafka topics metadata .
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopicsTest() throws ApiException {
        Integer projectId = null;
        TopicsBeanParam body = null;
        Integer offset = null;
        Integer limit = null;
        api.getTopics(projectId, body, offset, limit);

        // TODO: test validations
    }
    /**
     * Get a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainingDatasetWithIdTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO response = api.getTrainingDatasetWithId(trainingdatasetid, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the list of training datasets for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainingDatasetsForFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<TrainingDatasetDTO> response = api.getTrainingDatasetsForFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Fetch the result of a Deequ data validation job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidationResultTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ValidationResult response = api.getValidationResult(featuregroupId, featureStoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get previously stored Deequ validation rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidationRulesTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ConstraintGroupDTO response = api.getValidationRules(featuregroupId, featureStoreId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getYarnUITest() throws ApiException {
        String appId = null;
        Integer projectId = null;
        api.getYarnUI(appId, projectId);

        // TODO: test validations
    }
    /**
     * Make inference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inferTest() throws ApiException {
        String modelName = null;
        String version = null;
        String verb = null;
        Integer projectId = null;
        String body = null;
        api.infer(modelName, version, verb, projectId, body);

        // TODO: test validations
    }
    /**
     * Inspect Spark user program and return SparkJobConfiguration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inspectTest() throws ApiException {
        String jobtype = null;
        String path = null;
        Integer projectId = null;
        SparkJobConfiguration response = api.inspect(jobtype, path, projectId);

        // TODO: test validations
    }
    /**
     * Install a python library in the environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void installTest() throws ApiException {
        String library = null;
        String version2 = null;
        Integer projectId = null;
        String packageManager = null;
        String version = null;
        String channel = null;
        String machine = null;
        api.install(library, version2, projectId, packageManager, version, channel, machine);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isDirTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.isDir(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isDir1Test() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.isDir1(path, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isRunningTest() throws ApiException {
        Integer projectId = null;
        api.isRunning(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSchemasForTopicsTest() throws ApiException {
        Integer projectId = null;
        api.listSchemasForTopics(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void livySessionsTest() throws ApiException {
        Integer projectId = null;
        api.livySessions(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileTest() throws ApiException {
        Integer projectId = null;
        MoveDTO body = null;
        api.moveFile(projectId, body);

        // TODO: test validations
    }
    /**
     * Upload json input for featurestore-util jobs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newFeaturestoreUtilTest() throws ApiException {
        Integer projectId = null;
        FeaturestoreUtilJobDTO body = null;
        api.newFeaturestoreUtil(projectId, body);

        // TODO: test validations
    }
    /**
     * Create an environment from version or export an environment as yaml file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTest() throws ApiException {
        String version = null;
        Integer projectId = null;
        String action = null;
        EnvironmentDTO response = api.post(version, projectId, action);

        // TODO: test validations
    }
    /**
     * Create an environment from yaml file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postYmlTest() throws ApiException {
        Integer projectId = null;
        EnvironmentYmlDTO body = null;
        EnvironmentDTO response = api.postYml(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishTest() throws ApiException {
        Integer projectId = null;
        InodeIdDTO body = null;
        api.publish(projectId, body);

        // TODO: test validations
    }
    /**
     * Create or Update a Job.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        JobConfiguration body = null;
        JobDTO response = api.put(name, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quotasByProjectIDTest() throws ApiException {
        Integer projectId = null;
        api.quotasByProjectID(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quotasByProjectID1Test() throws ApiException {
        Integer projectId = null;
        String projectName = null;
        Long inodeId = null;
        api.quotasByProjectID1(projectId, projectName, inodeId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectRequestTest() throws ApiException {
        Long inodeId = null;
        Integer projectId = null;
        api.rejectRequest(inodeId, projectId);

        // TODO: test validations
    }
    /**
     * Remove ACL specified by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAclsFromTopicTest() throws ApiException {
        String topic = null;
        Integer id = null;
        Integer projectId = null;
        api.removeAclsFromTopic(topic, id, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCorruptedTest() throws ApiException {
        String fileName = null;
        Integer projectId = null;
        api.removeCorrupted(fileName, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeMembersByIDTest() throws ApiException {
        String email = null;
        Integer projectId = null;
        api.removeMembersByID(email, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeProjectAndFilesTest() throws ApiException {
        Integer projectId = null;
        api.removeProjectAndFiles(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePublicTest() throws ApiException {
        String publicDSId = null;
        Boolean clean = null;
        Integer projectId = null;
        api.removePublic(publicDSId, clean, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePublic1Test() throws ApiException {
        Long inodeId = null;
        Integer projectId = null;
        api.removePublic1(inodeId, projectId);

        // TODO: test validations
    }
    /**
     * Delete a Kafka topic.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTopicTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        api.removeTopic(topic, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removedataSetdirTest() throws ApiException {
        String fileName = null;
        Integer projectId = null;
        api.removedataSetdir(fileName, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removedataSetdir1Test() throws ApiException {
        String fileName = null;
        Integer projectId = null;
        api.removedataSetdir1(fileName, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removefileTest() throws ApiException {
        String fileName = null;
        Integer projectId = null;
        api.removefile(fileName, projectId);

        // TODO: test validations
    }
    /**
     * Retry log aggregation of given execution and type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retryLogTest() throws ApiException {
        Integer id = null;
        String type = null;
        String name = null;
        Integer projectId = null;
        JobLogDTO response = api.retryLog(id, type, name, projectId);

        // TODO: test validations
    }
    /**
     * Search for libraries using conda or pip package managers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String search = null;
        String version = null;
        Integer projectId = null;
        String query = null;
        String channel = null;
        LibrarySearchDTO response = api.search(search, version, projectId, query, channel);

        // TODO: test validations
    }
    /**
     * Create project secret directory in Airflow home
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void secretDirTest() throws ApiException {
        Integer projectId = null;
        api.secretDir(projectId);

        // TODO: test validations
    }
    /**
     * Set permissions (potentially with sticky bit) for datasets
     *
     * Allow data scientists to create and modify own files in dataset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPermissionsTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.setPermissions(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsTest() throws ApiException {
        Integer projectId = null;
        api.settings(projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareTest() throws ApiException {
        Integer projectId = null;
        InodeIdDTO body = null;
        api.share(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareDataSetTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.shareDataSet(projectId, body);

        // TODO: test validations
    }
    /**
     * Share a Kafka topic with a project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareTopicTest() throws ApiException {
        String topic = null;
        Integer destProjectId = null;
        Integer projectId = null;
        api.shareTopic(topic, destProjectId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showManifestTest() throws ApiException {
        String publicDSId = null;
        Integer projectId = null;
        api.showManifest(publicDSId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDownloadTest() throws ApiException {
        String publicDSId = null;
        Integer projectId = null;
        Download body = null;
        api.startDownload(publicDSId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startNotebookServerTest() throws ApiException {
        Integer projectId = null;
        JupyterSettings body = null;
        api.startNotebookServer(projectId, body);

        // TODO: test validations
    }
    /**
     * Start or stop a Serving instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startOrStopTest() throws ApiException {
        Integer servingId = null;
        String action = null;
        Integer projectId = null;
        api.startOrStop(servingId, action, projectId);

        // TODO: test validations
    }
    /**
     * Start a new TensorBoard for the logged in user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startTensorBoardTest() throws ApiException {
        String elasticId = null;
        Integer projectId = null;
        api.startTensorBoard(elasticId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopLivySessionTest() throws ApiException {
        String appId = null;
        Integer projectId = null;
        api.stopLivySession(appId, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopNotebookServerTest() throws ApiException {
        Integer projectId = null;
        api.stopNotebookServer(projectId);

        // TODO: test validations
    }
    /**
     * Stop the running TensorBoard for the logged in user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopTensorBoardTest() throws ApiException {
        Integer projectId = null;
        api.stopTensorBoard(projectId);

        // TODO: test validations
    }
    /**
     * Generate a JWT for Airflow usage and store it in project&#x27;s secret directory in Airflow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeAirflowJWTTest() throws ApiException {
        Integer projectId = null;
        api.storeAirflowJWT(projectId);

        // TODO: test validations
    }
    /**
     * Synchornize Hive Table with the feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncWithFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        FeaturegroupDTO response = api.syncWithFeaturestore(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testMethod1Test() throws ApiException {
        String path = null;
        Integer projectId = null;
        Integer templateId = null;
        api.testMethod1(path, projectId, templateId);

        // TODO: test validations
    }
    /**
     * Get list of projects that a topic has been shared with.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topicIsSharedToTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        api.topicIsSharedTo(topic, projectId);

        // TODO: test validations
    }
    /**
     * Uninstall a python library from the environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uninstallTest() throws ApiException {
        String library = null;
        String version = null;
        Integer projectId = null;
        api.uninstall(library, version, projectId);

        // TODO: test validations
    }
    /**
     * Cancel a job&#x27;s schedule.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unscheduleJobTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        api.unscheduleJob(name, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unshareDataSetTest() throws ApiException {
        Integer projectId = null;
        DataSetDTO body = null;
        api.unshareDataSet(projectId, body);

        // TODO: test validations
    }
    /**
     * Unshare Kafka topic from a project (specified as destProjectId).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unshareTopicFromProjectTest() throws ApiException {
        String topic = null;
        Integer destProjectId = null;
        Integer projectId = null;
        api.unshareTopicFromProject(topic, destProjectId, projectId);

        // TODO: test validations
    }
    /**
     * Unshare Kafka topic from all projects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unshareTopicFromProjectsTest() throws ApiException {
        String topic = null;
        Integer projectId = null;
        api.unshareTopicFromProjects(topic, projectId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unzipTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.unzip(path, projectId);

        // TODO: test validations
    }
    /**
     * Update commands for this library
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String library = null;
        String version = null;
        Integer projectId = null;
        api.update(library, version, projectId);

        // TODO: test validations
    }
    /**
     * Update featuregroup contents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFeaturegroupTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        Boolean updateMetadata = null;
        Boolean updateStats = null;
        Boolean enableOnline = null;
        Boolean disableOnline = null;
        Boolean updateStatsSettings = null;
        FeaturegroupDTO response = api.updateFeaturegroup(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotebookServerTest() throws ApiException {
        Integer projectId = null;
        JupyterSettings body = null;
        api.updateNotebookServer(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePiaTest() throws ApiException {
        Integer projectId = null;
        Pia body = null;
        api.updatePia(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        Integer projectId = null;
        ProjectDTO body = null;
        api.updateProject(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleByEmailTest() throws ApiException {
        String email = null;
        Integer projectId = null;
        String role = null;
        api.updateRoleByEmail(email, projectId, role);

        // TODO: test validations
    }
    /**
     * Create/Update job&#x27;s schedule.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScheduleTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        ScheduleDTO body = null;
        api.updateSchedule(name, projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSchemaVersionTest() throws ApiException {
        String topic = null;
        Integer version = null;
        Integer projectId = null;
        api.updateSchemaVersion(topic, version, projectId);

        // TODO: test validations
    }
    /**
     * Get a storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStorageConnectorWithIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO body = null;
        FeaturestoreStorageConnectorDTO response = api.updateStorageConnectorWithId(connectorType, connectorId, featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Update ACL specified by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTopicAclsTest() throws ApiException {
        String topic = null;
        Integer id = null;
        Integer projectId = null;
        AclDTO body = null;
        api.updateTopicAcls(topic, id, projectId, body);

        // TODO: test validations
    }
    /**
     * Update a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTrainingDatasetTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO body = null;
        Boolean updateMetadata = null;
        Boolean updateStats = null;
        TrainingDatasetDTO response = api.updateTrainingDataset(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMethod1Test() throws ApiException {
        String path = null;
        Integer projectId = null;
        File file = null;
        String flowChunkNumber = null;
        String flowChunkSize = null;
        String flowCurrentChunkSize = null;
        String flowFilename = null;
        String flowIdentifier = null;
        String flowRelativePath = null;
        String flowTotalChunks = null;
        String flowTotalSize = null;
        Integer templateId = null;
        api.uploadMethod1(path, projectId, file, flowChunkNumber, flowChunkSize, flowCurrentChunkSize, flowFilename, flowIdentifier, flowRelativePath, flowTotalChunks, flowTotalSize, templateId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateSchemaForTopicsTest() throws ApiException {
        Integer projectId = null;
        SchemaDTO body = null;
        api.validateSchemaForTopics(projectId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void zipTest() throws ApiException {
        String path = null;
        Integer projectId = null;
        api.zip(path, projectId);

        // TODO: test validations
    }
}
