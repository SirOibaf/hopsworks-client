/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ConstraintGroupDTO;
import io.swagger.client.model.DataValidationSettingsDTO;
import io.swagger.client.model.FeaturegroupDTO;
import io.swagger.client.model.FeaturegroupImportJobDTO;
import io.swagger.client.model.FeaturegroupPreview;
import io.swagger.client.model.FeaturestoreClientSettingsDTO;
import io.swagger.client.model.FeaturestoreDTO;
import io.swagger.client.model.FeaturestoreStorageConnectorDTO;
import io.swagger.client.model.FeaturestoreUtilJobDTO;
import io.swagger.client.model.JobDTO;
import io.swagger.client.model.RowValueQueryResult;
import io.swagger.client.model.TrainingDatasetDTO;
import io.swagger.client.model.TrainingDatasetJobDTO;
import io.swagger.client.model.ValidationResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeaturestoreServiceApi
 */
@Ignore
public class FeaturestoreServiceApiTest {

    private final FeaturestoreServiceApi api = new FeaturestoreServiceApi();

    /**
     * Write Deequ validation rules to Filesystem so validation job can pick it up
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addValidationRulesTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ConstraintGroupDTO body = null;
        DataValidationSettingsDTO response = api.addValidationRules(featuregroupId, featureStoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Create feature group in a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFeaturegroupTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        FeaturegroupDTO response = api.createFeaturegroup(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Create a new storage connector for the feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewStorageConnectorWithTypeTest() throws ApiException {
        String connectorType = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO body = null;
        FeaturestoreStorageConnectorDTO response = api.createNewStorageConnectorWithType(connectorType, featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Configure job to import featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateImportJobTest() throws ApiException {
        FeaturegroupImportJobDTO body = null;
        Integer projectId = null;
        JobDTO response = api.createOrUpdateImportJob(body, projectId);

        // TODO: test validations
    }
    /**
     * Configure job to create training dataset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTrainingDatasetJobTest() throws ApiException {
        TrainingDatasetJobDTO body = null;
        Integer projectId = null;
        JobDTO response = api.createOrUpdateTrainingDatasetJob(body, projectId);

        // TODO: test validations
    }
    /**
     * Create training dataset for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTrainingDatasetTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO body = null;
        TrainingDatasetDTO response = api.createTrainingDataset(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Delete specific featuregroup from a specific featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeatureGroupFromFeatureStoreTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.deleteFeatureGroupFromFeatureStore(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Delete featuregroup contents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeaturegroupContentsTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.deleteFeaturegroupContents(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Delete storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStorageConnectorWithTypeAndIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.deleteStorageConnectorWithTypeAndId(connectorType, connectorId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Delete a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTrainingDatasetTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO response = api.deleteTrainingDataset(trainingdatasetid, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get specific featuregroup from a specific featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupFromFeatureStoreTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO response = api.getFeatureGroupFromFeatureStore(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Preview feature data of a featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupPreviewTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturegroupPreview> response = api.getFeatureGroupPreview(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the SQL schema of a featuregroup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureGroupSchemaTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        RowValueQueryResult response = api.getFeatureGroupSchema(featuregroupId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the list of feature groups for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturegroupsForFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturegroupDTO> response = api.getFeaturegroupsForFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore with specific Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreDTO response = api.getFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore with specific name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreByNameTest() throws ApiException {
        String featurestoreName = null;
        Integer projectId = null;
        FeaturestoreDTO response = api.getFeaturestoreByName(featurestoreName, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore Metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreIdTest() throws ApiException {
        String featurestoreName = null;
        Integer projectId = null;
        FeaturestoreClientSettingsDTO response = api.getFeaturestoreId(featurestoreName, projectId);

        // TODO: test validations
    }
    /**
     * Get featurestore settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoreSettingsTest() throws ApiException {
        Integer projectId = null;
        FeaturestoreClientSettingsDTO response = api.getFeaturestoreSettings(projectId);

        // TODO: test validations
    }
    /**
     * Get the list of feature stores for the project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeaturestoresTest() throws ApiException {
        Integer projectId = null;
        List<FeaturestoreDTO> response = api.getFeaturestores(projectId);

        // TODO: test validations
    }
    /**
     * Get online featurestore storage connector for this feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnlineFeaturestoreStorageConnectorTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.getOnlineFeaturestoreStorageConnector(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get a storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorWithIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO response = api.getStorageConnectorWithId(connectorType, connectorId, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get all storage connectors of a feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorsTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturestoreStorageConnectorDTO> response = api.getStorageConnectors(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get all storage connectors of a specific type of a feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConnectorsOfTypeTest() throws ApiException {
        String connectorType = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        List<FeaturestoreStorageConnectorDTO> response = api.getStorageConnectorsOfType(connectorType, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainingDatasetWithIdTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO response = api.getTrainingDatasetWithId(trainingdatasetid, featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get the list of training datasets for a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainingDatasetsForFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        List<TrainingDatasetDTO> response = api.getTrainingDatasetsForFeaturestore(featurestoreId, projectId);

        // TODO: test validations
    }
    /**
     * Fetch the result of a Deequ data validation job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidationResultTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ValidationResult response = api.getValidationResult(featuregroupId, featureStoreId, projectId);

        // TODO: test validations
    }
    /**
     * Get previously stored Deequ validation rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidationRulesTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featureStoreId = null;
        Integer projectId = null;
        ConstraintGroupDTO response = api.getValidationRules(featuregroupId, featureStoreId, projectId);

        // TODO: test validations
    }
    /**
     * Upload json input for featurestore-util jobs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newFeaturestoreUtilTest() throws ApiException {
        Integer projectId = null;
        FeaturestoreUtilJobDTO body = null;
        api.newFeaturestoreUtil(projectId, body);

        // TODO: test validations
    }
    /**
     * Synchornize Hive Table with the feature store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncWithFeaturestoreTest() throws ApiException {
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        FeaturegroupDTO response = api.syncWithFeaturestore(featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Update featuregroup contents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFeaturegroupTest() throws ApiException {
        Integer featuregroupId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturegroupDTO body = null;
        Boolean updateMetadata = null;
        Boolean updateStats = null;
        Boolean enableOnline = null;
        Boolean disableOnline = null;
        Boolean updateStatsSettings = null;
        FeaturegroupDTO response = api.updateFeaturegroup(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings);

        // TODO: test validations
    }
    /**
     * Get a storage connector with a specific id and type from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStorageConnectorWithIdTest() throws ApiException {
        String connectorType = null;
        Integer connectorId = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        FeaturestoreStorageConnectorDTO body = null;
        FeaturestoreStorageConnectorDTO response = api.updateStorageConnectorWithId(connectorType, connectorId, featurestoreId, projectId, body);

        // TODO: test validations
    }
    /**
     * Update a training datasets with a specific id from a featurestore
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTrainingDatasetTest() throws ApiException {
        Integer trainingdatasetid = null;
        Integer featurestoreId = null;
        Integer projectId = null;
        TrainingDatasetDTO body = null;
        Boolean updateMetadata = null;
        Boolean updateStats = null;
        TrainingDatasetDTO response = api.updateTrainingDataset(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats);

        // TODO: test validations
    }
}
