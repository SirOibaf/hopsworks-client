/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FeaturestoreHopsfsConnector;
import io.swagger.client.model.FeaturestoreJdbcConnector;
import io.swagger.client.model.FeaturestoreS3Connector;
import io.swagger.client.model.Project;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Featurestore
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Featurestore {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("project")
  private Project project = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("hiveDbId")
  private Long hiveDbId = null;

  @SerializedName("featurestoreJdbcConnectorConnections")
  private List<FeaturestoreJdbcConnector> featurestoreJdbcConnectorConnections = null;

  @SerializedName("featurestoreS3ConnectorConnections")
  private List<FeaturestoreS3Connector> featurestoreS3ConnectorConnections = null;

  @SerializedName("hopsfsConnections")
  private List<FeaturestoreHopsfsConnector> hopsfsConnections = null;
  public Featurestore id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Featurestore project(Project project) {
    this.project = project;
    return this;
  }

  

  /**
  * Get project
  * @return project
  **/
  @Schema(description = "")
  public Project getProject() {
    return project;
  }
  public void setProject(Project project) {
    this.project = project;
  }
  public Featurestore created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  

  /**
  * Get created
  * @return created
  **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public Featurestore hiveDbId(Long hiveDbId) {
    this.hiveDbId = hiveDbId;
    return this;
  }

  

  /**
  * Get hiveDbId
  * @return hiveDbId
  **/
  @Schema(required = true, description = "")
  public Long getHiveDbId() {
    return hiveDbId;
  }
  public void setHiveDbId(Long hiveDbId) {
    this.hiveDbId = hiveDbId;
  }
  public Featurestore featurestoreJdbcConnectorConnections(List<FeaturestoreJdbcConnector> featurestoreJdbcConnectorConnections) {
    this.featurestoreJdbcConnectorConnections = featurestoreJdbcConnectorConnections;
    return this;
  }

  public Featurestore addFeaturestoreJdbcConnectorConnectionsItem(FeaturestoreJdbcConnector featurestoreJdbcConnectorConnectionsItem) {
    if (this.featurestoreJdbcConnectorConnections == null) {
      this.featurestoreJdbcConnectorConnections = new ArrayList<FeaturestoreJdbcConnector>();
    }
    this.featurestoreJdbcConnectorConnections.add(featurestoreJdbcConnectorConnectionsItem);
    return this;
  }

  /**
  * Get featurestoreJdbcConnectorConnections
  * @return featurestoreJdbcConnectorConnections
  **/
  @Schema(description = "")
  public List<FeaturestoreJdbcConnector> getFeaturestoreJdbcConnectorConnections() {
    return featurestoreJdbcConnectorConnections;
  }
  public void setFeaturestoreJdbcConnectorConnections(List<FeaturestoreJdbcConnector> featurestoreJdbcConnectorConnections) {
    this.featurestoreJdbcConnectorConnections = featurestoreJdbcConnectorConnections;
  }
  public Featurestore featurestoreS3ConnectorConnections(List<FeaturestoreS3Connector> featurestoreS3ConnectorConnections) {
    this.featurestoreS3ConnectorConnections = featurestoreS3ConnectorConnections;
    return this;
  }

  public Featurestore addFeaturestoreS3ConnectorConnectionsItem(FeaturestoreS3Connector featurestoreS3ConnectorConnectionsItem) {
    if (this.featurestoreS3ConnectorConnections == null) {
      this.featurestoreS3ConnectorConnections = new ArrayList<FeaturestoreS3Connector>();
    }
    this.featurestoreS3ConnectorConnections.add(featurestoreS3ConnectorConnectionsItem);
    return this;
  }

  /**
  * Get featurestoreS3ConnectorConnections
  * @return featurestoreS3ConnectorConnections
  **/
  @Schema(description = "")
  public List<FeaturestoreS3Connector> getFeaturestoreS3ConnectorConnections() {
    return featurestoreS3ConnectorConnections;
  }
  public void setFeaturestoreS3ConnectorConnections(List<FeaturestoreS3Connector> featurestoreS3ConnectorConnections) {
    this.featurestoreS3ConnectorConnections = featurestoreS3ConnectorConnections;
  }
  public Featurestore hopsfsConnections(List<FeaturestoreHopsfsConnector> hopsfsConnections) {
    this.hopsfsConnections = hopsfsConnections;
    return this;
  }

  public Featurestore addHopsfsConnectionsItem(FeaturestoreHopsfsConnector hopsfsConnectionsItem) {
    if (this.hopsfsConnections == null) {
      this.hopsfsConnections = new ArrayList<FeaturestoreHopsfsConnector>();
    }
    this.hopsfsConnections.add(hopsfsConnectionsItem);
    return this;
  }

  /**
  * Get hopsfsConnections
  * @return hopsfsConnections
  **/
  @Schema(description = "")
  public List<FeaturestoreHopsfsConnector> getHopsfsConnections() {
    return hopsfsConnections;
  }
  public void setHopsfsConnections(List<FeaturestoreHopsfsConnector> hopsfsConnections) {
    this.hopsfsConnections = hopsfsConnections;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Featurestore featurestore = (Featurestore) o;
    return Objects.equals(this.id, featurestore.id) &&
        Objects.equals(this.project, featurestore.project) &&
        Objects.equals(this.created, featurestore.created) &&
        Objects.equals(this.hiveDbId, featurestore.hiveDbId) &&
        Objects.equals(this.featurestoreJdbcConnectorConnections, featurestore.featurestoreJdbcConnectorConnections) &&
        Objects.equals(this.featurestoreS3ConnectorConnections, featurestore.featurestoreS3ConnectorConnections) &&
        Objects.equals(this.hopsfsConnections, featurestore.hopsfsConnections);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, project, created, hiveDbId, featurestoreJdbcConnectorConnections, featurestoreS3ConnectorConnections, hopsfsConnections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Featurestore {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hiveDbId: ").append(toIndentedString(hiveDbId)).append("\n");
    sb.append("    featurestoreJdbcConnectorConnections: ").append(toIndentedString(featurestoreJdbcConnectorConnections)).append("\n");
    sb.append("    featurestoreS3ConnectorConnections: ").append(toIndentedString(featurestoreS3ConnectorConnections)).append("\n");
    sb.append("    hopsfsConnections: ").append(toIndentedString(hopsfsConnections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
