/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FieldPredefinedValue;
import io.swagger.client.model.FieldType;
import io.swagger.client.model.MTable;
import io.swagger.client.model.RawData;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Field
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Field {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("tableid")
  private Integer tableid = null;

  @SerializedName("fieldTypes")
  private FieldType fieldTypes = null;

  @SerializedName("fieldPredefinedValues")
  private List<FieldPredefinedValue> fieldPredefinedValues = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("maxsize")
  private Integer maxsize = null;

  @SerializedName("searchable")
  private Boolean searchable = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("position")
  private Integer position = null;

  @SerializedName("fieldTypeId")
  private Integer fieldTypeId = null;

  @SerializedName("mtable")
  private MTable mtable = null;

  @SerializedName("rawData")
  private List<RawData> rawData = null;
  public Field id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Field tableid(Integer tableid) {
    this.tableid = tableid;
    return this;
  }

  

  /**
  * Get tableid
  * @return tableid
  **/
  @Schema(required = true, description = "")
  public Integer getTableid() {
    return tableid;
  }
  public void setTableid(Integer tableid) {
    this.tableid = tableid;
  }
  public Field fieldTypes(FieldType fieldTypes) {
    this.fieldTypes = fieldTypes;
    return this;
  }

  

  /**
  * Get fieldTypes
  * @return fieldTypes
  **/
  @Schema(description = "")
  public FieldType getFieldTypes() {
    return fieldTypes;
  }
  public void setFieldTypes(FieldType fieldTypes) {
    this.fieldTypes = fieldTypes;
  }
  public Field fieldPredefinedValues(List<FieldPredefinedValue> fieldPredefinedValues) {
    this.fieldPredefinedValues = fieldPredefinedValues;
    return this;
  }

  public Field addFieldPredefinedValuesItem(FieldPredefinedValue fieldPredefinedValuesItem) {
    if (this.fieldPredefinedValues == null) {
      this.fieldPredefinedValues = new ArrayList<FieldPredefinedValue>();
    }
    this.fieldPredefinedValues.add(fieldPredefinedValuesItem);
    return this;
  }

  /**
  * Get fieldPredefinedValues
  * @return fieldPredefinedValues
  **/
  @Schema(description = "")
  public List<FieldPredefinedValue> getFieldPredefinedValues() {
    return fieldPredefinedValues;
  }
  public void setFieldPredefinedValues(List<FieldPredefinedValue> fieldPredefinedValues) {
    this.fieldPredefinedValues = fieldPredefinedValues;
  }
  public Field name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Field type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public Field maxsize(Integer maxsize) {
    this.maxsize = maxsize;
    return this;
  }

  

  /**
  * Get maxsize
  * @return maxsize
  **/
  @Schema(required = true, description = "")
  public Integer getMaxsize() {
    return maxsize;
  }
  public void setMaxsize(Integer maxsize) {
    this.maxsize = maxsize;
  }
  public Field searchable(Boolean searchable) {
    this.searchable = searchable;
    return this;
  }

  

  /**
  * Get searchable
  * @return searchable
  **/
  @Schema(required = true, description = "")
  public Boolean isSearchable() {
    return searchable;
  }
  public void setSearchable(Boolean searchable) {
    this.searchable = searchable;
  }
  public Field required(Boolean required) {
    this.required = required;
    return this;
  }

  

  /**
  * Get required
  * @return required
  **/
  @Schema(required = true, description = "")
  public Boolean isRequired() {
    return required;
  }
  public void setRequired(Boolean required) {
    this.required = required;
  }
  public Field description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(required = true, description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Field position(Integer position) {
    this.position = position;
    return this;
  }

  

  /**
  * Get position
  * @return position
  **/
  @Schema(required = true, description = "")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }
  public Field fieldTypeId(Integer fieldTypeId) {
    this.fieldTypeId = fieldTypeId;
    return this;
  }

  

  /**
  * Get fieldTypeId
  * @return fieldTypeId
  **/
  @Schema(description = "")
  public Integer getFieldTypeId() {
    return fieldTypeId;
  }
  public void setFieldTypeId(Integer fieldTypeId) {
    this.fieldTypeId = fieldTypeId;
  }
  public Field mtable(MTable mtable) {
    this.mtable = mtable;
    return this;
  }

  

  /**
  * Get mtable
  * @return mtable
  **/
  @Schema(description = "")
  public MTable getMtable() {
    return mtable;
  }
  public void setMtable(MTable mtable) {
    this.mtable = mtable;
  }
  public Field rawData(List<RawData> rawData) {
    this.rawData = rawData;
    return this;
  }

  public Field addRawDataItem(RawData rawDataItem) {
    if (this.rawData == null) {
      this.rawData = new ArrayList<RawData>();
    }
    this.rawData.add(rawDataItem);
    return this;
  }

  /**
  * Get rawData
  * @return rawData
  **/
  @Schema(description = "")
  public List<RawData> getRawData() {
    return rawData;
  }
  public void setRawData(List<RawData> rawData) {
    this.rawData = rawData;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Field field = (Field) o;
    return Objects.equals(this.id, field.id) &&
        Objects.equals(this.tableid, field.tableid) &&
        Objects.equals(this.fieldTypes, field.fieldTypes) &&
        Objects.equals(this.fieldPredefinedValues, field.fieldPredefinedValues) &&
        Objects.equals(this.name, field.name) &&
        Objects.equals(this.type, field.type) &&
        Objects.equals(this.maxsize, field.maxsize) &&
        Objects.equals(this.searchable, field.searchable) &&
        Objects.equals(this.required, field.required) &&
        Objects.equals(this.description, field.description) &&
        Objects.equals(this.position, field.position) &&
        Objects.equals(this.fieldTypeId, field.fieldTypeId) &&
        Objects.equals(this.mtable, field.mtable) &&
        Objects.equals(this.rawData, field.rawData);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, tableid, fieldTypes, fieldPredefinedValues, name, type, maxsize, searchable, required, description, position, fieldTypeId, mtable, rawData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Field {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tableid: ").append(toIndentedString(tableid)).append("\n");
    sb.append("    fieldTypes: ").append(toIndentedString(fieldTypes)).append("\n");
    sb.append("    fieldPredefinedValues: ").append(toIndentedString(fieldPredefinedValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maxsize: ").append(toIndentedString(maxsize)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    fieldTypeId: ").append(toIndentedString(fieldTypeId)).append("\n");
    sb.append("    mtable: ").append(toIndentedString(mtable)).append("\n");
    sb.append("    rawData: ").append(toIndentedString(rawData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
