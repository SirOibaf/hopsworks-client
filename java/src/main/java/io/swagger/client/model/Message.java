/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Message;
import io.swagger.client.model.Users;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Message
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Message {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("dateSent")
  private OffsetDateTime dateSent = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("preview")
  private String preview = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("unread")
  private Boolean unread = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("usersCollection")
  private List<Users> usersCollection = null;

  @SerializedName("from")
  private Users from = null;

  @SerializedName("to")
  private Users to = null;

  @SerializedName("replyToMsg")
  private Message replyToMsg = null;
  public Message id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Message dateSent(OffsetDateTime dateSent) {
    this.dateSent = dateSent;
    return this;
  }

  

  /**
  * Get dateSent
  * @return dateSent
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getDateSent() {
    return dateSent;
  }
  public void setDateSent(OffsetDateTime dateSent) {
    this.dateSent = dateSent;
  }
  public Message subject(String subject) {
    this.subject = subject;
    return this;
  }

  

  /**
  * Get subject
  * @return subject
  **/
  @Schema(description = "")
  public String getSubject() {
    return subject;
  }
  public void setSubject(String subject) {
    this.subject = subject;
  }
  public Message preview(String preview) {
    this.preview = preview;
    return this;
  }

  

  /**
  * Get preview
  * @return preview
  **/
  @Schema(description = "")
  public String getPreview() {
    return preview;
  }
  public void setPreview(String preview) {
    this.preview = preview;
  }
  public Message content(String content) {
    this.content = content;
    return this;
  }

  

  /**
  * Get content
  * @return content
  **/
  @Schema(required = true, description = "")
  public String getContent() {
    return content;
  }
  public void setContent(String content) {
    this.content = content;
  }
  public Message unread(Boolean unread) {
    this.unread = unread;
    return this;
  }

  

  /**
  * Get unread
  * @return unread
  **/
  @Schema(required = true, description = "")
  public Boolean isUnread() {
    return unread;
  }
  public void setUnread(Boolean unread) {
    this.unread = unread;
  }
  public Message deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  

  /**
  * Get deleted
  * @return deleted
  **/
  @Schema(required = true, description = "")
  public Boolean isDeleted() {
    return deleted;
  }
  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }
  public Message path(String path) {
    this.path = path;
    return this;
  }

  

  /**
  * Get path
  * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }
  public void setPath(String path) {
    this.path = path;
  }
  public Message usersCollection(List<Users> usersCollection) {
    this.usersCollection = usersCollection;
    return this;
  }

  public Message addUsersCollectionItem(Users usersCollectionItem) {
    if (this.usersCollection == null) {
      this.usersCollection = new ArrayList<Users>();
    }
    this.usersCollection.add(usersCollectionItem);
    return this;
  }

  /**
  * Get usersCollection
  * @return usersCollection
  **/
  @Schema(description = "")
  public List<Users> getUsersCollection() {
    return usersCollection;
  }
  public void setUsersCollection(List<Users> usersCollection) {
    this.usersCollection = usersCollection;
  }
  public Message from(Users from) {
    this.from = from;
    return this;
  }

  

  /**
  * Get from
  * @return from
  **/
  @Schema(description = "")
  public Users getFrom() {
    return from;
  }
  public void setFrom(Users from) {
    this.from = from;
  }
  public Message to(Users to) {
    this.to = to;
    return this;
  }

  

  /**
  * Get to
  * @return to
  **/
  @Schema(description = "")
  public Users getTo() {
    return to;
  }
  public void setTo(Users to) {
    this.to = to;
  }
  public Message replyToMsg(Message replyToMsg) {
    this.replyToMsg = replyToMsg;
    return this;
  }

  

  /**
  * Get replyToMsg
  * @return replyToMsg
  **/
  @Schema(description = "")
  public Message getReplyToMsg() {
    return replyToMsg;
  }
  public void setReplyToMsg(Message replyToMsg) {
    this.replyToMsg = replyToMsg;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.id, message.id) &&
        Objects.equals(this.dateSent, message.dateSent) &&
        Objects.equals(this.subject, message.subject) &&
        Objects.equals(this.preview, message.preview) &&
        Objects.equals(this.content, message.content) &&
        Objects.equals(this.unread, message.unread) &&
        Objects.equals(this.deleted, message.deleted) &&
        Objects.equals(this.path, message.path) &&
        Objects.equals(this.usersCollection, message.usersCollection) &&
        Objects.equals(this.from, message.from) &&
        Objects.equals(this.to, message.to) &&
        Objects.equals(this.replyToMsg, message.replyToMsg);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, dateSent, subject, preview, content, unread, deleted, path, usersCollection, from, to, replyToMsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateSent: ").append(toIndentedString(dateSent)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    unread: ").append(toIndentedString(unread)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    usersCollection: ").append(toIndentedString(usersCollection)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    replyToMsg: ").append(toIndentedString(replyToMsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
