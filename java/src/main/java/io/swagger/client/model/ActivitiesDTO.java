/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ActivitiesDTO;
import io.swagger.client.model.UserDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ActivitiesDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class ActivitiesDTO {

  @SerializedName("href")
  private String href = null;

  @SerializedName("items")
  private List<ActivitiesDTO> items = null;

  @SerializedName("count")
  private Long count = null;

  @SerializedName("activity")
  private String activity = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("projectName")
  private String projectName = null;

  @SerializedName("flag")
  private String flag = null;

  @SerializedName("user")
  private UserDTO user = null;
  public ActivitiesDTO href(String href) {
    this.href = href;
    return this;
  }

  

  /**
  * Get href
  * @return href
  **/
  @Schema(description = "")
  public String getHref() {
    return href;
  }
  public void setHref(String href) {
    this.href = href;
  }
  public ActivitiesDTO items(List<ActivitiesDTO> items) {
    this.items = items;
    return this;
  }

  public ActivitiesDTO addItemsItem(ActivitiesDTO itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<ActivitiesDTO>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
  * Get items
  * @return items
  **/
  @Schema(description = "")
  public List<ActivitiesDTO> getItems() {
    return items;
  }
  public void setItems(List<ActivitiesDTO> items) {
    this.items = items;
  }
  public ActivitiesDTO count(Long count) {
    this.count = count;
    return this;
  }

  

  /**
  * Get count
  * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }
  public void setCount(Long count) {
    this.count = count;
  }
  public ActivitiesDTO activity(String activity) {
    this.activity = activity;
    return this;
  }

  

  /**
  * Get activity
  * @return activity
  **/
  @Schema(description = "")
  public String getActivity() {
    return activity;
  }
  public void setActivity(String activity) {
    this.activity = activity;
  }
  public ActivitiesDTO timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Get timestamp
  * @return timestamp
  **/
  @Schema(description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }
  public ActivitiesDTO projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  

  /**
  * Get projectName
  * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }
  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }
  public ActivitiesDTO flag(String flag) {
    this.flag = flag;
    return this;
  }

  

  /**
  * Get flag
  * @return flag
  **/
  @Schema(description = "")
  public String getFlag() {
    return flag;
  }
  public void setFlag(String flag) {
    this.flag = flag;
  }
  public ActivitiesDTO user(UserDTO user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public UserDTO getUser() {
    return user;
  }
  public void setUser(UserDTO user) {
    this.user = user;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivitiesDTO activitiesDTO = (ActivitiesDTO) o;
    return Objects.equals(this.href, activitiesDTO.href) &&
        Objects.equals(this.items, activitiesDTO.items) &&
        Objects.equals(this.count, activitiesDTO.count) &&
        Objects.equals(this.activity, activitiesDTO.activity) &&
        Objects.equals(this.timestamp, activitiesDTO.timestamp) &&
        Objects.equals(this.projectName, activitiesDTO.projectName) &&
        Objects.equals(this.flag, activitiesDTO.flag) &&
        Objects.equals(this.user, activitiesDTO.user);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(href, items, count, activity, timestamp, projectName, flag, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivitiesDTO {\n");
    
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
