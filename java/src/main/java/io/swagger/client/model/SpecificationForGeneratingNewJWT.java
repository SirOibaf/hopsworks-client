/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * SpecificationForGeneratingNewJWT
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class SpecificationForGeneratingNewJWT {

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("audiences")
  private List<String> audiences = new ArrayList<String>();

  @SerializedName("keyName")
  private String keyName = null;

  @SerializedName("expiresAt")
  private OffsetDateTime expiresAt = null;

  @SerializedName("nbf")
  private OffsetDateTime nbf = null;

  @SerializedName("renewable")
  private Boolean renewable = null;

  @SerializedName("expLeeway")
  private Integer expLeeway = null;
  public SpecificationForGeneratingNewJWT subject(String subject) {
    this.subject = subject;
    return this;
  }

  

  /**
  * Subject to be encoded in JWT
  * @return subject
  **/
  @Schema(required = true, description = "Subject to be encoded in JWT")
  public String getSubject() {
    return subject;
  }
  public void setSubject(String subject) {
    this.subject = subject;
  }
  public SpecificationForGeneratingNewJWT audiences(List<String> audiences) {
    this.audiences = audiences;
    return this;
  }

  public SpecificationForGeneratingNewJWT addAudiencesItem(String audiencesItem) {
    this.audiences.add(audiencesItem);
    return this;
  }

  /**
  * Appropriate audience for the JWT
  * @return audiences
  **/
  @Schema(required = true, description = "Appropriate audience for the JWT")
  public List<String> getAudiences() {
    return audiences;
  }
  public void setAudiences(List<String> audiences) {
    this.audiences = audiences;
  }
  public SpecificationForGeneratingNewJWT keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  

  /**
  * Name of the signing key
  * @return keyName
  **/
  @Schema(required = true, description = "Name of the signing key")
  public String getKeyName() {
    return keyName;
  }
  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }
  public SpecificationForGeneratingNewJWT expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  

  /**
  * Expiration date of the token
  * @return expiresAt
  **/
  @Schema(description = "Expiration date of the token")
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }
  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }
  public SpecificationForGeneratingNewJWT nbf(OffsetDateTime nbf) {
    this.nbf = nbf;
    return this;
  }

  

  /**
  * Not-valid-before date
  * @return nbf
  **/
  @Schema(description = "Not-valid-before date")
  public OffsetDateTime getNbf() {
    return nbf;
  }
  public void setNbf(OffsetDateTime nbf) {
    this.nbf = nbf;
  }
  public SpecificationForGeneratingNewJWT renewable(Boolean renewable) {
    this.renewable = renewable;
    return this;
  }

  

  /**
  * Flag to indicate if the token is auto-renewable
  * @return renewable
  **/
  @Schema(required = true, description = "Flag to indicate if the token is auto-renewable")
  public Boolean isRenewable() {
    return renewable;
  }
  public void setRenewable(Boolean renewable) {
    this.renewable = renewable;
  }
  public SpecificationForGeneratingNewJWT expLeeway(Integer expLeeway) {
    this.expLeeway = expLeeway;
    return this;
  }

  

  /**
  * Number of seconds after the expiration the token is still valid
  * @return expLeeway
  **/
  @Schema(required = true, description = "Number of seconds after the expiration the token is still valid")
  public Integer getExpLeeway() {
    return expLeeway;
  }
  public void setExpLeeway(Integer expLeeway) {
    this.expLeeway = expLeeway;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecificationForGeneratingNewJWT specificationForGeneratingNewJWT = (SpecificationForGeneratingNewJWT) o;
    return Objects.equals(this.subject, specificationForGeneratingNewJWT.subject) &&
        Objects.equals(this.audiences, specificationForGeneratingNewJWT.audiences) &&
        Objects.equals(this.keyName, specificationForGeneratingNewJWT.keyName) &&
        Objects.equals(this.expiresAt, specificationForGeneratingNewJWT.expiresAt) &&
        Objects.equals(this.nbf, specificationForGeneratingNewJWT.nbf) &&
        Objects.equals(this.renewable, specificationForGeneratingNewJWT.renewable) &&
        Objects.equals(this.expLeeway, specificationForGeneratingNewJWT.expLeeway);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(subject, audiences, keyName, expiresAt, nbf, renewable, expLeeway);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecificationForGeneratingNewJWT {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    audiences: ").append(toIndentedString(audiences)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("    renewable: ").append(toIndentedString(renewable)).append("\n");
    sb.append("    expLeeway: ").append(toIndentedString(expLeeway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
