/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CondaCommandsForKagentToExecuteOrReport;
import io.swagger.client.model.StatusReportForRunningServicesOnHost;
import io.swagger.client.model.SystemCommandsForKagentToExecuteOrReport;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * KagentCommunicationProtocol
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class KagentCommunicationProtocol {

  @SerializedName("hostId")
  private String hostId = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("hadoopHome")
  private String hadoopHome = null;

  @SerializedName("agentTime")
  private Long agentTime = null;

  @SerializedName("memoryCapacity")
  private Long memoryCapacity = null;

  @SerializedName("cores")
  private Integer cores = null;

  @SerializedName("privateIp")
  private String privateIp = null;

  @SerializedName("services")
  private StatusReportForRunningServicesOnHost services = null;

  @SerializedName("systemCommands")
  private List<SystemCommandsForKagentToExecuteOrReport> systemCommands = null;

  @SerializedName("condaCommands")
  private List<CondaCommandsForKagentToExecuteOrReport> condaCommands = null;

  @SerializedName("condaReport")
  private List<String> condaReport = null;
  public KagentCommunicationProtocol hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

  

  /**
  * ID of the host kagent is running
  * @return hostId
  **/
  @Schema(required = true, description = "ID of the host kagent is running")
  public String getHostId() {
    return hostId;
  }
  public void setHostId(String hostId) {
    this.hostId = hostId;
  }
  public KagentCommunicationProtocol password(String password) {
    this.password = password;
    return this;
  }

  

  /**
  * Password of kagent&#x27;s REST API
  * @return password
  **/
  @Schema(description = "Password of kagent's REST API")
  public String getPassword() {
    return password;
  }
  public void setPassword(String password) {
    this.password = password;
  }
  public KagentCommunicationProtocol hadoopHome(String hadoopHome) {
    this.hadoopHome = hadoopHome;
    return this;
  }

  

  /**
  * Path to Hadoop home returned to agent after successful registration
  * @return hadoopHome
  **/
  @Schema(description = "Path to Hadoop home returned to agent after successful registration")
  public String getHadoopHome() {
    return hadoopHome;
  }
  public void setHadoopHome(String hadoopHome) {
    this.hadoopHome = hadoopHome;
  }
  public KagentCommunicationProtocol agentTime(Long agentTime) {
    this.agentTime = agentTime;
    return this;
  }

  

  /**
  * Heartbeat timestamp
  * @return agentTime
  **/
  @Schema(required = true, description = "Heartbeat timestamp")
  public Long getAgentTime() {
    return agentTime;
  }
  public void setAgentTime(Long agentTime) {
    this.agentTime = agentTime;
  }
  public KagentCommunicationProtocol memoryCapacity(Long memoryCapacity) {
    this.memoryCapacity = memoryCapacity;
    return this;
  }

  

  /**
  * Total memory capacity of host
  * @return memoryCapacity
  **/
  @Schema(required = true, description = "Total memory capacity of host")
  public Long getMemoryCapacity() {
    return memoryCapacity;
  }
  public void setMemoryCapacity(Long memoryCapacity) {
    this.memoryCapacity = memoryCapacity;
  }
  public KagentCommunicationProtocol cores(Integer cores) {
    this.cores = cores;
    return this;
  }

  

  /**
  * Number of available cores in host
  * @return cores
  **/
  @Schema(required = true, description = "Number of available cores in host")
  public Integer getCores() {
    return cores;
  }
  public void setCores(Integer cores) {
    this.cores = cores;
  }
  public KagentCommunicationProtocol privateIp(String privateIp) {
    this.privateIp = privateIp;
    return this;
  }

  

  /**
  * Private IP of host
  * @return privateIp
  **/
  @Schema(required = true, description = "Private IP of host")
  public String getPrivateIp() {
    return privateIp;
  }
  public void setPrivateIp(String privateIp) {
    this.privateIp = privateIp;
  }
  public KagentCommunicationProtocol services(StatusReportForRunningServicesOnHost services) {
    this.services = services;
    return this;
  }

  

  /**
  * Get services
  * @return services
  **/
  @Schema(description = "")
  public StatusReportForRunningServicesOnHost getServices() {
    return services;
  }
  public void setServices(StatusReportForRunningServicesOnHost services) {
    this.services = services;
  }
  public KagentCommunicationProtocol systemCommands(List<SystemCommandsForKagentToExecuteOrReport> systemCommands) {
    this.systemCommands = systemCommands;
    return this;
  }

  public KagentCommunicationProtocol addSystemCommandsItem(SystemCommandsForKagentToExecuteOrReport systemCommandsItem) {
    if (this.systemCommands == null) {
      this.systemCommands = new ArrayList<SystemCommandsForKagentToExecuteOrReport>();
    }
    this.systemCommands.add(systemCommandsItem);
    return this;
  }

  /**
  * Status report of running system commands
  * @return systemCommands
  **/
  @Schema(description = "Status report of running system commands")
  public List<SystemCommandsForKagentToExecuteOrReport> getSystemCommands() {
    return systemCommands;
  }
  public void setSystemCommands(List<SystemCommandsForKagentToExecuteOrReport> systemCommands) {
    this.systemCommands = systemCommands;
  }
  public KagentCommunicationProtocol condaCommands(List<CondaCommandsForKagentToExecuteOrReport> condaCommands) {
    this.condaCommands = condaCommands;
    return this;
  }

  public KagentCommunicationProtocol addCondaCommandsItem(CondaCommandsForKagentToExecuteOrReport condaCommandsItem) {
    if (this.condaCommands == null) {
      this.condaCommands = new ArrayList<CondaCommandsForKagentToExecuteOrReport>();
    }
    this.condaCommands.add(condaCommandsItem);
    return this;
  }

  /**
  * Status report of running conda commands
  * @return condaCommands
  **/
  @Schema(description = "Status report of running conda commands")
  public List<CondaCommandsForKagentToExecuteOrReport> getCondaCommands() {
    return condaCommands;
  }
  public void setCondaCommands(List<CondaCommandsForKagentToExecuteOrReport> condaCommands) {
    this.condaCommands = condaCommands;
  }
  public KagentCommunicationProtocol condaReport(List<String> condaReport) {
    this.condaReport = condaReport;
    return this;
  }

  public KagentCommunicationProtocol addCondaReportItem(String condaReportItem) {
    if (this.condaReport == null) {
      this.condaReport = new ArrayList<String>();
    }
    this.condaReport.add(condaReportItem);
    return this;
  }

  /**
  * List of Anaconda environments to check for garbage collection
  * @return condaReport
  **/
  @Schema(description = "List of Anaconda environments to check for garbage collection")
  public List<String> getCondaReport() {
    return condaReport;
  }
  public void setCondaReport(List<String> condaReport) {
    this.condaReport = condaReport;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KagentCommunicationProtocol kagentCommunicationProtocol = (KagentCommunicationProtocol) o;
    return Objects.equals(this.hostId, kagentCommunicationProtocol.hostId) &&
        Objects.equals(this.password, kagentCommunicationProtocol.password) &&
        Objects.equals(this.hadoopHome, kagentCommunicationProtocol.hadoopHome) &&
        Objects.equals(this.agentTime, kagentCommunicationProtocol.agentTime) &&
        Objects.equals(this.memoryCapacity, kagentCommunicationProtocol.memoryCapacity) &&
        Objects.equals(this.cores, kagentCommunicationProtocol.cores) &&
        Objects.equals(this.privateIp, kagentCommunicationProtocol.privateIp) &&
        Objects.equals(this.services, kagentCommunicationProtocol.services) &&
        Objects.equals(this.systemCommands, kagentCommunicationProtocol.systemCommands) &&
        Objects.equals(this.condaCommands, kagentCommunicationProtocol.condaCommands) &&
        Objects.equals(this.condaReport, kagentCommunicationProtocol.condaReport);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(hostId, password, hadoopHome, agentTime, memoryCapacity, cores, privateIp, services, systemCommands, condaCommands, condaReport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KagentCommunicationProtocol {\n");
    
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    hadoopHome: ").append(toIndentedString(hadoopHome)).append("\n");
    sb.append("    agentTime: ").append(toIndentedString(agentTime)).append("\n");
    sb.append("    memoryCapacity: ").append(toIndentedString(memoryCapacity)).append("\n");
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    privateIp: ").append(toIndentedString(privateIp)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    systemCommands: ").append(toIndentedString(systemCommands)).append("\n");
    sb.append("    condaCommands: ").append(toIndentedString(condaCommands)).append("\n");
    sb.append("    condaReport: ").append(toIndentedString(condaReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
