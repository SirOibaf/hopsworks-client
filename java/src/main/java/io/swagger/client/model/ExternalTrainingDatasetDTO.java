/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClusterAnalysisDTO;
import io.swagger.client.model.DescriptiveStatsDTO;
import io.swagger.client.model.FeatureCorrelationMatrixDTO;
import io.swagger.client.model.FeatureDTO;
import io.swagger.client.model.FeatureDistributionsDTO;
import io.swagger.client.model.FeaturestoreJobDTO;
import io.swagger.client.model.TrainingDatasetDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ExternalTrainingDatasetDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class ExternalTrainingDatasetDTO extends TrainingDatasetDTO {

  @SerializedName("s3ConnectorId")
  private Integer s3ConnectorId = null;

  @SerializedName("s3ConnectorName")
  private String s3ConnectorName = null;

  @SerializedName("s3ConnectorBucket")
  private String s3ConnectorBucket = null;
  public ExternalTrainingDatasetDTO s3ConnectorId(Integer s3ConnectorId) {
    this.s3ConnectorId = s3ConnectorId;
    return this;
  }

  

  /**
  * Get s3ConnectorId
  * @return s3ConnectorId
  **/
  @Schema(description = "")
  public Integer getS3ConnectorId() {
    return s3ConnectorId;
  }
  public void setS3ConnectorId(Integer s3ConnectorId) {
    this.s3ConnectorId = s3ConnectorId;
  }
  public ExternalTrainingDatasetDTO s3ConnectorName(String s3ConnectorName) {
    this.s3ConnectorName = s3ConnectorName;
    return this;
  }

  

  /**
  * Get s3ConnectorName
  * @return s3ConnectorName
  **/
  @Schema(description = "")
  public String getS3ConnectorName() {
    return s3ConnectorName;
  }
  public void setS3ConnectorName(String s3ConnectorName) {
    this.s3ConnectorName = s3ConnectorName;
  }
  public ExternalTrainingDatasetDTO s3ConnectorBucket(String s3ConnectorBucket) {
    this.s3ConnectorBucket = s3ConnectorBucket;
    return this;
  }

  

  /**
  * Get s3ConnectorBucket
  * @return s3ConnectorBucket
  **/
  @Schema(description = "")
  public String getS3ConnectorBucket() {
    return s3ConnectorBucket;
  }
  public void setS3ConnectorBucket(String s3ConnectorBucket) {
    this.s3ConnectorBucket = s3ConnectorBucket;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTrainingDatasetDTO externalTrainingDatasetDTO = (ExternalTrainingDatasetDTO) o;
    return Objects.equals(this.s3ConnectorId, externalTrainingDatasetDTO.s3ConnectorId) &&
        Objects.equals(this.s3ConnectorName, externalTrainingDatasetDTO.s3ConnectorName) &&
        Objects.equals(this.s3ConnectorBucket, externalTrainingDatasetDTO.s3ConnectorBucket) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(s3ConnectorId, s3ConnectorName, s3ConnectorBucket, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalTrainingDatasetDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    s3ConnectorId: ").append(toIndentedString(s3ConnectorId)).append("\n");
    sb.append("    s3ConnectorName: ").append(toIndentedString(s3ConnectorName)).append("\n");
    sb.append("    s3ConnectorBucket: ").append(toIndentedString(s3ConnectorBucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
