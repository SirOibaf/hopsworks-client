/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * NewCookie
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class NewCookie {

  @SerializedName("name")
  private String name = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("domain")
  private String domain = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("maxAge")
  private Integer maxAge = null;

  @SerializedName("expiry")
  private OffsetDateTime expiry = null;

  @SerializedName("secure")
  private Boolean secure = null;

  @SerializedName("httpOnly")
  private Boolean httpOnly = null;
  public NewCookie name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public NewCookie value(String value) {
    this.value = value;
    return this;
  }

  

  /**
  * Get value
  * @return value
  **/
  @Schema(description = "")
  public String getValue() {
    return value;
  }
  public void setValue(String value) {
    this.value = value;
  }
  public NewCookie version(Integer version) {
    this.version = version;
    return this;
  }

  

  /**
  * Get version
  * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }
  public void setVersion(Integer version) {
    this.version = version;
  }
  public NewCookie path(String path) {
    this.path = path;
    return this;
  }

  

  /**
  * Get path
  * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }
  public void setPath(String path) {
    this.path = path;
  }
  public NewCookie domain(String domain) {
    this.domain = domain;
    return this;
  }

  

  /**
  * Get domain
  * @return domain
  **/
  @Schema(description = "")
  public String getDomain() {
    return domain;
  }
  public void setDomain(String domain) {
    this.domain = domain;
  }
  public NewCookie comment(String comment) {
    this.comment = comment;
    return this;
  }

  

  /**
  * Get comment
  * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }
  public void setComment(String comment) {
    this.comment = comment;
  }
  public NewCookie maxAge(Integer maxAge) {
    this.maxAge = maxAge;
    return this;
  }

  

  /**
  * Get maxAge
  * @return maxAge
  **/
  @Schema(description = "")
  public Integer getMaxAge() {
    return maxAge;
  }
  public void setMaxAge(Integer maxAge) {
    this.maxAge = maxAge;
  }
  public NewCookie expiry(OffsetDateTime expiry) {
    this.expiry = expiry;
    return this;
  }

  

  /**
  * Get expiry
  * @return expiry
  **/
  @Schema(description = "")
  public OffsetDateTime getExpiry() {
    return expiry;
  }
  public void setExpiry(OffsetDateTime expiry) {
    this.expiry = expiry;
  }
  public NewCookie secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  

  /**
  * Get secure
  * @return secure
  **/
  @Schema(description = "")
  public Boolean isSecure() {
    return secure;
  }
  public void setSecure(Boolean secure) {
    this.secure = secure;
  }
  public NewCookie httpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
    return this;
  }

  

  /**
  * Get httpOnly
  * @return httpOnly
  **/
  @Schema(description = "")
  public Boolean isHttpOnly() {
    return httpOnly;
  }
  public void setHttpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewCookie newCookie = (NewCookie) o;
    return Objects.equals(this.name, newCookie.name) &&
        Objects.equals(this.value, newCookie.value) &&
        Objects.equals(this.version, newCookie.version) &&
        Objects.equals(this.path, newCookie.path) &&
        Objects.equals(this.domain, newCookie.domain) &&
        Objects.equals(this.comment, newCookie.comment) &&
        Objects.equals(this.maxAge, newCookie.maxAge) &&
        Objects.equals(this.expiry, newCookie.expiry) &&
        Objects.equals(this.secure, newCookie.secure) &&
        Objects.equals(this.httpOnly, newCookie.httpOnly);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, value, version, path, domain, comment, maxAge, expiry, secure, httpOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewCookie {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    httpOnly: ").append(toIndentedString(httpOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
