/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * InodeView
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class InodeView {

  @SerializedName("name")
  private String name = null;

  @SerializedName("dir")
  private Boolean dir = null;

  @SerializedName("parent")
  private Boolean parent = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("shared")
  private Boolean shared = null;

  @SerializedName("owningProjectName")
  private String owningProjectName = null;

  @SerializedName("modification")
  private OffsetDateTime modification = null;

  @SerializedName("accessTime")
  private OffsetDateTime accessTime = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("parentId")
  private Long parentId = null;

  @SerializedName("template")
  private Integer template = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("status")
  private Boolean status = null;

  @SerializedName("underConstruction")
  private Boolean underConstruction = null;

  @SerializedName("owner")
  private String owner = null;

  @SerializedName("permission")
  private String permission = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("publicDs")
  private Integer publicDs = null;

  @SerializedName("sharedWith")
  private Integer sharedWith = null;

  @SerializedName("searchable")
  private Boolean searchable = null;

  @SerializedName("zipState")
  private String zipState = null;

  @SerializedName("publicId")
  private String publicId = null;
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATASET("DATASET"),
    HIVEDB("HIVEDB"),
    FEATURESTORE("FEATURESTORE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("publicDataset")
  private Boolean publicDataset = null;
  public InodeView name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public InodeView dir(Boolean dir) {
    this.dir = dir;
    return this;
  }

  

  /**
  * Get dir
  * @return dir
  **/
  @Schema(description = "")
  public Boolean isDir() {
    return dir;
  }
  public void setDir(Boolean dir) {
    this.dir = dir;
  }
  public InodeView parent(Boolean parent) {
    this.parent = parent;
    return this;
  }

  

  /**
  * Get parent
  * @return parent
  **/
  @Schema(description = "")
  public Boolean isParent() {
    return parent;
  }
  public void setParent(Boolean parent) {
    this.parent = parent;
  }
  public InodeView path(String path) {
    this.path = path;
    return this;
  }

  

  /**
  * Get path
  * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }
  public void setPath(String path) {
    this.path = path;
  }
  public InodeView size(Long size) {
    this.size = size;
    return this;
  }

  

  /**
  * Get size
  * @return size
  **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }
  public void setSize(Long size) {
    this.size = size;
  }
  public InodeView shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  

  /**
  * Get shared
  * @return shared
  **/
  @Schema(description = "")
  public Boolean isShared() {
    return shared;
  }
  public void setShared(Boolean shared) {
    this.shared = shared;
  }
  public InodeView owningProjectName(String owningProjectName) {
    this.owningProjectName = owningProjectName;
    return this;
  }

  

  /**
  * Get owningProjectName
  * @return owningProjectName
  **/
  @Schema(description = "")
  public String getOwningProjectName() {
    return owningProjectName;
  }
  public void setOwningProjectName(String owningProjectName) {
    this.owningProjectName = owningProjectName;
  }
  public InodeView modification(OffsetDateTime modification) {
    this.modification = modification;
    return this;
  }

  

  /**
  * Get modification
  * @return modification
  **/
  @Schema(description = "")
  public OffsetDateTime getModification() {
    return modification;
  }
  public void setModification(OffsetDateTime modification) {
    this.modification = modification;
  }
  public InodeView accessTime(OffsetDateTime accessTime) {
    this.accessTime = accessTime;
    return this;
  }

  

  /**
  * Get accessTime
  * @return accessTime
  **/
  @Schema(description = "")
  public OffsetDateTime getAccessTime() {
    return accessTime;
  }
  public void setAccessTime(OffsetDateTime accessTime) {
    this.accessTime = accessTime;
  }
  public InodeView id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public InodeView parentId(Long parentId) {
    this.parentId = parentId;
    return this;
  }

  

  /**
  * Get parentId
  * @return parentId
  **/
  @Schema(description = "")
  public Long getParentId() {
    return parentId;
  }
  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }
  public InodeView template(Integer template) {
    this.template = template;
    return this;
  }

  

  /**
  * Get template
  * @return template
  **/
  @Schema(description = "")
  public Integer getTemplate() {
    return template;
  }
  public void setTemplate(Integer template) {
    this.template = template;
  }
  public InodeView description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public InodeView status(Boolean status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(description = "")
  public Boolean isStatus() {
    return status;
  }
  public void setStatus(Boolean status) {
    this.status = status;
  }
  public InodeView underConstruction(Boolean underConstruction) {
    this.underConstruction = underConstruction;
    return this;
  }

  

  /**
  * Get underConstruction
  * @return underConstruction
  **/
  @Schema(description = "")
  public Boolean isUnderConstruction() {
    return underConstruction;
  }
  public void setUnderConstruction(Boolean underConstruction) {
    this.underConstruction = underConstruction;
  }
  public InodeView owner(String owner) {
    this.owner = owner;
    return this;
  }

  

  /**
  * Get owner
  * @return owner
  **/
  @Schema(description = "")
  public String getOwner() {
    return owner;
  }
  public void setOwner(String owner) {
    this.owner = owner;
  }
  public InodeView permission(String permission) {
    this.permission = permission;
    return this;
  }

  

  /**
  * Get permission
  * @return permission
  **/
  @Schema(description = "")
  public String getPermission() {
    return permission;
  }
  public void setPermission(String permission) {
    this.permission = permission;
  }
  public InodeView email(String email) {
    this.email = email;
    return this;
  }

  

  /**
  * Get email
  * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }
  public void setEmail(String email) {
    this.email = email;
  }
  public InodeView publicDs(Integer publicDs) {
    this.publicDs = publicDs;
    return this;
  }

  

  /**
  * Get publicDs
  * @return publicDs
  **/
  @Schema(description = "")
  public Integer getPublicDs() {
    return publicDs;
  }
  public void setPublicDs(Integer publicDs) {
    this.publicDs = publicDs;
  }
  public InodeView sharedWith(Integer sharedWith) {
    this.sharedWith = sharedWith;
    return this;
  }

  

  /**
  * Get sharedWith
  * @return sharedWith
  **/
  @Schema(description = "")
  public Integer getSharedWith() {
    return sharedWith;
  }
  public void setSharedWith(Integer sharedWith) {
    this.sharedWith = sharedWith;
  }
  public InodeView searchable(Boolean searchable) {
    this.searchable = searchable;
    return this;
  }

  

  /**
  * Get searchable
  * @return searchable
  **/
  @Schema(description = "")
  public Boolean isSearchable() {
    return searchable;
  }
  public void setSearchable(Boolean searchable) {
    this.searchable = searchable;
  }
  public InodeView zipState(String zipState) {
    this.zipState = zipState;
    return this;
  }

  

  /**
  * Get zipState
  * @return zipState
  **/
  @Schema(description = "")
  public String getZipState() {
    return zipState;
  }
  public void setZipState(String zipState) {
    this.zipState = zipState;
  }
  public InodeView publicId(String publicId) {
    this.publicId = publicId;
    return this;
  }

  

  /**
  * Get publicId
  * @return publicId
  **/
  @Schema(description = "")
  public String getPublicId() {
    return publicId;
  }
  public void setPublicId(String publicId) {
    this.publicId = publicId;
  }
  public InodeView type(TypeEnum type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  public InodeView publicDataset(Boolean publicDataset) {
    this.publicDataset = publicDataset;
    return this;
  }

  

  /**
  * Get publicDataset
  * @return publicDataset
  **/
  @Schema(description = "")
  public Boolean isPublicDataset() {
    return publicDataset;
  }
  public void setPublicDataset(Boolean publicDataset) {
    this.publicDataset = publicDataset;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InodeView inodeView = (InodeView) o;
    return Objects.equals(this.name, inodeView.name) &&
        Objects.equals(this.dir, inodeView.dir) &&
        Objects.equals(this.parent, inodeView.parent) &&
        Objects.equals(this.path, inodeView.path) &&
        Objects.equals(this.size, inodeView.size) &&
        Objects.equals(this.shared, inodeView.shared) &&
        Objects.equals(this.owningProjectName, inodeView.owningProjectName) &&
        Objects.equals(this.modification, inodeView.modification) &&
        Objects.equals(this.accessTime, inodeView.accessTime) &&
        Objects.equals(this.id, inodeView.id) &&
        Objects.equals(this.parentId, inodeView.parentId) &&
        Objects.equals(this.template, inodeView.template) &&
        Objects.equals(this.description, inodeView.description) &&
        Objects.equals(this.status, inodeView.status) &&
        Objects.equals(this.underConstruction, inodeView.underConstruction) &&
        Objects.equals(this.owner, inodeView.owner) &&
        Objects.equals(this.permission, inodeView.permission) &&
        Objects.equals(this.email, inodeView.email) &&
        Objects.equals(this.publicDs, inodeView.publicDs) &&
        Objects.equals(this.sharedWith, inodeView.sharedWith) &&
        Objects.equals(this.searchable, inodeView.searchable) &&
        Objects.equals(this.zipState, inodeView.zipState) &&
        Objects.equals(this.publicId, inodeView.publicId) &&
        Objects.equals(this.type, inodeView.type) &&
        Objects.equals(this.publicDataset, inodeView.publicDataset);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, dir, parent, path, size, shared, owningProjectName, modification, accessTime, id, parentId, template, description, status, underConstruction, owner, permission, email, publicDs, sharedWith, searchable, zipState, publicId, type, publicDataset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InodeView {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    owningProjectName: ").append(toIndentedString(owningProjectName)).append("\n");
    sb.append("    modification: ").append(toIndentedString(modification)).append("\n");
    sb.append("    accessTime: ").append(toIndentedString(accessTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    underConstruction: ").append(toIndentedString(underConstruction)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    publicDs: ").append(toIndentedString(publicDs)).append("\n");
    sb.append("    sharedWith: ").append(toIndentedString(sharedWith)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    zipState: ").append(toIndentedString(zipState)).append("\n");
    sb.append("    publicId: ").append(toIndentedString(publicId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    publicDataset: ").append(toIndentedString(publicDataset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
