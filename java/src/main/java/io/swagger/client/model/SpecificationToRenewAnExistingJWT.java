/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * SpecificationToRenewAnExistingJWT
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class SpecificationToRenewAnExistingJWT {

  @SerializedName("token")
  private String token = null;

  @SerializedName("expiresAt")
  private OffsetDateTime expiresAt = null;

  @SerializedName("nbf")
  private OffsetDateTime nbf = null;
  public SpecificationToRenewAnExistingJWT token(String token) {
    this.token = token;
    return this;
  }

  

  /**
  * Token to renew
  * @return token
  **/
  @Schema(required = true, description = "Token to renew")
  public String getToken() {
    return token;
  }
  public void setToken(String token) {
    this.token = token;
  }
  public SpecificationToRenewAnExistingJWT expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  

  /**
  * Expiration date for the new JWT
  * @return expiresAt
  **/
  @Schema(description = "Expiration date for the new JWT")
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }
  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }
  public SpecificationToRenewAnExistingJWT nbf(OffsetDateTime nbf) {
    this.nbf = nbf;
    return this;
  }

  

  /**
  * Not-valid-before date for the new JWT
  * @return nbf
  **/
  @Schema(description = "Not-valid-before date for the new JWT")
  public OffsetDateTime getNbf() {
    return nbf;
  }
  public void setNbf(OffsetDateTime nbf) {
    this.nbf = nbf;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecificationToRenewAnExistingJWT specificationToRenewAnExistingJWT = (SpecificationToRenewAnExistingJWT) o;
    return Objects.equals(this.token, specificationToRenewAnExistingJWT.token) &&
        Objects.equals(this.expiresAt, specificationToRenewAnExistingJWT.expiresAt) &&
        Objects.equals(this.nbf, specificationToRenewAnExistingJWT.nbf);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(token, expiresAt, nbf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecificationToRenewAnExistingJWT {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
