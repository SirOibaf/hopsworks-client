/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * GitConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class GitConfig {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("remoteGitURL")
  private String remoteGitURL = null;

  @SerializedName("apiKeyName")
  private String apiKeyName = null;

  @SerializedName("baseBranch")
  private String baseBranch = null;

  @SerializedName("headBranch")
  private String headBranch = null;

  @SerializedName("startupAutoPull")
  private Boolean startupAutoPull = null;

  @SerializedName("shutdownAutoPush")
  private Boolean shutdownAutoPush = null;

  @SerializedName("branches")
  private List<String> branches = null;
  public GitConfig id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public GitConfig remoteGitURL(String remoteGitURL) {
    this.remoteGitURL = remoteGitURL;
    return this;
  }

  

  /**
  * Get remoteGitURL
  * @return remoteGitURL
  **/
  @Schema(description = "")
  public String getRemoteGitURL() {
    return remoteGitURL;
  }
  public void setRemoteGitURL(String remoteGitURL) {
    this.remoteGitURL = remoteGitURL;
  }
  public GitConfig apiKeyName(String apiKeyName) {
    this.apiKeyName = apiKeyName;
    return this;
  }

  

  /**
  * Get apiKeyName
  * @return apiKeyName
  **/
  @Schema(description = "")
  public String getApiKeyName() {
    return apiKeyName;
  }
  public void setApiKeyName(String apiKeyName) {
    this.apiKeyName = apiKeyName;
  }
  public GitConfig baseBranch(String baseBranch) {
    this.baseBranch = baseBranch;
    return this;
  }

  

  /**
  * Get baseBranch
  * @return baseBranch
  **/
  @Schema(description = "")
  public String getBaseBranch() {
    return baseBranch;
  }
  public void setBaseBranch(String baseBranch) {
    this.baseBranch = baseBranch;
  }
  public GitConfig headBranch(String headBranch) {
    this.headBranch = headBranch;
    return this;
  }

  

  /**
  * Get headBranch
  * @return headBranch
  **/
  @Schema(description = "")
  public String getHeadBranch() {
    return headBranch;
  }
  public void setHeadBranch(String headBranch) {
    this.headBranch = headBranch;
  }
  public GitConfig startupAutoPull(Boolean startupAutoPull) {
    this.startupAutoPull = startupAutoPull;
    return this;
  }

  

  /**
  * Get startupAutoPull
  * @return startupAutoPull
  **/
  @Schema(description = "")
  public Boolean isStartupAutoPull() {
    return startupAutoPull;
  }
  public void setStartupAutoPull(Boolean startupAutoPull) {
    this.startupAutoPull = startupAutoPull;
  }
  public GitConfig shutdownAutoPush(Boolean shutdownAutoPush) {
    this.shutdownAutoPush = shutdownAutoPush;
    return this;
  }

  

  /**
  * Get shutdownAutoPush
  * @return shutdownAutoPush
  **/
  @Schema(description = "")
  public Boolean isShutdownAutoPush() {
    return shutdownAutoPush;
  }
  public void setShutdownAutoPush(Boolean shutdownAutoPush) {
    this.shutdownAutoPush = shutdownAutoPush;
  }
  public GitConfig branches(List<String> branches) {
    this.branches = branches;
    return this;
  }

  public GitConfig addBranchesItem(String branchesItem) {
    if (this.branches == null) {
      this.branches = new ArrayList<String>();
    }
    this.branches.add(branchesItem);
    return this;
  }

  /**
  * Get branches
  * @return branches
  **/
  @Schema(description = "")
  public List<String> getBranches() {
    return branches;
  }
  public void setBranches(List<String> branches) {
    this.branches = branches;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitConfig gitConfig = (GitConfig) o;
    return Objects.equals(this.id, gitConfig.id) &&
        Objects.equals(this.remoteGitURL, gitConfig.remoteGitURL) &&
        Objects.equals(this.apiKeyName, gitConfig.apiKeyName) &&
        Objects.equals(this.baseBranch, gitConfig.baseBranch) &&
        Objects.equals(this.headBranch, gitConfig.headBranch) &&
        Objects.equals(this.startupAutoPull, gitConfig.startupAutoPull) &&
        Objects.equals(this.shutdownAutoPush, gitConfig.shutdownAutoPush) &&
        Objects.equals(this.branches, gitConfig.branches);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, remoteGitURL, apiKeyName, baseBranch, headBranch, startupAutoPull, shutdownAutoPush, branches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitConfig {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    remoteGitURL: ").append(toIndentedString(remoteGitURL)).append("\n");
    sb.append("    apiKeyName: ").append(toIndentedString(apiKeyName)).append("\n");
    sb.append("    baseBranch: ").append(toIndentedString(baseBranch)).append("\n");
    sb.append("    headBranch: ").append(toIndentedString(headBranch)).append("\n");
    sb.append("    startupAutoPull: ").append(toIndentedString(startupAutoPull)).append("\n");
    sb.append("    shutdownAutoPush: ").append(toIndentedString(shutdownAutoPush)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
