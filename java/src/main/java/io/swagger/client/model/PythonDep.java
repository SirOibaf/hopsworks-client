/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AnacondaRepo;
import io.swagger.client.model.Project;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PythonDep
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class PythonDep {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("dependency")
  private String dependency = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("preinstalled")
  private Boolean preinstalled = null;

  @SerializedName("projectCollection")
  private List<Project> projectCollection = null;

  @SerializedName("repoUrl")
  private AnacondaRepo repoUrl = null;
  /**
   * Gets or Sets installType
   */
  @JsonAdapter(InstallTypeEnum.Adapter.class)
  public enum InstallTypeEnum {
    ENVIRONMENT("ENVIRONMENT"),
    CONDA("CONDA"),
    PIP("PIP");

    private String value;

    InstallTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InstallTypeEnum fromValue(String text) {
      for (InstallTypeEnum b : InstallTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InstallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstallTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("installType")
  private InstallTypeEnum installType = null;
  /**
   * Gets or Sets machineType
   */
  @JsonAdapter(MachineTypeEnum.Adapter.class)
  public enum MachineTypeEnum {
    ALL("ALL"),
    CPU("CPU"),
    GPU("GPU");

    private String value;

    MachineTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MachineTypeEnum fromValue(String text) {
      for (MachineTypeEnum b : MachineTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MachineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MachineTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("machineType")
  private MachineTypeEnum machineType = null;
  public PythonDep id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public PythonDep dependency(String dependency) {
    this.dependency = dependency;
    return this;
  }

  

  /**
  * Get dependency
  * @return dependency
  **/
  @Schema(required = true, description = "")
  public String getDependency() {
    return dependency;
  }
  public void setDependency(String dependency) {
    this.dependency = dependency;
  }
  public PythonDep version(String version) {
    this.version = version;
    return this;
  }

  

  /**
  * Get version
  * @return version
  **/
  @Schema(required = true, description = "")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }
  public PythonDep preinstalled(Boolean preinstalled) {
    this.preinstalled = preinstalled;
    return this;
  }

  

  /**
  * Get preinstalled
  * @return preinstalled
  **/
  @Schema(description = "")
  public Boolean isPreinstalled() {
    return preinstalled;
  }
  public void setPreinstalled(Boolean preinstalled) {
    this.preinstalled = preinstalled;
  }
  public PythonDep projectCollection(List<Project> projectCollection) {
    this.projectCollection = projectCollection;
    return this;
  }

  public PythonDep addProjectCollectionItem(Project projectCollectionItem) {
    if (this.projectCollection == null) {
      this.projectCollection = new ArrayList<Project>();
    }
    this.projectCollection.add(projectCollectionItem);
    return this;
  }

  /**
  * Get projectCollection
  * @return projectCollection
  **/
  @Schema(description = "")
  public List<Project> getProjectCollection() {
    return projectCollection;
  }
  public void setProjectCollection(List<Project> projectCollection) {
    this.projectCollection = projectCollection;
  }
  public PythonDep repoUrl(AnacondaRepo repoUrl) {
    this.repoUrl = repoUrl;
    return this;
  }

  

  /**
  * Get repoUrl
  * @return repoUrl
  **/
  @Schema(description = "")
  public AnacondaRepo getRepoUrl() {
    return repoUrl;
  }
  public void setRepoUrl(AnacondaRepo repoUrl) {
    this.repoUrl = repoUrl;
  }
  public PythonDep installType(InstallTypeEnum installType) {
    this.installType = installType;
    return this;
  }

  

  /**
  * Get installType
  * @return installType
  **/
  @Schema(description = "")
  public InstallTypeEnum getInstallType() {
    return installType;
  }
  public void setInstallType(InstallTypeEnum installType) {
    this.installType = installType;
  }
  public PythonDep machineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
    return this;
  }

  

  /**
  * Get machineType
  * @return machineType
  **/
  @Schema(description = "")
  public MachineTypeEnum getMachineType() {
    return machineType;
  }
  public void setMachineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PythonDep pythonDep = (PythonDep) o;
    return Objects.equals(this.id, pythonDep.id) &&
        Objects.equals(this.dependency, pythonDep.dependency) &&
        Objects.equals(this.version, pythonDep.version) &&
        Objects.equals(this.preinstalled, pythonDep.preinstalled) &&
        Objects.equals(this.projectCollection, pythonDep.projectCollection) &&
        Objects.equals(this.repoUrl, pythonDep.repoUrl) &&
        Objects.equals(this.installType, pythonDep.installType) &&
        Objects.equals(this.machineType, pythonDep.machineType);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, dependency, version, preinstalled, projectCollection, repoUrl, installType, machineType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PythonDep {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    preinstalled: ").append(toIndentedString(preinstalled)).append("\n");
    sb.append("    projectCollection: ").append(toIndentedString(projectCollection)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("    installType: ").append(toIndentedString(installType)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
