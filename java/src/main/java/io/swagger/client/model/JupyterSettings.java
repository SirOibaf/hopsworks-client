/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GitConfig;
import io.swagger.client.model.JobConfiguration;
import io.swagger.client.model.JupyterSettingsPK;
import io.swagger.client.model.Project;
import io.swagger.client.model.Users;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * JupyterSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class JupyterSettings {

  @SerializedName("jupyterSettingsPK")
  private JupyterSettingsPK jupyterSettingsPK = null;

  @SerializedName("secret")
  private String secret = null;

  @SerializedName("shutdownLevel")
  private Integer shutdownLevel = null;

  @SerializedName("advanced")
  private Boolean advanced = null;

  @SerializedName("pythonKernel")
  private Boolean pythonKernel = null;

  @SerializedName("users")
  private Users users = null;

  @SerializedName("project")
  private Project project = null;

  @SerializedName("baseDir")
  private String baseDir = null;

  @SerializedName("jobConfig")
  private JobConfiguration jobConfig = null;

  @SerializedName("privateDir")
  private String privateDir = null;

  @SerializedName("gitAvailable")
  private Boolean gitAvailable = null;

  @SerializedName("gitBackend")
  private Boolean gitBackend = null;

  @SerializedName("gitConfig")
  private GitConfig gitConfig = null;
  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    LAB("JUPYTER_LAB"),
    CLASSIC("JUPYTER_CLASSIC");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("mode")
  private ModeEnum mode = null;
  public JupyterSettings jupyterSettingsPK(JupyterSettingsPK jupyterSettingsPK) {
    this.jupyterSettingsPK = jupyterSettingsPK;
    return this;
  }

  

  /**
  * Get jupyterSettingsPK
  * @return jupyterSettingsPK
  **/
  @Schema(description = "")
  public JupyterSettingsPK getJupyterSettingsPK() {
    return jupyterSettingsPK;
  }
  public void setJupyterSettingsPK(JupyterSettingsPK jupyterSettingsPK) {
    this.jupyterSettingsPK = jupyterSettingsPK;
  }
  public JupyterSettings secret(String secret) {
    this.secret = secret;
    return this;
  }

  

  /**
  * Get secret
  * @return secret
  **/
  @Schema(required = true, description = "")
  public String getSecret() {
    return secret;
  }
  public void setSecret(String secret) {
    this.secret = secret;
  }
  public JupyterSettings shutdownLevel(Integer shutdownLevel) {
    this.shutdownLevel = shutdownLevel;
    return this;
  }

  

  /**
  * Get shutdownLevel
  * @return shutdownLevel
  **/
  @Schema(description = "")
  public Integer getShutdownLevel() {
    return shutdownLevel;
  }
  public void setShutdownLevel(Integer shutdownLevel) {
    this.shutdownLevel = shutdownLevel;
  }
  public JupyterSettings advanced(Boolean advanced) {
    this.advanced = advanced;
    return this;
  }

  

  /**
  * Get advanced
  * @return advanced
  **/
  @Schema(description = "")
  public Boolean isAdvanced() {
    return advanced;
  }
  public void setAdvanced(Boolean advanced) {
    this.advanced = advanced;
  }
  public JupyterSettings pythonKernel(Boolean pythonKernel) {
    this.pythonKernel = pythonKernel;
    return this;
  }

  

  /**
  * Get pythonKernel
  * @return pythonKernel
  **/
  @Schema(description = "")
  public Boolean isPythonKernel() {
    return pythonKernel;
  }
  public void setPythonKernel(Boolean pythonKernel) {
    this.pythonKernel = pythonKernel;
  }
  public JupyterSettings users(Users users) {
    this.users = users;
    return this;
  }

  

  /**
  * Get users
  * @return users
  **/
  @Schema(description = "")
  public Users getUsers() {
    return users;
  }
  public void setUsers(Users users) {
    this.users = users;
  }
  public JupyterSettings project(Project project) {
    this.project = project;
    return this;
  }

  

  /**
  * Get project
  * @return project
  **/
  @Schema(description = "")
  public Project getProject() {
    return project;
  }
  public void setProject(Project project) {
    this.project = project;
  }
  public JupyterSettings baseDir(String baseDir) {
    this.baseDir = baseDir;
    return this;
  }

  

  /**
  * Get baseDir
  * @return baseDir
  **/
  @Schema(required = true, description = "")
  public String getBaseDir() {
    return baseDir;
  }
  public void setBaseDir(String baseDir) {
    this.baseDir = baseDir;
  }
  public JupyterSettings jobConfig(JobConfiguration jobConfig) {
    this.jobConfig = jobConfig;
    return this;
  }

  

  /**
  * Get jobConfig
  * @return jobConfig
  **/
  @Schema(description = "")
  public JobConfiguration getJobConfig() {
    return jobConfig;
  }
  public void setJobConfig(JobConfiguration jobConfig) {
    this.jobConfig = jobConfig;
  }
  public JupyterSettings privateDir(String privateDir) {
    this.privateDir = privateDir;
    return this;
  }

  

  /**
  * Get privateDir
  * @return privateDir
  **/
  @Schema(description = "")
  public String getPrivateDir() {
    return privateDir;
  }
  public void setPrivateDir(String privateDir) {
    this.privateDir = privateDir;
  }
  public JupyterSettings gitAvailable(Boolean gitAvailable) {
    this.gitAvailable = gitAvailable;
    return this;
  }

  

  /**
  * Get gitAvailable
  * @return gitAvailable
  **/
  @Schema(description = "")
  public Boolean isGitAvailable() {
    return gitAvailable;
  }
  public void setGitAvailable(Boolean gitAvailable) {
    this.gitAvailable = gitAvailable;
  }
  public JupyterSettings gitBackend(Boolean gitBackend) {
    this.gitBackend = gitBackend;
    return this;
  }

  

  /**
  * Get gitBackend
  * @return gitBackend
  **/
  @Schema(description = "")
  public Boolean isGitBackend() {
    return gitBackend;
  }
  public void setGitBackend(Boolean gitBackend) {
    this.gitBackend = gitBackend;
  }
  public JupyterSettings gitConfig(GitConfig gitConfig) {
    this.gitConfig = gitConfig;
    return this;
  }

  

  /**
  * Get gitConfig
  * @return gitConfig
  **/
  @Schema(description = "")
  public GitConfig getGitConfig() {
    return gitConfig;
  }
  public void setGitConfig(GitConfig gitConfig) {
    this.gitConfig = gitConfig;
  }
  public JupyterSettings mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  

  /**
  * Get mode
  * @return mode
  **/
  @Schema(description = "")
  public ModeEnum getMode() {
    return mode;
  }
  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JupyterSettings jupyterSettings = (JupyterSettings) o;
    return Objects.equals(this.jupyterSettingsPK, jupyterSettings.jupyterSettingsPK) &&
        Objects.equals(this.secret, jupyterSettings.secret) &&
        Objects.equals(this.shutdownLevel, jupyterSettings.shutdownLevel) &&
        Objects.equals(this.advanced, jupyterSettings.advanced) &&
        Objects.equals(this.pythonKernel, jupyterSettings.pythonKernel) &&
        Objects.equals(this.users, jupyterSettings.users) &&
        Objects.equals(this.project, jupyterSettings.project) &&
        Objects.equals(this.baseDir, jupyterSettings.baseDir) &&
        Objects.equals(this.jobConfig, jupyterSettings.jobConfig) &&
        Objects.equals(this.privateDir, jupyterSettings.privateDir) &&
        Objects.equals(this.gitAvailable, jupyterSettings.gitAvailable) &&
        Objects.equals(this.gitBackend, jupyterSettings.gitBackend) &&
        Objects.equals(this.gitConfig, jupyterSettings.gitConfig) &&
        Objects.equals(this.mode, jupyterSettings.mode);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(jupyterSettingsPK, secret, shutdownLevel, advanced, pythonKernel, users, project, baseDir, jobConfig, privateDir, gitAvailable, gitBackend, gitConfig, mode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JupyterSettings {\n");
    
    sb.append("    jupyterSettingsPK: ").append(toIndentedString(jupyterSettingsPK)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    shutdownLevel: ").append(toIndentedString(shutdownLevel)).append("\n");
    sb.append("    advanced: ").append(toIndentedString(advanced)).append("\n");
    sb.append("    pythonKernel: ").append(toIndentedString(pythonKernel)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    baseDir: ").append(toIndentedString(baseDir)).append("\n");
    sb.append("    jobConfig: ").append(toIndentedString(jobConfig)).append("\n");
    sb.append("    privateDir: ").append(toIndentedString(privateDir)).append("\n");
    sb.append("    gitAvailable: ").append(toIndentedString(gitAvailable)).append("\n");
    sb.append("    gitBackend: ").append(toIndentedString(gitBackend)).append("\n");
    sb.append("    gitConfig: ").append(toIndentedString(gitConfig)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
