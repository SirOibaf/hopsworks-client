/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Featurestore;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * FeaturestoreJdbcConnector
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class FeaturestoreJdbcConnector {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("featurestore")
  private Featurestore featurestore = null;

  @SerializedName("connectionString")
  private String connectionString = null;

  @SerializedName("arguments")
  private String arguments = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;
  public FeaturestoreJdbcConnector id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public FeaturestoreJdbcConnector featurestore(Featurestore featurestore) {
    this.featurestore = featurestore;
    return this;
  }

  

  /**
  * Get featurestore
  * @return featurestore
  **/
  @Schema(description = "")
  public Featurestore getFeaturestore() {
    return featurestore;
  }
  public void setFeaturestore(Featurestore featurestore) {
    this.featurestore = featurestore;
  }
  public FeaturestoreJdbcConnector connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  

  /**
  * Get connectionString
  * @return connectionString
  **/
  @Schema(description = "")
  public String getConnectionString() {
    return connectionString;
  }
  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }
  public FeaturestoreJdbcConnector arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

  

  /**
  * Get arguments
  * @return arguments
  **/
  @Schema(description = "")
  public String getArguments() {
    return arguments;
  }
  public void setArguments(String arguments) {
    this.arguments = arguments;
  }
  public FeaturestoreJdbcConnector description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public FeaturestoreJdbcConnector name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeaturestoreJdbcConnector featurestoreJdbcConnector = (FeaturestoreJdbcConnector) o;
    return Objects.equals(this.id, featurestoreJdbcConnector.id) &&
        Objects.equals(this.featurestore, featurestoreJdbcConnector.featurestore) &&
        Objects.equals(this.connectionString, featurestoreJdbcConnector.connectionString) &&
        Objects.equals(this.arguments, featurestoreJdbcConnector.arguments) &&
        Objects.equals(this.description, featurestoreJdbcConnector.description) &&
        Objects.equals(this.name, featurestoreJdbcConnector.name);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, featurestore, connectionString, arguments, description, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeaturestoreJdbcConnector {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    featurestore: ").append(toIndentedString(featurestore)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
