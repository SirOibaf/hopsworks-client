/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * StatusType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class StatusType {

  @SerializedName("reasonPhrase")
  private String reasonPhrase = null;

  @SerializedName("statusCode")
  private Integer statusCode = null;
  /**
   * Gets or Sets family
   */
  @JsonAdapter(FamilyEnum.Adapter.class)
  public enum FamilyEnum {
    INFORMATIONAL("INFORMATIONAL"),
    SUCCESSFUL("SUCCESSFUL"),
    REDIRECTION("REDIRECTION"),
    CLIENT_ERROR("CLIENT_ERROR"),
    SERVER_ERROR("SERVER_ERROR"),
    OTHER("OTHER");

    private String value;

    FamilyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FamilyEnum fromValue(String text) {
      for (FamilyEnum b : FamilyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FamilyEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("family")
  private FamilyEnum family = null;
  public StatusType reasonPhrase(String reasonPhrase) {
    this.reasonPhrase = reasonPhrase;
    return this;
  }

  

  /**
  * Get reasonPhrase
  * @return reasonPhrase
  **/
  @Schema(description = "")
  public String getReasonPhrase() {
    return reasonPhrase;
  }
  public void setReasonPhrase(String reasonPhrase) {
    this.reasonPhrase = reasonPhrase;
  }
  public StatusType statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  

  /**
  * Get statusCode
  * @return statusCode
  **/
  @Schema(description = "")
  public Integer getStatusCode() {
    return statusCode;
  }
  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }
  public StatusType family(FamilyEnum family) {
    this.family = family;
    return this;
  }

  

  /**
  * Get family
  * @return family
  **/
  @Schema(description = "")
  public FamilyEnum getFamily() {
    return family;
  }
  public void setFamily(FamilyEnum family) {
    this.family = family;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusType statusType = (StatusType) o;
    return Objects.equals(this.reasonPhrase, statusType.reasonPhrase) &&
        Objects.equals(this.statusCode, statusType.statusCode) &&
        Objects.equals(this.family, statusType.family);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(reasonPhrase, statusCode, family);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusType {\n");
    
    sb.append("    reasonPhrase: ").append(toIndentedString(reasonPhrase)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
