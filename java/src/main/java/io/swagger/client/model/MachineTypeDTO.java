/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MachineTypeDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MachineTypeDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class MachineTypeDTO {

  @SerializedName("href")
  private String href = null;

  @SerializedName("items")
  private List<MachineTypeDTO> items = null;

  @SerializedName("count")
  private Long count = null;
  /**
   * Gets or Sets machineType
   */
  @JsonAdapter(MachineTypeEnum.Adapter.class)
  public enum MachineTypeEnum {
    ALL("ALL"),
    CPU("CPU"),
    GPU("GPU");

    private String value;

    MachineTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MachineTypeEnum fromValue(String text) {
      for (MachineTypeEnum b : MachineTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MachineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MachineTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("machineType")
  private MachineTypeEnum machineType = null;

  @SerializedName("numMachines")
  private Integer numMachines = null;
  public MachineTypeDTO href(String href) {
    this.href = href;
    return this;
  }

  

  /**
  * Get href
  * @return href
  **/
  @Schema(description = "")
  public String getHref() {
    return href;
  }
  public void setHref(String href) {
    this.href = href;
  }
  public MachineTypeDTO items(List<MachineTypeDTO> items) {
    this.items = items;
    return this;
  }

  public MachineTypeDTO addItemsItem(MachineTypeDTO itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<MachineTypeDTO>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
  * Get items
  * @return items
  **/
  @Schema(description = "")
  public List<MachineTypeDTO> getItems() {
    return items;
  }
  public void setItems(List<MachineTypeDTO> items) {
    this.items = items;
  }
  public MachineTypeDTO count(Long count) {
    this.count = count;
    return this;
  }

  

  /**
  * Get count
  * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }
  public void setCount(Long count) {
    this.count = count;
  }
  public MachineTypeDTO machineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
    return this;
  }

  

  /**
  * Get machineType
  * @return machineType
  **/
  @Schema(description = "")
  public MachineTypeEnum getMachineType() {
    return machineType;
  }
  public void setMachineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
  }
  public MachineTypeDTO numMachines(Integer numMachines) {
    this.numMachines = numMachines;
    return this;
  }

  

  /**
  * Get numMachines
  * @return numMachines
  **/
  @Schema(description = "")
  public Integer getNumMachines() {
    return numMachines;
  }
  public void setNumMachines(Integer numMachines) {
    this.numMachines = numMachines;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineTypeDTO machineTypeDTO = (MachineTypeDTO) o;
    return Objects.equals(this.href, machineTypeDTO.href) &&
        Objects.equals(this.items, machineTypeDTO.items) &&
        Objects.equals(this.count, machineTypeDTO.count) &&
        Objects.equals(this.machineType, machineTypeDTO.machineType) &&
        Objects.equals(this.numMachines, machineTypeDTO.numMachines);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(href, items, count, machineType, numMachines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineTypeDTO {\n");
    
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    numMachines: ").append(toIndentedString(numMachines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
