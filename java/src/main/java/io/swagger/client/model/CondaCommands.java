/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Hosts;
import io.swagger.client.model.Project;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * CondaCommands
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class CondaCommands {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("proj")
  private String proj = null;

  @SerializedName("channelUrl")
  private String channelUrl = null;

  @SerializedName("arg")
  private String arg = null;

  @SerializedName("lib")
  private String lib = null;

  @SerializedName("version")
  private String version = null;
  /**
   * Gets or Sets op
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    CLONE("CLONE"),
    CREATE("CREATE"),
    BACKUP("BACKUP"),
    REMOVE("REMOVE"),
    LIST("LIST"),
    INSTALL("INSTALL"),
    UNINSTALL("UNINSTALL"),
    UPGRADE("UPGRADE"),
    CLEAN("CLEAN"),
    YML("YML");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpEnum fromValue(String text) {
      for (OpEnum b : OpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OpEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("op")
  private OpEnum op = null;
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("NEW"),
    SUCCESS("SUCCESS"),
    ONGOING("ONGOING"),
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;
  /**
   * Gets or Sets installType
   */
  @JsonAdapter(InstallTypeEnum.Adapter.class)
  public enum InstallTypeEnum {
    ENVIRONMENT("ENVIRONMENT"),
    CONDA("CONDA"),
    PIP("PIP");

    private String value;

    InstallTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InstallTypeEnum fromValue(String text) {
      for (InstallTypeEnum b : InstallTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InstallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstallTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("installType")
  private InstallTypeEnum installType = null;
  /**
   * Gets or Sets machineType
   */
  @JsonAdapter(MachineTypeEnum.Adapter.class)
  public enum MachineTypeEnum {
    ALL("ALL"),
    CPU("CPU"),
    GPU("GPU");

    private String value;

    MachineTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MachineTypeEnum fromValue(String text) {
      for (MachineTypeEnum b : MachineTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MachineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MachineTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("machineType")
  private MachineTypeEnum machineType = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("projectId")
  private Project projectId = null;

  @SerializedName("hostId")
  private Hosts hostId = null;

  @SerializedName("environmentYml")
  private String environmentYml = null;

  @SerializedName("installJupyter")
  private Boolean installJupyter = null;
  public CondaCommands id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public CondaCommands user(String user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(required = true, description = "")
  public String getUser() {
    return user;
  }
  public void setUser(String user) {
    this.user = user;
  }
  public CondaCommands proj(String proj) {
    this.proj = proj;
    return this;
  }

  

  /**
  * Get proj
  * @return proj
  **/
  @Schema(required = true, description = "")
  public String getProj() {
    return proj;
  }
  public void setProj(String proj) {
    this.proj = proj;
  }
  public CondaCommands channelUrl(String channelUrl) {
    this.channelUrl = channelUrl;
    return this;
  }

  

  /**
  * Get channelUrl
  * @return channelUrl
  **/
  @Schema(description = "")
  public String getChannelUrl() {
    return channelUrl;
  }
  public void setChannelUrl(String channelUrl) {
    this.channelUrl = channelUrl;
  }
  public CondaCommands arg(String arg) {
    this.arg = arg;
    return this;
  }

  

  /**
  * Get arg
  * @return arg
  **/
  @Schema(description = "")
  public String getArg() {
    return arg;
  }
  public void setArg(String arg) {
    this.arg = arg;
  }
  public CondaCommands lib(String lib) {
    this.lib = lib;
    return this;
  }

  

  /**
  * Get lib
  * @return lib
  **/
  @Schema(description = "")
  public String getLib() {
    return lib;
  }
  public void setLib(String lib) {
    this.lib = lib;
  }
  public CondaCommands version(String version) {
    this.version = version;
    return this;
  }

  

  /**
  * Get version
  * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }
  public CondaCommands op(OpEnum op) {
    this.op = op;
    return this;
  }

  

  /**
  * Get op
  * @return op
  **/
  @Schema(required = true, description = "")
  public OpEnum getOp() {
    return op;
  }
  public void setOp(OpEnum op) {
    this.op = op;
  }
  public CondaCommands status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(required = true, description = "")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public CondaCommands installType(InstallTypeEnum installType) {
    this.installType = installType;
    return this;
  }

  

  /**
  * Get installType
  * @return installType
  **/
  @Schema(required = true, description = "")
  public InstallTypeEnum getInstallType() {
    return installType;
  }
  public void setInstallType(InstallTypeEnum installType) {
    this.installType = installType;
  }
  public CondaCommands machineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
    return this;
  }

  

  /**
  * Get machineType
  * @return machineType
  **/
  @Schema(required = true, description = "")
  public MachineTypeEnum getMachineType() {
    return machineType;
  }
  public void setMachineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
  }
  public CondaCommands created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  

  /**
  * Get created
  * @return created
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreated() {
    return created;
  }
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public CondaCommands projectId(Project projectId) {
    this.projectId = projectId;
    return this;
  }

  

  /**
  * Get projectId
  * @return projectId
  **/
  @Schema(description = "")
  public Project getProjectId() {
    return projectId;
  }
  public void setProjectId(Project projectId) {
    this.projectId = projectId;
  }
  public CondaCommands hostId(Hosts hostId) {
    this.hostId = hostId;
    return this;
  }

  

  /**
  * Get hostId
  * @return hostId
  **/
  @Schema(description = "")
  public Hosts getHostId() {
    return hostId;
  }
  public void setHostId(Hosts hostId) {
    this.hostId = hostId;
  }
  public CondaCommands environmentYml(String environmentYml) {
    this.environmentYml = environmentYml;
    return this;
  }

  

  /**
  * Get environmentYml
  * @return environmentYml
  **/
  @Schema(description = "")
  public String getEnvironmentYml() {
    return environmentYml;
  }
  public void setEnvironmentYml(String environmentYml) {
    this.environmentYml = environmentYml;
  }
  public CondaCommands installJupyter(Boolean installJupyter) {
    this.installJupyter = installJupyter;
    return this;
  }

  

  /**
  * Get installJupyter
  * @return installJupyter
  **/
  @Schema(description = "")
  public Boolean isInstallJupyter() {
    return installJupyter;
  }
  public void setInstallJupyter(Boolean installJupyter) {
    this.installJupyter = installJupyter;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CondaCommands condaCommands = (CondaCommands) o;
    return Objects.equals(this.id, condaCommands.id) &&
        Objects.equals(this.user, condaCommands.user) &&
        Objects.equals(this.proj, condaCommands.proj) &&
        Objects.equals(this.channelUrl, condaCommands.channelUrl) &&
        Objects.equals(this.arg, condaCommands.arg) &&
        Objects.equals(this.lib, condaCommands.lib) &&
        Objects.equals(this.version, condaCommands.version) &&
        Objects.equals(this.op, condaCommands.op) &&
        Objects.equals(this.status, condaCommands.status) &&
        Objects.equals(this.installType, condaCommands.installType) &&
        Objects.equals(this.machineType, condaCommands.machineType) &&
        Objects.equals(this.created, condaCommands.created) &&
        Objects.equals(this.projectId, condaCommands.projectId) &&
        Objects.equals(this.hostId, condaCommands.hostId) &&
        Objects.equals(this.environmentYml, condaCommands.environmentYml) &&
        Objects.equals(this.installJupyter, condaCommands.installJupyter);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, user, proj, channelUrl, arg, lib, version, op, status, installType, machineType, created, projectId, hostId, environmentYml, installJupyter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CondaCommands {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    proj: ").append(toIndentedString(proj)).append("\n");
    sb.append("    channelUrl: ").append(toIndentedString(channelUrl)).append("\n");
    sb.append("    arg: ").append(toIndentedString(arg)).append("\n");
    sb.append("    lib: ").append(toIndentedString(lib)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    installType: ").append(toIndentedString(installType)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    environmentYml: ").append(toIndentedString(environmentYml)).append("\n");
    sb.append("    installJupyter: ").append(toIndentedString(installJupyter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
