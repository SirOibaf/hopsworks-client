/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Project;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * JupyterProject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class JupyterProject {

  @SerializedName("pid")
  private Long pid = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("expires")
  private OffsetDateTime expires = null;

  @SerializedName("secret")
  private String secret = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("projectId")
  private Project projectId = null;

  @SerializedName("hdfsUserId")
  private Integer hdfsUserId = null;

  @SerializedName("minutesUntilExpiration")
  private Long minutesUntilExpiration = null;
  public JupyterProject pid(Long pid) {
    this.pid = pid;
    return this;
  }

  

  /**
  * Get pid
  * @return pid
  **/
  @Schema(required = true, description = "")
  public Long getPid() {
    return pid;
  }
  public void setPid(Long pid) {
    this.pid = pid;
  }
  public JupyterProject port(Integer port) {
    this.port = port;
    return this;
  }

  

  /**
  * Get port
  * @return port
  **/
  @Schema(required = true, description = "")
  public Integer getPort() {
    return port;
  }
  public void setPort(Integer port) {
    this.port = port;
  }
  public JupyterProject created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  

  /**
  * Get created
  * @return created
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreated() {
    return created;
  }
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public JupyterProject expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

  

  /**
  * Get expires
  * @return expires
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getExpires() {
    return expires;
  }
  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }
  public JupyterProject secret(String secret) {
    this.secret = secret;
    return this;
  }

  

  /**
  * Get secret
  * @return secret
  **/
  @Schema(required = true, description = "")
  public String getSecret() {
    return secret;
  }
  public void setSecret(String secret) {
    this.secret = secret;
  }
  public JupyterProject token(String token) {
    this.token = token;
    return this;
  }

  

  /**
  * Get token
  * @return token
  **/
  @Schema(required = true, description = "")
  public String getToken() {
    return token;
  }
  public void setToken(String token) {
    this.token = token;
  }
  public JupyterProject projectId(Project projectId) {
    this.projectId = projectId;
    return this;
  }

  

  /**
  * Get projectId
  * @return projectId
  **/
  @Schema(description = "")
  public Project getProjectId() {
    return projectId;
  }
  public void setProjectId(Project projectId) {
    this.projectId = projectId;
  }
  public JupyterProject hdfsUserId(Integer hdfsUserId) {
    this.hdfsUserId = hdfsUserId;
    return this;
  }

  

  /**
  * Get hdfsUserId
  * @return hdfsUserId
  **/
  @Schema(required = true, description = "")
  public Integer getHdfsUserId() {
    return hdfsUserId;
  }
  public void setHdfsUserId(Integer hdfsUserId) {
    this.hdfsUserId = hdfsUserId;
  }
  public JupyterProject minutesUntilExpiration(Long minutesUntilExpiration) {
    this.minutesUntilExpiration = minutesUntilExpiration;
    return this;
  }

  

  /**
  * Get minutesUntilExpiration
  * @return minutesUntilExpiration
  **/
  @Schema(description = "")
  public Long getMinutesUntilExpiration() {
    return minutesUntilExpiration;
  }
  public void setMinutesUntilExpiration(Long minutesUntilExpiration) {
    this.minutesUntilExpiration = minutesUntilExpiration;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JupyterProject jupyterProject = (JupyterProject) o;
    return Objects.equals(this.pid, jupyterProject.pid) &&
        Objects.equals(this.port, jupyterProject.port) &&
        Objects.equals(this.created, jupyterProject.created) &&
        Objects.equals(this.expires, jupyterProject.expires) &&
        Objects.equals(this.secret, jupyterProject.secret) &&
        Objects.equals(this.token, jupyterProject.token) &&
        Objects.equals(this.projectId, jupyterProject.projectId) &&
        Objects.equals(this.hdfsUserId, jupyterProject.hdfsUserId) &&
        Objects.equals(this.minutesUntilExpiration, jupyterProject.minutesUntilExpiration);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(pid, port, created, expires, secret, token, projectId, hdfsUserId, minutesUntilExpiration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JupyterProject {\n");
    
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    hdfsUserId: ").append(toIndentedString(hdfsUserId)).append("\n");
    sb.append("    minutesUntilExpiration: ").append(toIndentedString(minutesUntilExpiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
