/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CondaCommands;
import io.swagger.client.model.HostServices;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Hosts
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Hosts {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("hostIp")
  private String hostIp = null;

  @SerializedName("publicIp")
  private String publicIp = null;

  @SerializedName("privateIp")
  private String privateIp = null;

  @SerializedName("agentPassword")
  private String agentPassword = null;

  @SerializedName("cores")
  private Integer cores = null;

  @SerializedName("lastHeartbeat")
  private Long lastHeartbeat = null;

  @SerializedName("memoryCapacity")
  private Long memoryCapacity = null;

  @SerializedName("numGpus")
  private Integer numGpus = null;

  @SerializedName("registered")
  private Boolean registered = null;

  @SerializedName("condaEnabled")
  private Boolean condaEnabled = null;

  @SerializedName("condaCommands")
  private List<CondaCommands> condaCommands = null;

  @SerializedName("hostServices")
  private List<HostServices> hostServices = null;

  @SerializedName("publicOrPrivateIp")
  private String publicOrPrivateIp = null;
  /**
   * Gets or Sets health
   */
  @JsonAdapter(HealthEnum.Adapter.class)
  public enum HealthEnum {
    GOOD("Good"),
    BAD("Bad");

    private String value;

    HealthEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HealthEnum fromValue(String text) {
      for (HealthEnum b : HealthEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HealthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HealthEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("health")
  private HealthEnum health = null;

  @SerializedName("lastHeartbeatFormatted")
  private String lastHeartbeatFormatted = null;
  public Hosts id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Hosts hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  

  /**
  * Get hostname
  * @return hostname
  **/
  @Schema(description = "")
  public String getHostname() {
    return hostname;
  }
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }
  public Hosts hostIp(String hostIp) {
    this.hostIp = hostIp;
    return this;
  }

  

  /**
  * Get hostIp
  * @return hostIp
  **/
  @Schema(description = "")
  public String getHostIp() {
    return hostIp;
  }
  public void setHostIp(String hostIp) {
    this.hostIp = hostIp;
  }
  public Hosts publicIp(String publicIp) {
    this.publicIp = publicIp;
    return this;
  }

  

  /**
  * Get publicIp
  * @return publicIp
  **/
  @Schema(description = "")
  public String getPublicIp() {
    return publicIp;
  }
  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }
  public Hosts privateIp(String privateIp) {
    this.privateIp = privateIp;
    return this;
  }

  

  /**
  * Get privateIp
  * @return privateIp
  **/
  @Schema(description = "")
  public String getPrivateIp() {
    return privateIp;
  }
  public void setPrivateIp(String privateIp) {
    this.privateIp = privateIp;
  }
  public Hosts agentPassword(String agentPassword) {
    this.agentPassword = agentPassword;
    return this;
  }

  

  /**
  * Get agentPassword
  * @return agentPassword
  **/
  @Schema(description = "")
  public String getAgentPassword() {
    return agentPassword;
  }
  public void setAgentPassword(String agentPassword) {
    this.agentPassword = agentPassword;
  }
  public Hosts cores(Integer cores) {
    this.cores = cores;
    return this;
  }

  

  /**
  * Get cores
  * @return cores
  **/
  @Schema(description = "")
  public Integer getCores() {
    return cores;
  }
  public void setCores(Integer cores) {
    this.cores = cores;
  }
  public Hosts lastHeartbeat(Long lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

  

  /**
  * Get lastHeartbeat
  * @return lastHeartbeat
  **/
  @Schema(description = "")
  public Long getLastHeartbeat() {
    return lastHeartbeat;
  }
  public void setLastHeartbeat(Long lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }
  public Hosts memoryCapacity(Long memoryCapacity) {
    this.memoryCapacity = memoryCapacity;
    return this;
  }

  

  /**
  * Get memoryCapacity
  * @return memoryCapacity
  **/
  @Schema(description = "")
  public Long getMemoryCapacity() {
    return memoryCapacity;
  }
  public void setMemoryCapacity(Long memoryCapacity) {
    this.memoryCapacity = memoryCapacity;
  }
  public Hosts numGpus(Integer numGpus) {
    this.numGpus = numGpus;
    return this;
  }

  

  /**
  * Get numGpus
  * @return numGpus
  **/
  @Schema(description = "")
  public Integer getNumGpus() {
    return numGpus;
  }
  public void setNumGpus(Integer numGpus) {
    this.numGpus = numGpus;
  }
  public Hosts registered(Boolean registered) {
    this.registered = registered;
    return this;
  }

  

  /**
  * Get registered
  * @return registered
  **/
  @Schema(description = "")
  public Boolean isRegistered() {
    return registered;
  }
  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }
  public Hosts condaEnabled(Boolean condaEnabled) {
    this.condaEnabled = condaEnabled;
    return this;
  }

  

  /**
  * Get condaEnabled
  * @return condaEnabled
  **/
  @Schema(description = "")
  public Boolean isCondaEnabled() {
    return condaEnabled;
  }
  public void setCondaEnabled(Boolean condaEnabled) {
    this.condaEnabled = condaEnabled;
  }
  public Hosts condaCommands(List<CondaCommands> condaCommands) {
    this.condaCommands = condaCommands;
    return this;
  }

  public Hosts addCondaCommandsItem(CondaCommands condaCommandsItem) {
    if (this.condaCommands == null) {
      this.condaCommands = new ArrayList<CondaCommands>();
    }
    this.condaCommands.add(condaCommandsItem);
    return this;
  }

  /**
  * Get condaCommands
  * @return condaCommands
  **/
  @Schema(description = "")
  public List<CondaCommands> getCondaCommands() {
    return condaCommands;
  }
  public void setCondaCommands(List<CondaCommands> condaCommands) {
    this.condaCommands = condaCommands;
  }
  public Hosts hostServices(List<HostServices> hostServices) {
    this.hostServices = hostServices;
    return this;
  }

  public Hosts addHostServicesItem(HostServices hostServicesItem) {
    if (this.hostServices == null) {
      this.hostServices = new ArrayList<HostServices>();
    }
    this.hostServices.add(hostServicesItem);
    return this;
  }

  /**
  * Get hostServices
  * @return hostServices
  **/
  @Schema(description = "")
  public List<HostServices> getHostServices() {
    return hostServices;
  }
  public void setHostServices(List<HostServices> hostServices) {
    this.hostServices = hostServices;
  }
  public Hosts publicOrPrivateIp(String publicOrPrivateIp) {
    this.publicOrPrivateIp = publicOrPrivateIp;
    return this;
  }

  

  /**
  * Get publicOrPrivateIp
  * @return publicOrPrivateIp
  **/
  @Schema(description = "")
  public String getPublicOrPrivateIp() {
    return publicOrPrivateIp;
  }
  public void setPublicOrPrivateIp(String publicOrPrivateIp) {
    this.publicOrPrivateIp = publicOrPrivateIp;
  }
  public Hosts health(HealthEnum health) {
    this.health = health;
    return this;
  }

  

  /**
  * Get health
  * @return health
  **/
  @Schema(description = "")
  public HealthEnum getHealth() {
    return health;
  }
  public void setHealth(HealthEnum health) {
    this.health = health;
  }
  public Hosts lastHeartbeatFormatted(String lastHeartbeatFormatted) {
    this.lastHeartbeatFormatted = lastHeartbeatFormatted;
    return this;
  }

  

  /**
  * Get lastHeartbeatFormatted
  * @return lastHeartbeatFormatted
  **/
  @Schema(description = "")
  public String getLastHeartbeatFormatted() {
    return lastHeartbeatFormatted;
  }
  public void setLastHeartbeatFormatted(String lastHeartbeatFormatted) {
    this.lastHeartbeatFormatted = lastHeartbeatFormatted;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hosts hosts = (Hosts) o;
    return Objects.equals(this.id, hosts.id) &&
        Objects.equals(this.hostname, hosts.hostname) &&
        Objects.equals(this.hostIp, hosts.hostIp) &&
        Objects.equals(this.publicIp, hosts.publicIp) &&
        Objects.equals(this.privateIp, hosts.privateIp) &&
        Objects.equals(this.agentPassword, hosts.agentPassword) &&
        Objects.equals(this.cores, hosts.cores) &&
        Objects.equals(this.lastHeartbeat, hosts.lastHeartbeat) &&
        Objects.equals(this.memoryCapacity, hosts.memoryCapacity) &&
        Objects.equals(this.numGpus, hosts.numGpus) &&
        Objects.equals(this.registered, hosts.registered) &&
        Objects.equals(this.condaEnabled, hosts.condaEnabled) &&
        Objects.equals(this.condaCommands, hosts.condaCommands) &&
        Objects.equals(this.hostServices, hosts.hostServices) &&
        Objects.equals(this.publicOrPrivateIp, hosts.publicOrPrivateIp) &&
        Objects.equals(this.health, hosts.health) &&
        Objects.equals(this.lastHeartbeatFormatted, hosts.lastHeartbeatFormatted);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, hostname, hostIp, publicIp, privateIp, agentPassword, cores, lastHeartbeat, memoryCapacity, numGpus, registered, condaEnabled, condaCommands, hostServices, publicOrPrivateIp, health, lastHeartbeatFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hosts {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    hostIp: ").append(toIndentedString(hostIp)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    privateIp: ").append(toIndentedString(privateIp)).append("\n");
    sb.append("    agentPassword: ").append(toIndentedString(agentPassword)).append("\n");
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    memoryCapacity: ").append(toIndentedString(memoryCapacity)).append("\n");
    sb.append("    numGpus: ").append(toIndentedString(numGpus)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    condaEnabled: ").append(toIndentedString(condaEnabled)).append("\n");
    sb.append("    condaCommands: ").append(toIndentedString(condaCommands)).append("\n");
    sb.append("    hostServices: ").append(toIndentedString(hostServices)).append("\n");
    sb.append("    publicOrPrivateIp: ").append(toIndentedString(publicOrPrivateIp)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    lastHeartbeatFormatted: ").append(toIndentedString(lastHeartbeatFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
