/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Project;
import io.swagger.client.model.Users;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Activity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Activity {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("activity")
  private String activity = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;
  /**
   * Gets or Sets flag
   */
  @JsonAdapter(FlagEnum.Adapter.class)
  public enum FlagEnum {
    MEMBER("MEMBER"),
    PROJECT("PROJECT"),
    SERVICE("SERVICE"),
    DATASET("DATASET"),
    JOB("JOB");

    private String value;

    FlagEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FlagEnum fromValue(String text) {
      for (FlagEnum b : FlagEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlagEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FlagEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("flag")
  private FlagEnum flag = null;

  @SerializedName("project")
  private Project project = null;

  @SerializedName("user")
  private Users user = null;
  public Activity id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Activity activity(String activity) {
    this.activity = activity;
    return this;
  }

  

  /**
  * Get activity
  * @return activity
  **/
  @Schema(description = "")
  public String getActivity() {
    return activity;
  }
  public void setActivity(String activity) {
    this.activity = activity;
  }
  public Activity timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Get timestamp
  * @return timestamp
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }
  public Activity flag(FlagEnum flag) {
    this.flag = flag;
    return this;
  }

  

  /**
  * Get flag
  * @return flag
  **/
  @Schema(required = true, description = "")
  public FlagEnum getFlag() {
    return flag;
  }
  public void setFlag(FlagEnum flag) {
    this.flag = flag;
  }
  public Activity project(Project project) {
    this.project = project;
    return this;
  }

  

  /**
  * Get project
  * @return project
  **/
  @Schema(description = "")
  public Project getProject() {
    return project;
  }
  public void setProject(Project project) {
    this.project = project;
  }
  public Activity user(Users user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public Users getUser() {
    return user;
  }
  public void setUser(Users user) {
    this.user = user;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.id, activity.id) &&
        Objects.equals(this.activity, activity.activity) &&
        Objects.equals(this.timestamp, activity.timestamp) &&
        Objects.equals(this.flag, activity.flag) &&
        Objects.equals(this.project, activity.project) &&
        Objects.equals(this.user, activity.user);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, activity, timestamp, flag, project, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
