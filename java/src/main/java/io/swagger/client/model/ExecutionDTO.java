/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExecutionDTO;
import io.swagger.client.model.UserDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ExecutionDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class ExecutionDTO {

  @SerializedName("href")
  private String href = null;

  @SerializedName("items")
  private List<ExecutionDTO> items = null;

  @SerializedName("count")
  private Long count = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("submissionTime")
  private OffsetDateTime submissionTime = null;
  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INITIALIZING("INITIALIZING"),
    INITIALIZATION_FAILED("INITIALIZATION_FAILED"),
    FINISHED("FINISHED"),
    RUNNING("RUNNING"),
    ACCEPTED("ACCEPTED"),
    FAILED("FAILED"),
    KILLED("KILLED"),
    NEW("NEW"),
    NEW_SAVING("NEW_SAVING"),
    SUBMITTED("SUBMITTED"),
    AGGREGATING_LOGS("AGGREGATING_LOGS"),
    FRAMEWORK_FAILURE("FRAMEWORK_FAILURE"),
    STARTING_APP_MASTER("STARTING_APP_MASTER"),
    APP_MASTER_START_FAILED("APP_MASTER_START_FAILED"),
    GENERATING_SECURITY_MATERIAL("GENERATING_SECURITY_MATERIAL");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("stdoutPath")
  private String stdoutPath = null;

  @SerializedName("stderrPath")
  private String stderrPath = null;

  @SerializedName("appId")
  private String appId = null;

  @SerializedName("hdfsUser")
  private String hdfsUser = null;
  /**
   * Gets or Sets finalStatus
   */
  @JsonAdapter(FinalStatusEnum.Adapter.class)
  public enum FinalStatusEnum {
    UNDEFINED("UNDEFINED"),
    SUCCEEDED("SUCCEEDED"),
    FAILED("FAILED"),
    KILLED("KILLED");

    private String value;

    FinalStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FinalStatusEnum fromValue(String text) {
      for (FinalStatusEnum b : FinalStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FinalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FinalStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("finalStatus")
  private FinalStatusEnum finalStatus = null;

  @SerializedName("progress")
  private Float progress = null;

  @SerializedName("user")
  private UserDTO user = null;

  @SerializedName("filesToRemove")
  private List<String> filesToRemove = null;

  @SerializedName("duration")
  private Long duration = null;

  @SerializedName("flinkMasterURL")
  private String flinkMasterURL = null;
  public ExecutionDTO href(String href) {
    this.href = href;
    return this;
  }

  

  /**
  * Get href
  * @return href
  **/
  @Schema(description = "")
  public String getHref() {
    return href;
  }
  public void setHref(String href) {
    this.href = href;
  }
  public ExecutionDTO items(List<ExecutionDTO> items) {
    this.items = items;
    return this;
  }

  public ExecutionDTO addItemsItem(ExecutionDTO itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<ExecutionDTO>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
  * Get items
  * @return items
  **/
  @Schema(description = "")
  public List<ExecutionDTO> getItems() {
    return items;
  }
  public void setItems(List<ExecutionDTO> items) {
    this.items = items;
  }
  public ExecutionDTO count(Long count) {
    this.count = count;
    return this;
  }

  

  /**
  * Get count
  * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }
  public void setCount(Long count) {
    this.count = count;
  }
  public ExecutionDTO id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public ExecutionDTO submissionTime(OffsetDateTime submissionTime) {
    this.submissionTime = submissionTime;
    return this;
  }

  

  /**
  * Get submissionTime
  * @return submissionTime
  **/
  @Schema(description = "")
  public OffsetDateTime getSubmissionTime() {
    return submissionTime;
  }
  public void setSubmissionTime(OffsetDateTime submissionTime) {
    this.submissionTime = submissionTime;
  }
  public ExecutionDTO state(StateEnum state) {
    this.state = state;
    return this;
  }

  

  /**
  * Get state
  * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }
  public void setState(StateEnum state) {
    this.state = state;
  }
  public ExecutionDTO stdoutPath(String stdoutPath) {
    this.stdoutPath = stdoutPath;
    return this;
  }

  

  /**
  * Get stdoutPath
  * @return stdoutPath
  **/
  @Schema(description = "")
  public String getStdoutPath() {
    return stdoutPath;
  }
  public void setStdoutPath(String stdoutPath) {
    this.stdoutPath = stdoutPath;
  }
  public ExecutionDTO stderrPath(String stderrPath) {
    this.stderrPath = stderrPath;
    return this;
  }

  

  /**
  * Get stderrPath
  * @return stderrPath
  **/
  @Schema(description = "")
  public String getStderrPath() {
    return stderrPath;
  }
  public void setStderrPath(String stderrPath) {
    this.stderrPath = stderrPath;
  }
  public ExecutionDTO appId(String appId) {
    this.appId = appId;
    return this;
  }

  

  /**
  * Get appId
  * @return appId
  **/
  @Schema(description = "")
  public String getAppId() {
    return appId;
  }
  public void setAppId(String appId) {
    this.appId = appId;
  }
  public ExecutionDTO hdfsUser(String hdfsUser) {
    this.hdfsUser = hdfsUser;
    return this;
  }

  

  /**
  * Get hdfsUser
  * @return hdfsUser
  **/
  @Schema(description = "")
  public String getHdfsUser() {
    return hdfsUser;
  }
  public void setHdfsUser(String hdfsUser) {
    this.hdfsUser = hdfsUser;
  }
  public ExecutionDTO finalStatus(FinalStatusEnum finalStatus) {
    this.finalStatus = finalStatus;
    return this;
  }

  

  /**
  * Get finalStatus
  * @return finalStatus
  **/
  @Schema(description = "")
  public FinalStatusEnum getFinalStatus() {
    return finalStatus;
  }
  public void setFinalStatus(FinalStatusEnum finalStatus) {
    this.finalStatus = finalStatus;
  }
  public ExecutionDTO progress(Float progress) {
    this.progress = progress;
    return this;
  }

  

  /**
  * Get progress
  * @return progress
  **/
  @Schema(description = "")
  public Float getProgress() {
    return progress;
  }
  public void setProgress(Float progress) {
    this.progress = progress;
  }
  public ExecutionDTO user(UserDTO user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public UserDTO getUser() {
    return user;
  }
  public void setUser(UserDTO user) {
    this.user = user;
  }
  public ExecutionDTO filesToRemove(List<String> filesToRemove) {
    this.filesToRemove = filesToRemove;
    return this;
  }

  public ExecutionDTO addFilesToRemoveItem(String filesToRemoveItem) {
    if (this.filesToRemove == null) {
      this.filesToRemove = new ArrayList<String>();
    }
    this.filesToRemove.add(filesToRemoveItem);
    return this;
  }

  /**
  * Get filesToRemove
  * @return filesToRemove
  **/
  @Schema(description = "")
  public List<String> getFilesToRemove() {
    return filesToRemove;
  }
  public void setFilesToRemove(List<String> filesToRemove) {
    this.filesToRemove = filesToRemove;
  }
  public ExecutionDTO duration(Long duration) {
    this.duration = duration;
    return this;
  }

  

  /**
  * Get duration
  * @return duration
  **/
  @Schema(description = "")
  public Long getDuration() {
    return duration;
  }
  public void setDuration(Long duration) {
    this.duration = duration;
  }
  public ExecutionDTO flinkMasterURL(String flinkMasterURL) {
    this.flinkMasterURL = flinkMasterURL;
    return this;
  }

  

  /**
  * Get flinkMasterURL
  * @return flinkMasterURL
  **/
  @Schema(description = "")
  public String getFlinkMasterURL() {
    return flinkMasterURL;
  }
  public void setFlinkMasterURL(String flinkMasterURL) {
    this.flinkMasterURL = flinkMasterURL;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionDTO executionDTO = (ExecutionDTO) o;
    return Objects.equals(this.href, executionDTO.href) &&
        Objects.equals(this.items, executionDTO.items) &&
        Objects.equals(this.count, executionDTO.count) &&
        Objects.equals(this.id, executionDTO.id) &&
        Objects.equals(this.submissionTime, executionDTO.submissionTime) &&
        Objects.equals(this.state, executionDTO.state) &&
        Objects.equals(this.stdoutPath, executionDTO.stdoutPath) &&
        Objects.equals(this.stderrPath, executionDTO.stderrPath) &&
        Objects.equals(this.appId, executionDTO.appId) &&
        Objects.equals(this.hdfsUser, executionDTO.hdfsUser) &&
        Objects.equals(this.finalStatus, executionDTO.finalStatus) &&
        Objects.equals(this.progress, executionDTO.progress) &&
        Objects.equals(this.user, executionDTO.user) &&
        Objects.equals(this.filesToRemove, executionDTO.filesToRemove) &&
        Objects.equals(this.duration, executionDTO.duration) &&
        Objects.equals(this.flinkMasterURL, executionDTO.flinkMasterURL);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(href, items, count, id, submissionTime, state, stdoutPath, stderrPath, appId, hdfsUser, finalStatus, progress, user, filesToRemove, duration, flinkMasterURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionDTO {\n");
    
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    submissionTime: ").append(toIndentedString(submissionTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stdoutPath: ").append(toIndentedString(stdoutPath)).append("\n");
    sb.append("    stderrPath: ").append(toIndentedString(stderrPath)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    hdfsUser: ").append(toIndentedString(hdfsUser)).append("\n");
    sb.append("    finalStatus: ").append(toIndentedString(finalStatus)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    filesToRemove: ").append(toIndentedString(filesToRemove)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    flinkMasterURL: ").append(toIndentedString(flinkMasterURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
