/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DatasetRequest;
import io.swagger.client.model.Featurestore;
import io.swagger.client.model.Inode;
import io.swagger.client.model.Project;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Dataset
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class Dataset {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("inode")
  private Inode inode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("project")
  private Project project = null;
  /**
   * Gets or Sets editable
   */
  @JsonAdapter(EditableEnum.Adapter.class)
  public enum EditableEnum {
    GROUP_WRITABLE_SB("GROUP_WRITABLE_SB"),
    GROUP_WRITABLE("GROUP_WRITABLE"),
    OWNER_ONLY("OWNER_ONLY");

    private String value;

    EditableEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EditableEnum fromValue(String text) {
      for (EditableEnum b : EditableEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EditableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditableEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EditableEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("editable")
  private EditableEnum editable = null;

  @SerializedName("searchable")
  private Boolean searchable = null;

  @SerializedName("status")
  private Boolean status = null;

  @SerializedName("publicDs")
  private Integer publicDs = null;

  @SerializedName("publicDsId")
  private String publicDsId = null;

  @SerializedName("shared")
  private Boolean shared = null;
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATASET("DATASET"),
    HIVEDB("HIVEDB"),
    FEATURESTORE("FEATURESTORE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("featurestore")
  private Featurestore featurestore = null;

  @SerializedName("datasetRequestCollection")
  private List<DatasetRequest> datasetRequestCollection = null;

  @SerializedName("inodeId")
  private Long inodeId = null;
  /**
   * Gets or Sets publicDsState
   */
  @JsonAdapter(PublicDsStateEnum.Adapter.class)
  public enum PublicDsStateEnum {
    PRIVATE("PRIVATE"),
    CLUSTER("CLUSTER"),
    HOPS("HOPS");

    private String value;

    PublicDsStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PublicDsStateEnum fromValue(String text) {
      for (PublicDsStateEnum b : PublicDsStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PublicDsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicDsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicDsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PublicDsStateEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("publicDsState")
  private PublicDsStateEnum publicDsState = null;
  public Dataset id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Dataset inode(Inode inode) {
    this.inode = inode;
    return this;
  }

  

  /**
  * Get inode
  * @return inode
  **/
  @Schema(description = "")
  public Inode getInode() {
    return inode;
  }
  public void setInode(Inode inode) {
    this.inode = inode;
  }
  public Dataset name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Dataset description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Dataset project(Project project) {
    this.project = project;
    return this;
  }

  

  /**
  * Get project
  * @return project
  **/
  @Schema(description = "")
  public Project getProject() {
    return project;
  }
  public void setProject(Project project) {
    this.project = project;
  }
  public Dataset editable(EditableEnum editable) {
    this.editable = editable;
    return this;
  }

  

  /**
  * Get editable
  * @return editable
  **/
  @Schema(required = true, description = "")
  public EditableEnum getEditable() {
    return editable;
  }
  public void setEditable(EditableEnum editable) {
    this.editable = editable;
  }
  public Dataset searchable(Boolean searchable) {
    this.searchable = searchable;
    return this;
  }

  

  /**
  * Get searchable
  * @return searchable
  **/
  @Schema(required = true, description = "")
  public Boolean isSearchable() {
    return searchable;
  }
  public void setSearchable(Boolean searchable) {
    this.searchable = searchable;
  }
  public Dataset status(Boolean status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(required = true, description = "")
  public Boolean isStatus() {
    return status;
  }
  public void setStatus(Boolean status) {
    this.status = status;
  }
  public Dataset publicDs(Integer publicDs) {
    this.publicDs = publicDs;
    return this;
  }

  

  /**
  * Get publicDs
  * @return publicDs
  **/
  @Schema(required = true, description = "")
  public Integer getPublicDs() {
    return publicDs;
  }
  public void setPublicDs(Integer publicDs) {
    this.publicDs = publicDs;
  }
  public Dataset publicDsId(String publicDsId) {
    this.publicDsId = publicDsId;
    return this;
  }

  

  /**
  * Get publicDsId
  * @return publicDsId
  **/
  @Schema(description = "")
  public String getPublicDsId() {
    return publicDsId;
  }
  public void setPublicDsId(String publicDsId) {
    this.publicDsId = publicDsId;
  }
  public Dataset shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  

  /**
  * Get shared
  * @return shared
  **/
  @Schema(required = true, description = "")
  public Boolean isShared() {
    return shared;
  }
  public void setShared(Boolean shared) {
    this.shared = shared;
  }
  public Dataset type(TypeEnum type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  public Dataset featurestore(Featurestore featurestore) {
    this.featurestore = featurestore;
    return this;
  }

  

  /**
  * Get featurestore
  * @return featurestore
  **/
  @Schema(description = "")
  public Featurestore getFeaturestore() {
    return featurestore;
  }
  public void setFeaturestore(Featurestore featurestore) {
    this.featurestore = featurestore;
  }
  public Dataset datasetRequestCollection(List<DatasetRequest> datasetRequestCollection) {
    this.datasetRequestCollection = datasetRequestCollection;
    return this;
  }

  public Dataset addDatasetRequestCollectionItem(DatasetRequest datasetRequestCollectionItem) {
    if (this.datasetRequestCollection == null) {
      this.datasetRequestCollection = new ArrayList<DatasetRequest>();
    }
    this.datasetRequestCollection.add(datasetRequestCollectionItem);
    return this;
  }

  /**
  * Get datasetRequestCollection
  * @return datasetRequestCollection
  **/
  @Schema(description = "")
  public List<DatasetRequest> getDatasetRequestCollection() {
    return datasetRequestCollection;
  }
  public void setDatasetRequestCollection(List<DatasetRequest> datasetRequestCollection) {
    this.datasetRequestCollection = datasetRequestCollection;
  }
  public Dataset inodeId(Long inodeId) {
    this.inodeId = inodeId;
    return this;
  }

  

  /**
  * Get inodeId
  * @return inodeId
  **/
  @Schema(description = "")
  public Long getInodeId() {
    return inodeId;
  }
  public void setInodeId(Long inodeId) {
    this.inodeId = inodeId;
  }
  public Dataset publicDsState(PublicDsStateEnum publicDsState) {
    this.publicDsState = publicDsState;
    return this;
  }

  

  /**
  * Get publicDsState
  * @return publicDsState
  **/
  @Schema(description = "")
  public PublicDsStateEnum getPublicDsState() {
    return publicDsState;
  }
  public void setPublicDsState(PublicDsStateEnum publicDsState) {
    this.publicDsState = publicDsState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.id, dataset.id) &&
        Objects.equals(this.inode, dataset.inode) &&
        Objects.equals(this.name, dataset.name) &&
        Objects.equals(this.description, dataset.description) &&
        Objects.equals(this.project, dataset.project) &&
        Objects.equals(this.editable, dataset.editable) &&
        Objects.equals(this.searchable, dataset.searchable) &&
        Objects.equals(this.status, dataset.status) &&
        Objects.equals(this.publicDs, dataset.publicDs) &&
        Objects.equals(this.publicDsId, dataset.publicDsId) &&
        Objects.equals(this.shared, dataset.shared) &&
        Objects.equals(this.type, dataset.type) &&
        Objects.equals(this.featurestore, dataset.featurestore) &&
        Objects.equals(this.datasetRequestCollection, dataset.datasetRequestCollection) &&
        Objects.equals(this.inodeId, dataset.inodeId) &&
        Objects.equals(this.publicDsState, dataset.publicDsState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, inode, name, description, project, editable, searchable, status, publicDs, publicDsId, shared, type, featurestore, datasetRequestCollection, inodeId, publicDsState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inode: ").append(toIndentedString(inode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    publicDs: ").append(toIndentedString(publicDs)).append("\n");
    sb.append("    publicDsId: ").append(toIndentedString(publicDsId)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    featurestore: ").append(toIndentedString(featurestore)).append("\n");
    sb.append("    datasetRequestCollection: ").append(toIndentedString(datasetRequestCollection)).append("\n");
    sb.append("    inodeId: ").append(toIndentedString(inodeId)).append("\n");
    sb.append("    publicDsState: ").append(toIndentedString(publicDsState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
