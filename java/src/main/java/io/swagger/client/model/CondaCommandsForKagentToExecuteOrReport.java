/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * CondaCommandsForKagentToExecuteOrReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class CondaCommandsForKagentToExecuteOrReport {
  /**
   * Operation to be performed
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    CLONE("CLONE"),
    CREATE("CREATE"),
    BACKUP("BACKUP"),
    REMOVE("REMOVE"),
    LIST("LIST"),
    INSTALL("INSTALL"),
    UNINSTALL("UNINSTALL"),
    UPGRADE("UPGRADE"),
    CLEAN("CLEAN"),
    YML("YML");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OpEnum fromValue(String text) {
      for (OpEnum b : OpEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OpEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("op")
  private OpEnum op = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("arg")
  private String arg = null;
  /**
   * Status of comamnd
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("NEW"),
    SUCCESS("SUCCESS"),
    ONGOING("ONGOING"),
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("channelUrl")
  private String channelUrl = null;
  /**
   * Type of Conda installation
   */
  @JsonAdapter(InstallTypeEnum.Adapter.class)
  public enum InstallTypeEnum {
    ENVIRONMENT("ENVIRONMENT"),
    CONDA("CONDA"),
    PIP("PIP");

    private String value;

    InstallTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InstallTypeEnum fromValue(String text) {
      for (InstallTypeEnum b : InstallTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InstallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstallTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("installType")
  private InstallTypeEnum installType = null;

  @SerializedName("lib")
  private String lib = null;

  @SerializedName("environmentYml")
  private String environmentYml = null;

  @SerializedName("installJupyter")
  private Boolean installJupyter = null;
  public CondaCommandsForKagentToExecuteOrReport op(OpEnum op) {
    this.op = op;
    return this;
  }

  

  /**
  * Operation to be performed
  * @return op
  **/
  @Schema(required = true, description = "Operation to be performed")
  public OpEnum getOp() {
    return op;
  }
  public void setOp(OpEnum op) {
    this.op = op;
  }
  public CondaCommandsForKagentToExecuteOrReport user(String user) {
    this.user = user;
    return this;
  }

  

  /**
  * The user command will be executed
  * @return user
  **/
  @Schema(description = "The user command will be executed")
  public String getUser() {
    return user;
  }
  public void setUser(String user) {
    this.user = user;
  }
  public CondaCommandsForKagentToExecuteOrReport project(String project) {
    this.project = project;
    return this;
  }

  

  /**
  * Name of the project the command is associated with
  * @return project
  **/
  @Schema(required = true, description = "Name of the project the command is associated with")
  public String getProject() {
    return project;
  }
  public void setProject(String project) {
    this.project = project;
  }
  public CondaCommandsForKagentToExecuteOrReport id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * ID of command
  * @return id
  **/
  @Schema(required = true, description = "ID of command")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public CondaCommandsForKagentToExecuteOrReport arg(String arg) {
    this.arg = arg;
    return this;
  }

  

  /**
  * Arguments passed to command
  * @return arg
  **/
  @Schema(description = "Arguments passed to command")
  public String getArg() {
    return arg;
  }
  public void setArg(String arg) {
    this.arg = arg;
  }
  public CondaCommandsForKagentToExecuteOrReport status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Status of comamnd
  * @return status
  **/
  @Schema(required = true, description = "Status of comamnd")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public CondaCommandsForKagentToExecuteOrReport version(String version) {
    this.version = version;
    return this;
  }

  

  /**
  * Python version to be enabled
  * @return version
  **/
  @Schema(description = "Python version to be enabled")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }
  public CondaCommandsForKagentToExecuteOrReport channelUrl(String channelUrl) {
    this.channelUrl = channelUrl;
    return this;
  }

  

  /**
  * Pip channel to download a library if not th default
  * @return channelUrl
  **/
  @Schema(description = "Pip channel to download a library if not th default")
  public String getChannelUrl() {
    return channelUrl;
  }
  public void setChannelUrl(String channelUrl) {
    this.channelUrl = channelUrl;
  }
  public CondaCommandsForKagentToExecuteOrReport installType(InstallTypeEnum installType) {
    this.installType = installType;
    return this;
  }

  

  /**
  * Type of Conda installation
  * @return installType
  **/
  @Schema(description = "Type of Conda installation")
  public InstallTypeEnum getInstallType() {
    return installType;
  }
  public void setInstallType(InstallTypeEnum installType) {
    this.installType = installType;
  }
  public CondaCommandsForKagentToExecuteOrReport lib(String lib) {
    this.lib = lib;
    return this;
  }

  

  /**
  * Name of the library to install
  * @return lib
  **/
  @Schema(description = "Name of the library to install")
  public String getLib() {
    return lib;
  }
  public void setLib(String lib) {
    this.lib = lib;
  }
  public CondaCommandsForKagentToExecuteOrReport environmentYml(String environmentYml) {
    this.environmentYml = environmentYml;
    return this;
  }

  

  /**
  * Environment exported as a YML file
  * @return environmentYml
  **/
  @Schema(description = "Environment exported as a YML file")
  public String getEnvironmentYml() {
    return environmentYml;
  }
  public void setEnvironmentYml(String environmentYml) {
    this.environmentYml = environmentYml;
  }
  public CondaCommandsForKagentToExecuteOrReport installJupyter(Boolean installJupyter) {
    this.installJupyter = installJupyter;
    return this;
  }

  

  /**
  * Whether or not to install Jupyter during the environment creation from a YML file
  * @return installJupyter
  **/
  @Schema(description = "Whether or not to install Jupyter during the environment creation from a YML file")
  public Boolean isInstallJupyter() {
    return installJupyter;
  }
  public void setInstallJupyter(Boolean installJupyter) {
    this.installJupyter = installJupyter;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CondaCommandsForKagentToExecuteOrReport condaCommandsForKagentToExecuteOrReport = (CondaCommandsForKagentToExecuteOrReport) o;
    return Objects.equals(this.op, condaCommandsForKagentToExecuteOrReport.op) &&
        Objects.equals(this.user, condaCommandsForKagentToExecuteOrReport.user) &&
        Objects.equals(this.project, condaCommandsForKagentToExecuteOrReport.project) &&
        Objects.equals(this.id, condaCommandsForKagentToExecuteOrReport.id) &&
        Objects.equals(this.arg, condaCommandsForKagentToExecuteOrReport.arg) &&
        Objects.equals(this.status, condaCommandsForKagentToExecuteOrReport.status) &&
        Objects.equals(this.version, condaCommandsForKagentToExecuteOrReport.version) &&
        Objects.equals(this.channelUrl, condaCommandsForKagentToExecuteOrReport.channelUrl) &&
        Objects.equals(this.installType, condaCommandsForKagentToExecuteOrReport.installType) &&
        Objects.equals(this.lib, condaCommandsForKagentToExecuteOrReport.lib) &&
        Objects.equals(this.environmentYml, condaCommandsForKagentToExecuteOrReport.environmentYml) &&
        Objects.equals(this.installJupyter, condaCommandsForKagentToExecuteOrReport.installJupyter);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(op, user, project, id, arg, status, version, channelUrl, installType, lib, environmentYml, installJupyter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CondaCommandsForKagentToExecuteOrReport {\n");
    
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arg: ").append(toIndentedString(arg)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    channelUrl: ").append(toIndentedString(channelUrl)).append("\n");
    sb.append("    installType: ").append(toIndentedString(installType)).append("\n");
    sb.append("    lib: ").append(toIndentedString(lib)).append("\n");
    sb.append("    environmentYml: ").append(toIndentedString(environmentYml)).append("\n");
    sb.append("    installJupyter: ").append(toIndentedString(installJupyter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
