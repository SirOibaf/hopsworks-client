/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConstraintDTO;
import io.swagger.client.model.ConstraintGroupDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ConstraintGroupDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class ConstraintGroupDTO {

  @SerializedName("href")
  private String href = null;

  @SerializedName("items")
  private List<ConstraintGroupDTO> items = null;

  @SerializedName("count")
  private Long count = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;
  /**
   * Gets or Sets level
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    WARNING("Warning"),
    ERROR("Error");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LevelEnum fromValue(String text) {
      for (LevelEnum b : LevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LevelEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("level")
  private LevelEnum level = null;

  @SerializedName("constraints")
  private ConstraintDTO constraints = null;
  public ConstraintGroupDTO href(String href) {
    this.href = href;
    return this;
  }

  

  /**
  * Get href
  * @return href
  **/
  @Schema(description = "")
  public String getHref() {
    return href;
  }
  public void setHref(String href) {
    this.href = href;
  }
  public ConstraintGroupDTO items(List<ConstraintGroupDTO> items) {
    this.items = items;
    return this;
  }

  public ConstraintGroupDTO addItemsItem(ConstraintGroupDTO itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<ConstraintGroupDTO>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
  * Get items
  * @return items
  **/
  @Schema(description = "")
  public List<ConstraintGroupDTO> getItems() {
    return items;
  }
  public void setItems(List<ConstraintGroupDTO> items) {
    this.items = items;
  }
  public ConstraintGroupDTO count(Long count) {
    this.count = count;
    return this;
  }

  

  /**
  * Get count
  * @return count
  **/
  @Schema(description = "")
  public Long getCount() {
    return count;
  }
  public void setCount(Long count) {
    this.count = count;
  }
  public ConstraintGroupDTO name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public ConstraintGroupDTO description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(required = true, description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public ConstraintGroupDTO level(LevelEnum level) {
    this.level = level;
    return this;
  }

  

  /**
  * Get level
  * @return level
  **/
  @Schema(required = true, description = "")
  public LevelEnum getLevel() {
    return level;
  }
  public void setLevel(LevelEnum level) {
    this.level = level;
  }
  public ConstraintGroupDTO constraints(ConstraintDTO constraints) {
    this.constraints = constraints;
    return this;
  }

  

  /**
  * Get constraints
  * @return constraints
  **/
  @Schema(description = "")
  public ConstraintDTO getConstraints() {
    return constraints;
  }
  public void setConstraints(ConstraintDTO constraints) {
    this.constraints = constraints;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConstraintGroupDTO constraintGroupDTO = (ConstraintGroupDTO) o;
    return Objects.equals(this.href, constraintGroupDTO.href) &&
        Objects.equals(this.items, constraintGroupDTO.items) &&
        Objects.equals(this.count, constraintGroupDTO.count) &&
        Objects.equals(this.name, constraintGroupDTO.name) &&
        Objects.equals(this.description, constraintGroupDTO.description) &&
        Objects.equals(this.level, constraintGroupDTO.level) &&
        Objects.equals(this.constraints, constraintGroupDTO.constraints);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(href, items, count, name, description, level, constraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConstraintGroupDTO {\n");
    
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
