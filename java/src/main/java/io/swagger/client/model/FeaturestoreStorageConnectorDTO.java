/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * FeaturestoreStorageConnectorDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-28T02:09:19.386+01:00[Europe/Stockholm]")public class FeaturestoreStorageConnectorDTO {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("featurestoreId")
  private Integer featurestoreId = null;
  /**
   * Gets or Sets storageConnectorType
   */
  @JsonAdapter(StorageConnectorTypeEnum.Adapter.class)
  public enum StorageConnectorTypeEnum {
    HOPSFS("HopsFS"),
    JDBC("JDBC"),
    S3("S3");

    private String value;

    StorageConnectorTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageConnectorTypeEnum fromValue(String text) {
      for (StorageConnectorTypeEnum b : StorageConnectorTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StorageConnectorTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("storageConnectorType")
  private StorageConnectorTypeEnum storageConnectorType = null;
  public FeaturestoreStorageConnectorDTO id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public FeaturestoreStorageConnectorDTO description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public FeaturestoreStorageConnectorDTO name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public FeaturestoreStorageConnectorDTO featurestoreId(Integer featurestoreId) {
    this.featurestoreId = featurestoreId;
    return this;
  }

  

  /**
  * Get featurestoreId
  * @return featurestoreId
  **/
  @Schema(description = "")
  public Integer getFeaturestoreId() {
    return featurestoreId;
  }
  public void setFeaturestoreId(Integer featurestoreId) {
    this.featurestoreId = featurestoreId;
  }
  public FeaturestoreStorageConnectorDTO storageConnectorType(StorageConnectorTypeEnum storageConnectorType) {
    this.storageConnectorType = storageConnectorType;
    return this;
  }

  

  /**
  * Get storageConnectorType
  * @return storageConnectorType
  **/
  @Schema(description = "")
  public StorageConnectorTypeEnum getStorageConnectorType() {
    return storageConnectorType;
  }
  public void setStorageConnectorType(StorageConnectorTypeEnum storageConnectorType) {
    this.storageConnectorType = storageConnectorType;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeaturestoreStorageConnectorDTO featurestoreStorageConnectorDTO = (FeaturestoreStorageConnectorDTO) o;
    return Objects.equals(this.id, featurestoreStorageConnectorDTO.id) &&
        Objects.equals(this.description, featurestoreStorageConnectorDTO.description) &&
        Objects.equals(this.name, featurestoreStorageConnectorDTO.name) &&
        Objects.equals(this.featurestoreId, featurestoreStorageConnectorDTO.featurestoreId) &&
        Objects.equals(this.storageConnectorType, featurestoreStorageConnectorDTO.storageConnectorType);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, description, name, featurestoreId, storageConnectorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeaturestoreStorageConnectorDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    featurestoreId: ").append(toIndentedString(featurestoreId)).append("\n");
    sb.append("    storageConnectorType: ").append(toIndentedString(storageConnectorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
