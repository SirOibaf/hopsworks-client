/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ConstraintGroupDTO;
import io.swagger.client.model.DataValidationSettingsDTO;
import io.swagger.client.model.FeaturegroupDTO;
import io.swagger.client.model.FeaturegroupImportJobDTO;
import io.swagger.client.model.FeaturegroupPreview;
import io.swagger.client.model.FeaturestoreClientSettingsDTO;
import io.swagger.client.model.FeaturestoreDTO;
import io.swagger.client.model.FeaturestoreStorageConnectorDTO;
import io.swagger.client.model.FeaturestoreUtilJobDTO;
import io.swagger.client.model.JobDTO;
import io.swagger.client.model.RowValueQueryResult;
import io.swagger.client.model.TrainingDatasetDTO;
import io.swagger.client.model.TrainingDatasetJobDTO;
import io.swagger.client.model.ValidationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeaturestoreServiceApi {
    private ApiClient apiClient;

    public FeaturestoreServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeaturestoreServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addValidationRules
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addValidationRulesCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, ConstraintGroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/rules"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featureStoreId" + "\\}", apiClient.escapeString(featureStoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addValidationRulesValidateBeforeCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, ConstraintGroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling addValidationRules(Async)");
        }
        // verify the required parameter 'featureStoreId' is set
        if (featureStoreId == null) {
            throw new ApiException("Missing the required parameter 'featureStoreId' when calling addValidationRules(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addValidationRules(Async)");
        }
        
        com.squareup.okhttp.Call call = addValidationRulesCall(featuregroupId, featureStoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Write Deequ validation rules to Filesystem so validation job can pick it up
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return DataValidationSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataValidationSettingsDTO addValidationRules(Integer featuregroupId, Integer featureStoreId, Integer projectId, ConstraintGroupDTO body) throws ApiException {
        ApiResponse<DataValidationSettingsDTO> resp = addValidationRulesWithHttpInfo(featuregroupId, featureStoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Write Deequ validation rules to Filesystem so validation job can pick it up
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;DataValidationSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataValidationSettingsDTO> addValidationRulesWithHttpInfo(Integer featuregroupId, Integer featureStoreId, Integer projectId, ConstraintGroupDTO body) throws ApiException {
        com.squareup.okhttp.Call call = addValidationRulesValidateBeforeCall(featuregroupId, featureStoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<DataValidationSettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Write Deequ validation rules to Filesystem so validation job can pick it up (asynchronously)
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addValidationRulesAsync(Integer featuregroupId, Integer featureStoreId, Integer projectId, ConstraintGroupDTO body, final ApiCallback<DataValidationSettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addValidationRulesValidateBeforeCall(featuregroupId, featureStoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataValidationSettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFeaturegroup
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFeaturegroupCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFeaturegroupValidateBeforeCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createFeaturegroup(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createFeaturegroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createFeaturegroupCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create feature group in a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO createFeaturegroup(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = createFeaturegroupWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create feature group in a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> createFeaturegroupWithHttpInfo(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createFeaturegroupValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create feature group in a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFeaturegroupAsync(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFeaturegroupValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNewStorageConnectorWithType
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewStorageConnectorWithTypeCall(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewStorageConnectorWithTypeValidateBeforeCall(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling createNewStorageConnectorWithType(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createNewStorageConnectorWithType(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createNewStorageConnectorWithType(Async)");
        }
        
        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeCall(connectorType, featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new storage connector for the feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO createNewStorageConnectorWithType(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = createNewStorageConnectorWithTypeWithHttpInfo(connectorType, featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create a new storage connector for the feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> createNewStorageConnectorWithTypeWithHttpInfo(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeValidateBeforeCall(connectorType, featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new storage connector for the feature store (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewStorageConnectorWithTypeAsync(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeValidateBeforeCall(connectorType, featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrUpdateImportJob
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateImportJobCall(FeaturegroupImportJobDTO body, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/importjob"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateImportJobValidateBeforeCall(FeaturegroupImportJobDTO body, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOrUpdateImportJob(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createOrUpdateImportJob(Async)");
        }
        
        com.squareup.okhttp.Call call = createOrUpdateImportJobCall(body, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure job to import featuregroup
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @return JobDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobDTO createOrUpdateImportJob(FeaturegroupImportJobDTO body, Integer projectId) throws ApiException {
        ApiResponse<JobDTO> resp = createOrUpdateImportJobWithHttpInfo(body, projectId);
        return resp.getData();
    }

    /**
     * Configure job to import featuregroup
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;JobDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobDTO> createOrUpdateImportJobWithHttpInfo(FeaturegroupImportJobDTO body, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateImportJobValidateBeforeCall(body, projectId, null, null);
        Type localVarReturnType = new TypeToken<JobDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configure job to import featuregroup (asynchronously)
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateImportJobAsync(FeaturegroupImportJobDTO body, Integer projectId, final ApiCallback<JobDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateImportJobValidateBeforeCall(body, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrUpdateTrainingDatasetJob
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateTrainingDatasetJobCall(TrainingDatasetJobDTO body, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/trainingdatasetjob"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateTrainingDatasetJobValidateBeforeCall(TrainingDatasetJobDTO body, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOrUpdateTrainingDatasetJob(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createOrUpdateTrainingDatasetJob(Async)");
        }
        
        com.squareup.okhttp.Call call = createOrUpdateTrainingDatasetJobCall(body, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure job to create training dataset
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @return JobDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobDTO createOrUpdateTrainingDatasetJob(TrainingDatasetJobDTO body, Integer projectId) throws ApiException {
        ApiResponse<JobDTO> resp = createOrUpdateTrainingDatasetJobWithHttpInfo(body, projectId);
        return resp.getData();
    }

    /**
     * Configure job to create training dataset
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;JobDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobDTO> createOrUpdateTrainingDatasetJobWithHttpInfo(TrainingDatasetJobDTO body, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateTrainingDatasetJobValidateBeforeCall(body, projectId, null, null);
        Type localVarReturnType = new TypeToken<JobDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configure job to create training dataset (asynchronously)
     * 
     * @param body Job configuration (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateTrainingDatasetJobAsync(TrainingDatasetJobDTO body, Integer projectId, final ApiCallback<JobDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateTrainingDatasetJobValidateBeforeCall(body, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTrainingDataset
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTrainingDatasetCall(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTrainingDatasetValidateBeforeCall(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = createTrainingDatasetCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create training dataset for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO createTrainingDataset(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = createTrainingDatasetWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create training dataset for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> createTrainingDatasetWithHttpInfo(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createTrainingDatasetValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create training dataset for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTrainingDatasetAsync(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTrainingDatasetValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFeatureGroupFromFeatureStore
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO deleteFeatureGroupFromFeatureStore(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = deleteFeatureGroupFromFeatureStoreWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> deleteFeatureGroupFromFeatureStoreWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete specific featuregroup from a specific featurestore (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFeaturegroupContents
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeaturegroupContentsCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/clear"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeaturegroupContentsValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling deleteFeaturegroupContents(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteFeaturegroupContents(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteFeaturegroupContents(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFeaturegroupContentsCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO deleteFeaturegroupContents(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = deleteFeaturegroupContentsWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> deleteFeaturegroupContentsWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeaturegroupContentsValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete featuregroup contents (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeaturegroupContentsAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeaturegroupContentsValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteStorageConnectorWithTypeAndId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO deleteStorageConnectorWithTypeAndId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = deleteStorageConnectorWithTypeAndIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> deleteStorageConnectorWithTypeAndIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTrainingDataset
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTrainingDatasetCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTrainingDatasetValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling deleteTrainingDataset(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTrainingDatasetCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO deleteTrainingDataset(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = deleteTrainingDatasetWithHttpInfo(trainingdatasetid, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> deleteTrainingDatasetWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTrainingDatasetAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupFromFeatureStore
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO getFeatureGroupFromFeatureStore(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = getFeatureGroupFromFeatureStoreWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> getFeatureGroupFromFeatureStoreWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific featuregroup from a specific featurestore (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupPreview
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupPreviewCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/preview"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupPreviewValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupPreview(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupPreview(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupPreview(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupPreviewCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Preview feature data of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturegroupPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturegroupPreview> getFeatureGroupPreview(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturegroupPreview>> resp = getFeatureGroupPreviewWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Preview feature data of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturegroupPreview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturegroupPreview>> getFeatureGroupPreviewWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupPreviewValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturegroupPreview>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview feature data of a featuregroup (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupPreviewAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturegroupPreview>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupPreviewValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturegroupPreview>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupSchema
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupSchemaCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/schema"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupSchemaValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupSchema(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupSchema(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupSchema(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupSchemaCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the SQL schema of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return RowValueQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowValueQueryResult getFeatureGroupSchema(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<RowValueQueryResult> resp = getFeatureGroupSchemaWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the SQL schema of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;RowValueQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowValueQueryResult> getFeatureGroupSchemaWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupSchemaValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<RowValueQueryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the SQL schema of a featuregroup (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupSchemaAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<RowValueQueryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupSchemaValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowValueQueryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturegroupsForFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeaturegroupsForFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturegroupsForFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of feature groups for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturegroupDTO> getFeaturegroupsForFeaturestore(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturegroupDTO>> resp = getFeaturegroupsForFeaturestoreWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the list of feature groups for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturegroupDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturegroupDTO>> getFeaturegroupsForFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturegroupDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of feature groups for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturegroupDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturegroupDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturestore
     * @param featurestoreId Id of the featurestore (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturestoreCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get featurestore with specific Id
     * 
     * @param featurestoreId Id of the featurestore (required)
     * @param projectId  (required)
     * @return FeaturestoreDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreDTO getFeaturestore(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreDTO> resp = getFeaturestoreWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get featurestore with specific Id
     * 
     * @param featurestoreId Id of the featurestore (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreDTO> getFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturestoreValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get featurestore with specific Id (asynchronously)
     * 
     * @param featurestoreId Id of the featurestore (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreAsync(Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturestoreValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturestoreByName
     * @param featurestoreName Id of the featurestore (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreByNameCall(String featurestoreName, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/getByName/{featurestoreName}"
            .replaceAll("\\{" + "featurestoreName" + "\\}", apiClient.escapeString(featurestoreName.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturestoreByNameValidateBeforeCall(String featurestoreName, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreName' is set
        if (featurestoreName == null) {
            throw new ApiException("Missing the required parameter 'featurestoreName' when calling getFeaturestoreByName(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturestoreByName(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturestoreByNameCall(featurestoreName, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get featurestore with specific name
     * 
     * @param featurestoreName Id of the featurestore (required)
     * @param projectId  (required)
     * @return FeaturestoreDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreDTO getFeaturestoreByName(String featurestoreName, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreDTO> resp = getFeaturestoreByNameWithHttpInfo(featurestoreName, projectId);
        return resp.getData();
    }

    /**
     * Get featurestore with specific name
     * 
     * @param featurestoreName Id of the featurestore (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreDTO> getFeaturestoreByNameWithHttpInfo(String featurestoreName, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturestoreByNameValidateBeforeCall(featurestoreName, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get featurestore with specific name (asynchronously)
     * 
     * @param featurestoreName Id of the featurestore (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreByNameAsync(String featurestoreName, Integer projectId, final ApiCallback<FeaturestoreDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturestoreByNameValidateBeforeCall(featurestoreName, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturestoreId
     * @param featurestoreName  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreIdCall(String featurestoreName, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreName}/metadata"
            .replaceAll("\\{" + "featurestoreName" + "\\}", apiClient.escapeString(featurestoreName.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturestoreIdValidateBeforeCall(String featurestoreName, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreName' is set
        if (featurestoreName == null) {
            throw new ApiException("Missing the required parameter 'featurestoreName' when calling getFeaturestoreId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturestoreId(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturestoreIdCall(featurestoreName, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get featurestore Metadata
     * 
     * @param featurestoreName  (required)
     * @param projectId  (required)
     * @return FeaturestoreClientSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreClientSettingsDTO getFeaturestoreId(String featurestoreName, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreClientSettingsDTO> resp = getFeaturestoreIdWithHttpInfo(featurestoreName, projectId);
        return resp.getData();
    }

    /**
     * Get featurestore Metadata
     * 
     * @param featurestoreName  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreClientSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreClientSettingsDTO> getFeaturestoreIdWithHttpInfo(String featurestoreName, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturestoreIdValidateBeforeCall(featurestoreName, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreClientSettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get featurestore Metadata (asynchronously)
     * 
     * @param featurestoreName  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreIdAsync(String featurestoreName, Integer projectId, final ApiCallback<FeaturestoreClientSettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturestoreIdValidateBeforeCall(featurestoreName, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreClientSettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturestoreSettings
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreSettingsCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/settings"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturestoreSettingsValidateBeforeCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturestoreSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturestoreSettingsCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get featurestore settings
     * 
     * @param projectId  (required)
     * @return FeaturestoreClientSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreClientSettingsDTO getFeaturestoreSettings(Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreClientSettingsDTO> resp = getFeaturestoreSettingsWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get featurestore settings
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreClientSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreClientSettingsDTO> getFeaturestoreSettingsWithHttpInfo(Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturestoreSettingsValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreClientSettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get featurestore settings (asynchronously)
     * 
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoreSettingsAsync(Integer projectId, final ApiCallback<FeaturestoreClientSettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturestoreSettingsValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreClientSettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturestores
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoresCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturestoresValidateBeforeCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturestores(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturestoresCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of feature stores for the project
     * 
     * @param projectId  (required)
     * @return List&lt;FeaturestoreDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturestoreDTO> getFeaturestores(Integer projectId) throws ApiException {
        ApiResponse<List<FeaturestoreDTO>> resp = getFeaturestoresWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get the list of feature stores for the project
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturestoreDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturestoreDTO>> getFeaturestoresWithHttpInfo(Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturestoresValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturestoreDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of feature stores for the project (asynchronously)
     * 
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturestoresAsync(Integer projectId, final ApiCallback<List<FeaturestoreDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturestoresValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturestoreDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnlineFeaturestoreStorageConnector
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/onlinefeaturestore"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getOnlineFeaturestoreStorageConnector(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getOnlineFeaturestoreStorageConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get online featurestore storage connector for this feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO getOnlineFeaturestoreStorageConnector(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = getOnlineFeaturestoreStorageConnectorWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get online featurestore storage connector for this feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> getOnlineFeaturestoreStorageConnectorWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get online featurestore storage connector for this feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorAsync(Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectorWithId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorWithIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorWithIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectorWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorWithIdCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO getStorageConnectorWithId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = getStorageConnectorWithIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> getStorageConnectorWithIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorWithIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectors
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorsValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectors(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectors(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorsCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage connectors of a feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturestoreStorageConnectorDTO> getStorageConnectors(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturestoreStorageConnectorDTO>> resp = getStorageConnectorsWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get all storage connectors of a feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturestoreStorageConnectorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturestoreStorageConnectorDTO>> getStorageConnectorsWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorsValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage connectors of a feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturestoreStorageConnectorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorsValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectorsOfType
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsOfTypeCall(String connectorType, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorsOfTypeValidateBeforeCall(String connectorType, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getStorageConnectorsOfType(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectorsOfType(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectorsOfType(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeCall(connectorType, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage connectors of a specific type of a feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturestoreStorageConnectorDTO> getStorageConnectorsOfType(String connectorType, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturestoreStorageConnectorDTO>> resp = getStorageConnectorsOfTypeWithHttpInfo(connectorType, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get all storage connectors of a specific type of a feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturestoreStorageConnectorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturestoreStorageConnectorDTO>> getStorageConnectorsOfTypeWithHttpInfo(String connectorType, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeValidateBeforeCall(connectorType, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage connectors of a specific type of a feature store (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsOfTypeAsync(String connectorType, Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturestoreStorageConnectorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeValidateBeforeCall(connectorType, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainingDatasetWithId
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetWithIdCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainingDatasetWithIdValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling getTrainingDatasetWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getTrainingDatasetWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTrainingDatasetWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = getTrainingDatasetWithIdCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO getTrainingDatasetWithId(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = getTrainingDatasetWithIdWithHttpInfo(trainingdatasetid, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> getTrainingDatasetWithIdWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainingDatasetWithIdValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetWithIdAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainingDatasetWithIdValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainingDatasetsForFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getTrainingDatasetsForFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTrainingDatasetsForFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of training datasets for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrainingDatasetDTO> getTrainingDatasetsForFeaturestore(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<TrainingDatasetDTO>> resp = getTrainingDatasetsForFeaturestoreWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the list of training datasets for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;TrainingDatasetDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrainingDatasetDTO>> getTrainingDatasetsForFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<TrainingDatasetDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of training datasets for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<TrainingDatasetDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TrainingDatasetDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getValidationResult
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getValidationResultCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/result"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featureStoreId" + "\\}", apiClient.escapeString(featureStoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidationResultValidateBeforeCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getValidationResult(Async)");
        }
        // verify the required parameter 'featureStoreId' is set
        if (featureStoreId == null) {
            throw new ApiException("Missing the required parameter 'featureStoreId' when calling getValidationResult(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getValidationResult(Async)");
        }
        
        com.squareup.okhttp.Call call = getValidationResultCall(featuregroupId, featureStoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch the result of a Deequ data validation job
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @return ValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResult getValidationResult(Integer featuregroupId, Integer featureStoreId, Integer projectId) throws ApiException {
        ApiResponse<ValidationResult> resp = getValidationResultWithHttpInfo(featuregroupId, featureStoreId, projectId);
        return resp.getData();
    }

    /**
     * Fetch the result of a Deequ data validation job
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;ValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResult> getValidationResultWithHttpInfo(Integer featuregroupId, Integer featureStoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getValidationResultValidateBeforeCall(featuregroupId, featureStoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the result of a Deequ data validation job (asynchronously)
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getValidationResultAsync(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ApiCallback<ValidationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidationResultValidateBeforeCall(featuregroupId, featureStoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getValidationRules
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getValidationRulesCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/rules"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featureStoreId" + "\\}", apiClient.escapeString(featureStoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidationRulesValidateBeforeCall(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getValidationRules(Async)");
        }
        // verify the required parameter 'featureStoreId' is set
        if (featureStoreId == null) {
            throw new ApiException("Missing the required parameter 'featureStoreId' when calling getValidationRules(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getValidationRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getValidationRulesCall(featuregroupId, featureStoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get previously stored Deequ validation rules
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @return ConstraintGroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConstraintGroupDTO getValidationRules(Integer featuregroupId, Integer featureStoreId, Integer projectId) throws ApiException {
        ApiResponse<ConstraintGroupDTO> resp = getValidationRulesWithHttpInfo(featuregroupId, featureStoreId, projectId);
        return resp.getData();
    }

    /**
     * Get previously stored Deequ validation rules
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;ConstraintGroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConstraintGroupDTO> getValidationRulesWithHttpInfo(Integer featuregroupId, Integer featureStoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getValidationRulesValidateBeforeCall(featuregroupId, featureStoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<ConstraintGroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get previously stored Deequ validation rules (asynchronously)
     * 
     * @param featuregroupId  (required)
     * @param featureStoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getValidationRulesAsync(Integer featuregroupId, Integer featureStoreId, Integer projectId, final ApiCallback<ConstraintGroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidationRulesValidateBeforeCall(featuregroupId, featureStoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConstraintGroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newFeaturestoreUtil
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newFeaturestoreUtilCall(Integer projectId, FeaturestoreUtilJobDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/util"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newFeaturestoreUtilValidateBeforeCall(Integer projectId, FeaturestoreUtilJobDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling newFeaturestoreUtil(Async)");
        }
        
        com.squareup.okhttp.Call call = newFeaturestoreUtilCall(projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload json input for featurestore-util jobs
     * 
     * @param projectId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void newFeaturestoreUtil(Integer projectId, FeaturestoreUtilJobDTO body) throws ApiException {
        newFeaturestoreUtilWithHttpInfo(projectId, body);
    }

    /**
     * Upload json input for featurestore-util jobs
     * 
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> newFeaturestoreUtilWithHttpInfo(Integer projectId, FeaturestoreUtilJobDTO body) throws ApiException {
        com.squareup.okhttp.Call call = newFeaturestoreUtilValidateBeforeCall(projectId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload json input for featurestore-util jobs (asynchronously)
     * 
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newFeaturestoreUtilAsync(Integer projectId, FeaturestoreUtilJobDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newFeaturestoreUtilValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for syncWithFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncWithFeaturestoreCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/sync"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncWithFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling syncWithFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling syncWithFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = syncWithFeaturestoreCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Synchornize Hive Table with the feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO syncWithFeaturestore(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = syncWithFeaturestoreWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Synchornize Hive Table with the feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> syncWithFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        com.squareup.okhttp.Call call = syncWithFeaturestoreValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synchornize Hive Table with the feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncWithFeaturestoreAsync(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncWithFeaturestoreValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFeaturegroup
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFeaturegroupCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateMetadata", updateMetadata));
        if (updateStats != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStats", updateStats));
        if (enableOnline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enableOnline", enableOnline));
        if (disableOnline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disableOnline", disableOnline));
        if (updateStatsSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStatsSettings", updateStatsSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFeaturegroupValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling updateFeaturegroup(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateFeaturegroup(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateFeaturegroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFeaturegroupCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO updateFeaturegroup(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = updateFeaturegroupWithHttpInfo(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings);
        return resp.getData();
    }

    /**
     * Update featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> updateFeaturegroupWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateFeaturegroupValidateBeforeCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update featuregroup contents (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFeaturegroupAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFeaturegroupValidateBeforeCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStorageConnectorWithId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStorageConnectorWithIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStorageConnectorWithIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateStorageConnectorWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = updateStorageConnectorWithIdCall(connectorType, connectorId, featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO updateStorageConnectorWithId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = updateStorageConnectorWithIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> updateStorageConnectorWithIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        com.squareup.okhttp.Call call = updateStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStorageConnectorWithIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrainingDataset
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTrainingDatasetCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateMetadata", updateMetadata));
        if (updateStats != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStats", updateStats));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTrainingDatasetValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling updateTrainingDataset(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTrainingDatasetCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO updateTrainingDataset(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = updateTrainingDatasetWithHttpInfo(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats);
        return resp.getData();
    }

    /**
     * Update a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> updateTrainingDatasetWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats) throws ApiException {
        com.squareup.okhttp.Call call = updateTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTrainingDatasetAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
