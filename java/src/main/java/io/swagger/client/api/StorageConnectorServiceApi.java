/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FeaturestoreStorageConnectorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageConnectorServiceApi {
    private ApiClient apiClient;

    public StorageConnectorServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageConnectorServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNewStorageConnectorWithType
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewStorageConnectorWithTypeCall(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewStorageConnectorWithTypeValidateBeforeCall(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling createNewStorageConnectorWithType(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createNewStorageConnectorWithType(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createNewStorageConnectorWithType(Async)");
        }
        
        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeCall(connectorType, featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new storage connector for the feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO createNewStorageConnectorWithType(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = createNewStorageConnectorWithTypeWithHttpInfo(connectorType, featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create a new storage connector for the feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> createNewStorageConnectorWithTypeWithHttpInfo(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeValidateBeforeCall(connectorType, featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new storage connector for the feature store (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewStorageConnectorWithTypeAsync(String connectorType, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewStorageConnectorWithTypeValidateBeforeCall(connectorType, featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteStorageConnectorWithTypeAndId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteStorageConnectorWithTypeAndId(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO deleteStorageConnectorWithTypeAndId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = deleteStorageConnectorWithTypeAndIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> deleteStorageConnectorWithTypeAndIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStorageConnectorWithTypeAndIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStorageConnectorWithTypeAndIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnlineFeaturestoreStorageConnector
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/onlinefeaturestore"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getOnlineFeaturestoreStorageConnector(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getOnlineFeaturestoreStorageConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get online featurestore storage connector for this feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO getOnlineFeaturestoreStorageConnector(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = getOnlineFeaturestoreStorageConnectorWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get online featurestore storage connector for this feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> getOnlineFeaturestoreStorageConnectorWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get online featurestore storage connector for this feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnlineFeaturestoreStorageConnectorAsync(Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnlineFeaturestoreStorageConnectorValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectorWithId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorWithIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorWithIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectorWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorWithIdCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO getStorageConnectorWithId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = getStorageConnectorWithIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> getStorageConnectorWithIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorWithIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectors
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorsValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectors(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectors(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorsCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage connectors of a feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturestoreStorageConnectorDTO> getStorageConnectors(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturestoreStorageConnectorDTO>> resp = getStorageConnectorsWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get all storage connectors of a feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturestoreStorageConnectorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturestoreStorageConnectorDTO>> getStorageConnectorsWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorsValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage connectors of a feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturestoreStorageConnectorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorsValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageConnectorsOfType
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsOfTypeCall(String connectorType, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageConnectorsOfTypeValidateBeforeCall(String connectorType, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getStorageConnectorsOfType(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getStorageConnectorsOfType(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStorageConnectorsOfType(Async)");
        }
        
        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeCall(connectorType, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage connectors of a specific type of a feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturestoreStorageConnectorDTO> getStorageConnectorsOfType(String connectorType, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturestoreStorageConnectorDTO>> resp = getStorageConnectorsOfTypeWithHttpInfo(connectorType, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get all storage connectors of a specific type of a feature store
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturestoreStorageConnectorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturestoreStorageConnectorDTO>> getStorageConnectorsOfTypeWithHttpInfo(String connectorType, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeValidateBeforeCall(connectorType, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage connectors of a specific type of a feature store (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageConnectorsOfTypeAsync(String connectorType, Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturestoreStorageConnectorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageConnectorsOfTypeValidateBeforeCall(connectorType, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturestoreStorageConnectorDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStorageConnectorWithId
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStorageConnectorWithIdCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}"
            .replaceAll("\\{" + "connectorType" + "\\}", apiClient.escapeString(connectorType.toString()))
            .replaceAll("\\{" + "connectorId" + "\\}", apiClient.escapeString(connectorId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStorageConnectorWithIdValidateBeforeCall(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateStorageConnectorWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateStorageConnectorWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = updateStorageConnectorWithIdCall(connectorType, connectorId, featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturestoreStorageConnectorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturestoreStorageConnectorDTO updateStorageConnectorWithId(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        ApiResponse<FeaturestoreStorageConnectorDTO> resp = updateStorageConnectorWithIdWithHttpInfo(connectorType, connectorId, featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturestoreStorageConnectorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturestoreStorageConnectorDTO> updateStorageConnectorWithIdWithHttpInfo(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body) throws ApiException {
        com.squareup.okhttp.Call call = updateStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a storage connector with a specific id and type from a featurestore (asynchronously)
     * 
     * @param connectorType storage connector type (required)
     * @param connectorId Id of the storage connector (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStorageConnectorWithIdAsync(String connectorType, Integer connectorId, Integer featurestoreId, Integer projectId, FeaturestoreStorageConnectorDTO body, final ApiCallback<FeaturestoreStorageConnectorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStorageConnectorWithIdValidateBeforeCall(connectorType, connectorId, featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturestoreStorageConnectorDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
