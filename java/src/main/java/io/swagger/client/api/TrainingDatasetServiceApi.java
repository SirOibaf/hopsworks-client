/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TrainingDatasetDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrainingDatasetServiceApi {
    private ApiClient apiClient;

    public TrainingDatasetServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrainingDatasetServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTrainingDataset
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTrainingDatasetCall(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTrainingDatasetValidateBeforeCall(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = createTrainingDatasetCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create training dataset for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO createTrainingDataset(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = createTrainingDatasetWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create training dataset for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> createTrainingDatasetWithHttpInfo(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createTrainingDatasetValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create training dataset for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTrainingDatasetAsync(Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTrainingDatasetValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTrainingDataset
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTrainingDatasetCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTrainingDatasetValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling deleteTrainingDataset(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTrainingDatasetCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO deleteTrainingDataset(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = deleteTrainingDatasetWithHttpInfo(trainingdatasetid, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> deleteTrainingDatasetWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTrainingDatasetAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainingDatasetWithId
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetWithIdCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainingDatasetWithIdValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling getTrainingDatasetWithId(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getTrainingDatasetWithId(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTrainingDatasetWithId(Async)");
        }
        
        com.squareup.okhttp.Call call = getTrainingDatasetWithIdCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO getTrainingDatasetWithId(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = getTrainingDatasetWithIdWithHttpInfo(trainingdatasetid, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> getTrainingDatasetWithIdWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainingDatasetWithIdValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetWithIdAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainingDatasetWithIdValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainingDatasetsForFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getTrainingDatasetsForFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTrainingDatasetsForFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of training datasets for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrainingDatasetDTO> getTrainingDatasetsForFeaturestore(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<TrainingDatasetDTO>> resp = getTrainingDatasetsForFeaturestoreWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the list of training datasets for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;TrainingDatasetDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrainingDatasetDTO>> getTrainingDatasetsForFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<TrainingDatasetDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of training datasets for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainingDatasetsForFeaturestoreAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<TrainingDatasetDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainingDatasetsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TrainingDatasetDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrainingDataset
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTrainingDatasetCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}"
            .replaceAll("\\{" + "trainingdatasetid" + "\\}", apiClient.escapeString(trainingdatasetid.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateMetadata", updateMetadata));
        if (updateStats != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStats", updateStats));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTrainingDatasetValidateBeforeCall(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'trainingdatasetid' is set
        if (trainingdatasetid == null) {
            throw new ApiException("Missing the required parameter 'trainingdatasetid' when calling updateTrainingDataset(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateTrainingDataset(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTrainingDataset(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTrainingDatasetCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @return TrainingDatasetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrainingDatasetDTO updateTrainingDataset(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats) throws ApiException {
        ApiResponse<TrainingDatasetDTO> resp = updateTrainingDatasetWithHttpInfo(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats);
        return resp.getData();
    }

    /**
     * Update a training datasets with a specific id from a featurestore
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @return ApiResponse&lt;TrainingDatasetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrainingDatasetDTO> updateTrainingDatasetWithHttpInfo(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats) throws ApiException {
        com.squareup.okhttp.Call call = updateTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, null, null);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a training datasets with a specific id from a featurestore (asynchronously)
     * 
     * @param trainingdatasetid Id of the training dataset (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTrainingDatasetAsync(Integer trainingdatasetid, Integer featurestoreId, Integer projectId, TrainingDatasetDTO body, Boolean updateMetadata, Boolean updateStats, final ApiCallback<TrainingDatasetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTrainingDatasetValidateBeforeCall(trainingdatasetid, featurestoreId, projectId, body, updateMetadata, updateStats, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrainingDatasetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
