/*
 * Hopsworks api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FeaturegroupDTO;
import io.swagger.client.model.FeaturegroupPreview;
import io.swagger.client.model.RowValueQueryResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeaturegroupServiceApi {
    private ApiClient apiClient;

    public FeaturegroupServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeaturegroupServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFeaturegroup
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFeaturegroupCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFeaturegroupValidateBeforeCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling createFeaturegroup(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createFeaturegroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createFeaturegroupCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create feature group in a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO createFeaturegroup(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = createFeaturegroupWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Create feature group in a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> createFeaturegroupWithHttpInfo(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        com.squareup.okhttp.Call call = createFeaturegroupValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create feature group in a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFeaturegroupAsync(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFeaturegroupValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFeatureGroupFromFeatureStore
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteFeatureGroupFromFeatureStore(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO deleteFeatureGroupFromFeatureStore(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = deleteFeatureGroupFromFeatureStoreWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> deleteFeatureGroupFromFeatureStoreWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete specific featuregroup from a specific featurestore (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureGroupFromFeatureStoreAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFeaturegroupContents
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeaturegroupContentsCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/clear"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeaturegroupContentsValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling deleteFeaturegroupContents(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling deleteFeaturegroupContents(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteFeaturegroupContents(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFeaturegroupContentsCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO deleteFeaturegroupContents(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = deleteFeaturegroupContentsWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Delete featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> deleteFeaturegroupContentsWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeaturegroupContentsValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete featuregroup contents (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeaturegroupContentsAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeaturegroupContentsValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupFromFeatureStore
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupFromFeatureStore(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO getFeatureGroupFromFeatureStore(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = getFeatureGroupFromFeatureStoreWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get specific featuregroup from a specific featurestore
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> getFeatureGroupFromFeatureStoreWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific featuregroup from a specific featurestore (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupFromFeatureStoreAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupFromFeatureStoreValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupPreview
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupPreviewCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/preview"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupPreviewValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupPreview(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupPreview(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupPreview(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupPreviewCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Preview feature data of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturegroupPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturegroupPreview> getFeatureGroupPreview(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturegroupPreview>> resp = getFeatureGroupPreviewWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Preview feature data of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturegroupPreview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturegroupPreview>> getFeatureGroupPreviewWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupPreviewValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturegroupPreview>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview feature data of a featuregroup (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupPreviewAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturegroupPreview>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupPreviewValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturegroupPreview>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureGroupSchema
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupSchemaCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/schema"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureGroupSchemaValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling getFeatureGroupSchema(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeatureGroupSchema(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeatureGroupSchema(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureGroupSchemaCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the SQL schema of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return RowValueQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowValueQueryResult getFeatureGroupSchema(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<RowValueQueryResult> resp = getFeatureGroupSchemaWithHttpInfo(featuregroupId, featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the SQL schema of a featuregroup
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;RowValueQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowValueQueryResult> getFeatureGroupSchemaWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureGroupSchemaValidateBeforeCall(featuregroupId, featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<RowValueQueryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the SQL schema of a featuregroup (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureGroupSchemaAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, final ApiCallback<RowValueQueryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureGroupSchemaValidateBeforeCall(featuregroupId, featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowValueQueryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturegroupsForFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling getFeaturegroupsForFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFeaturegroupsForFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreCall(featurestoreId, projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of feature groups for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return List&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FeaturegroupDTO> getFeaturegroupsForFeaturestore(Integer featurestoreId, Integer projectId) throws ApiException {
        ApiResponse<List<FeaturegroupDTO>> resp = getFeaturegroupsForFeaturestoreWithHttpInfo(featurestoreId, projectId);
        return resp.getData();
    }

    /**
     * Get the list of feature groups for a featurestore
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;FeaturegroupDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FeaturegroupDTO>> getFeaturegroupsForFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FeaturegroupDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of feature groups for a featurestore (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturegroupsForFeaturestoreAsync(Integer featurestoreId, Integer projectId, final ApiCallback<List<FeaturegroupDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturegroupsForFeaturestoreValidateBeforeCall(featurestoreId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FeaturegroupDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncWithFeaturestore
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncWithFeaturestoreCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/sync"
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncWithFeaturestoreValidateBeforeCall(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling syncWithFeaturestore(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling syncWithFeaturestore(Async)");
        }
        
        com.squareup.okhttp.Call call = syncWithFeaturestoreCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Synchornize Hive Table with the feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO syncWithFeaturestore(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = syncWithFeaturestoreWithHttpInfo(featurestoreId, projectId, body);
        return resp.getData();
    }

    /**
     * Synchornize Hive Table with the feature store
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> syncWithFeaturestoreWithHttpInfo(Integer featurestoreId, Integer projectId, FeaturegroupDTO body) throws ApiException {
        com.squareup.okhttp.Call call = syncWithFeaturestoreValidateBeforeCall(featurestoreId, projectId, body, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synchornize Hive Table with the feature store (asynchronously)
     * 
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncWithFeaturestoreAsync(Integer featurestoreId, Integer projectId, FeaturegroupDTO body, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncWithFeaturestoreValidateBeforeCall(featurestoreId, projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFeaturegroup
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFeaturegroupCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}"
            .replaceAll("\\{" + "featuregroupId" + "\\}", apiClient.escapeString(featuregroupId.toString()))
            .replaceAll("\\{" + "featurestoreId" + "\\}", apiClient.escapeString(featurestoreId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateMetadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateMetadata", updateMetadata));
        if (updateStats != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStats", updateStats));
        if (enableOnline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enableOnline", enableOnline));
        if (disableOnline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disableOnline", disableOnline));
        if (updateStatsSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateStatsSettings", updateStatsSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFeaturegroupValidateBeforeCall(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'featuregroupId' is set
        if (featuregroupId == null) {
            throw new ApiException("Missing the required parameter 'featuregroupId' when calling updateFeaturegroup(Async)");
        }
        // verify the required parameter 'featurestoreId' is set
        if (featurestoreId == null) {
            throw new ApiException("Missing the required parameter 'featurestoreId' when calling updateFeaturegroup(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateFeaturegroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFeaturegroupCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @return FeaturegroupDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeaturegroupDTO updateFeaturegroup(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings) throws ApiException {
        ApiResponse<FeaturegroupDTO> resp = updateFeaturegroupWithHttpInfo(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings);
        return resp.getData();
    }

    /**
     * Update featuregroup contents
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @return ApiResponse&lt;FeaturegroupDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeaturegroupDTO> updateFeaturegroupWithHttpInfo(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateFeaturegroupValidateBeforeCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, null, null);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update featuregroup contents (asynchronously)
     * 
     * @param featuregroupId Id of the featuregroup (required)
     * @param featurestoreId  (required)
     * @param projectId  (required)
     * @param body  (optional)
     * @param updateMetadata updateMetadata (optional)
     * @param updateStats updateStats (optional)
     * @param enableOnline enableOnline (optional)
     * @param disableOnline disableOnline (optional)
     * @param updateStatsSettings updateStatsSettings (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFeaturegroupAsync(Integer featuregroupId, Integer featurestoreId, Integer projectId, FeaturegroupDTO body, Boolean updateMetadata, Boolean updateStats, Boolean enableOnline, Boolean disableOnline, Boolean updateStatsSettings, final ApiCallback<FeaturegroupDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFeaturegroupValidateBeforeCall(featuregroupId, featurestoreId, projectId, body, updateMetadata, updateStats, enableOnline, disableOnline, updateStatsSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeaturegroupDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
