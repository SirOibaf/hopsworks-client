# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from api.project_service_api import ProjectServiceApi  # noqa: E501
from swagger_client.rest import ApiException


class TestProjectServiceApi(unittest.TestCase):
    """ProjectServiceApi unit test stubs"""

    def setUp(self):
        self.api = api.project_service_api.ProjectServiceApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_accept_request(self):
        """Test case for accept_request

        """
        pass

    def test_add_acls_to_topic(self):
        """Test case for add_acls_to_topic

        Add a new ACL for a specified topic.  # noqa: E501
        """
        pass

    def test_add_members(self):
        """Test case for add_members

        """
        pass

    def test_add_topic_schema(self):
        """Test case for add_topic_schema

        """
        pass

    def test_add_validation_rules(self):
        """Test case for add_validation_rules

        Write Deequ validation rules to Filesystem so validation job can pick it up  # noqa: E501
        """
        pass

    def test_attach_template(self):
        """Test case for attach_template

        """
        pass

    def test_check_file_exist(self):
        """Test case for check_file_exist

        """
        pass

    def test_check_file_exists(self):
        """Test case for check_file_exists

        """
        pass

    def test_check_file_for_download(self):
        """Test case for check_file_for_download

        """
        pass

    def test_check_project_access(self):
        """Test case for check_project_access

        """
        pass

    def test_compose_dag(self):
        """Test case for compose_dag

        Generate an Airflow Python DAG file from a DAG definition  # noqa: E501
        """
        pass

    def test_convert_i_python_notebook(self):
        """Test case for convert_i_python_notebook

        """
        pass

    def test_copy_file(self):
        """Test case for copy_file

        """
        pass

    def test_count_file_blocks(self):
        """Test case for count_file_blocks

        """
        pass

    def test_create_data_set_dir(self):
        """Test case for create_data_set_dir

        """
        pass

    def test_create_data_set_dir1(self):
        """Test case for create_data_set_dir1

        """
        pass

    def test_create_featuregroup(self):
        """Test case for create_featuregroup

        Create feature group in a featurestore  # noqa: E501
        """
        pass

    def test_create_new_storage_connector_with_type(self):
        """Test case for create_new_storage_connector_with_type

        Create a new storage connector for the feature store  # noqa: E501
        """
        pass

    def test_create_or_update(self):
        """Test case for create_or_update

        Create or update a serving instance  # noqa: E501
        """
        pass

    def test_create_or_update_import_job(self):
        """Test case for create_or_update_import_job

        Configure job to import featuregroup  # noqa: E501
        """
        pass

    def test_create_or_update_training_dataset_job(self):
        """Test case for create_or_update_training_dataset_job

        Configure job to create training dataset  # noqa: E501
        """
        pass

    def test_create_project(self):
        """Test case for create_project

        """
        pass

    def test_create_top_level_data_set(self):
        """Test case for create_top_level_data_set

        """
        pass

    def test_create_topic(self):
        """Test case for create_topic

        Create a new Kafka topic.  # noqa: E501
        """
        pass

    def test_create_training_dataset(self):
        """Test case for create_training_dataset

        Create training dataset for a featurestore  # noqa: E501
        """
        pass

    def test_credentials(self):
        """Test case for credentials

        """
        pass

    def test_delete(self):
        """Test case for delete

        Delete commands for this environment  # noqa: E501
        """
        pass

    def test_delete1(self):
        """Test case for delete1

        Delete commands for this library  # noqa: E501
        """
        pass

    def test_delete2(self):
        """Test case for delete2

        Remove the python environment with the specified version for this project  # noqa: E501
        """
        pass

    def test_delete3(self):
        """Test case for delete3

        Delete the job with the given ID  # noqa: E501
        """
        pass

    def test_delete_feature_group_from_feature_store(self):
        """Test case for delete_feature_group_from_feature_store

        Delete specific featuregroup from a specific featurestore  # noqa: E501
        """
        pass

    def test_delete_featuregroup_contents(self):
        """Test case for delete_featuregroup_contents

        Delete featuregroup contents  # noqa: E501
        """
        pass

    def test_delete_schema(self):
        """Test case for delete_schema

        """
        pass

    def test_delete_serving(self):
        """Test case for delete_serving

        Delete a serving instance  # noqa: E501
        """
        pass

    def test_delete_storage_connector_with_type_and_id(self):
        """Test case for delete_storage_connector_with_type_and_id

        Delete storage connector with a specific id and type from a featurestore  # noqa: E501
        """
        pass

    def test_delete_training_dataset(self):
        """Test case for delete_training_dataset

        Delete a training datasets with a specific id from a featurestore  # noqa: E501
        """
        pass

    def test_download_certs(self):
        """Test case for download_certs

        """
        pass

    def test_download_dataset_hdfs(self):
        """Test case for download_dataset_hdfs

        """
        pass

    def test_download_dataset_kafka(self):
        """Test case for download_dataset_kafka

        """
        pass

    def test_download_from_hdfs(self):
        """Test case for download_from_hdfs

        """
        pass

    def test_example(self):
        """Test case for example

        """
        pass

    def test_execution(self):
        """Test case for execution

        Start/Stop a job  # noqa: E501
        """
        pass

    def test_file_preview(self):
        """Test case for file_preview

        """
        pass

    def test_find_all_by_id(self):
        """Test case for find_all_by_id

        Finds an activity in project.  # noqa: E501
        """
        pass

    def test_find_all_by_project(self):
        """Test case for find_all_by_project

        Finds activities in project.  # noqa: E501
        """
        pass

    def test_find_all_by_user(self):
        """Test case for find_all_by_user

        """
        pass

    def test_find_by_project_id(self):
        """Test case for find_by_project_id

        """
        pass

    def test_find_data_sets_in_project_id(self):
        """Test case for find_data_sets_in_project_id

        """
        pass

    def test_find_members_by_project_id(self):
        """Test case for find_members_by_project_id

        """
        pass

    def test_get(self):
        """Test case for get

        Get commands for this environment  # noqa: E501
        """
        pass

    def test_get1(self):
        """Test case for get1

        Get all commands for this library  # noqa: E501
        """
        pass

    def test_get2(self):
        """Test case for get2

        Get the python libraries installed in this environment  # noqa: E501
        """
        pass

    def test_get3(self):
        """Test case for get3

        Get the python environment for specific python version  # noqa: E501
        """
        pass

    def test_get_all(self):
        """Test case for get_all

        Get all python environments for this project  # noqa: E501
        """
        pass

    def test_get_all1(self):
        """Test case for get_all1

        Get a list of all jobs for this project  # noqa: E501
        """
        pass

    def test_get_all_notebook_servers_in_project(self):
        """Test case for get_all_notebook_servers_in_project

        """
        pass

    def test_get_all_projects(self):
        """Test case for get_all_projects

        """
        pass

    def test_get_app_info(self):
        """Test case for get_app_info

        """
        pass

    def test_get_by_name(self):
        """Test case for get_by_name

        Get commands by id  # noqa: E501
        """
        pass

    def test_get_by_name1(self):
        """Test case for get_by_name1

        Get command by id  # noqa: E501
        """
        pass

    def test_get_by_name2(self):
        """Test case for get_by_name2

        Get the a python library installed in this environment  # noqa: E501
        """
        pass

    def test_get_current_multiplicator(self):
        """Test case for get_current_multiplicator

        """
        pass

    def test_get_dataset_info(self):
        """Test case for get_dataset_info

        """
        pass

    def test_get_dataset_info1(self):
        """Test case for get_dataset_info1

        """
        pass

    def test_get_dir_content(self):
        """Test case for get_dir_content

        """
        pass

    def test_get_execution(self):
        """Test case for get_execution

        Find Execution by Id  # noqa: E501
        """
        pass

    def test_get_executions(self):
        """Test case for get_executions

        Get a list of executions for the job.  # noqa: E501
        """
        pass

    def test_get_extended_details(self):
        """Test case for get_extended_details

        """
        pass

    def test_get_feature_group_from_feature_store(self):
        """Test case for get_feature_group_from_feature_store

        Get specific featuregroup from a specific featurestore  # noqa: E501
        """
        pass

    def test_get_feature_group_preview(self):
        """Test case for get_feature_group_preview

        Preview feature data of a featuregroup  # noqa: E501
        """
        pass

    def test_get_feature_group_schema(self):
        """Test case for get_feature_group_schema

        Get the SQL schema of a featuregroup  # noqa: E501
        """
        pass

    def test_get_featuregroups_for_featurestore(self):
        """Test case for get_featuregroups_for_featurestore

        Get the list of feature groups for a featurestore  # noqa: E501
        """
        pass

    def test_get_featurestore(self):
        """Test case for get_featurestore

        Get featurestore with specific Id  # noqa: E501
        """
        pass

    def test_get_featurestore_by_name(self):
        """Test case for get_featurestore_by_name

        Get featurestore with specific name  # noqa: E501
        """
        pass

    def test_get_featurestore_id(self):
        """Test case for get_featurestore_id

        Get featurestore Metadata  # noqa: E501
        """
        pass

    def test_get_featurestore_settings(self):
        """Test case for get_featurestore_settings

        Get featurestore settings  # noqa: E501
        """
        pass

    def test_get_featurestores(self):
        """Test case for get_featurestores

        Get the list of feature stores for the project  # noqa: E501
        """
        pass

    def test_get_file(self):
        """Test case for get_file

        """
        pass

    def test_get_git_status_of_jupyter_repo(self):
        """Test case for get_git_status_of_jupyter_repo

        """
        pass

    def test_get_job(self):
        """Test case for get_job

        Get the job with requested ID  # noqa: E501
        """
        pass

    def test_get_job_ui(self):
        """Test case for get_job_ui

        """
        pass

    def test_get_log(self):
        """Test case for get_log

        Retrieve log of given execution and type  # noqa: E501
        """
        pass

    def test_get_more_info(self):
        """Test case for get_more_info

        """
        pass

    def test_get_more_info1(self):
        """Test case for get_more_info1

        """
        pass

    def test_get_more_info2(self):
        """Test case for get_more_info2

        """
        pass

    def test_get_online_featurestore_storage_connector(self):
        """Test case for get_online_featurestore_storage_connector

        Get online featurestore storage connector for this feature store  # noqa: E501
        """
        pass

    def test_get_pia(self):
        """Test case for get_pia

        """
        pass

    def test_get_project_by_name(self):
        """Test case for get_project_by_name

        """
        pass

    def test_get_project_contents(self):
        """Test case for get_project_contents

        """
        pass

    def test_get_project_shared_with(self):
        """Test case for get_project_shared_with

        """
        pass

    def test_get_readme_by_inode_id(self):
        """Test case for get_readme_by_inode_id

        """
        pass

    def test_get_remote_git_branches(self):
        """Test case for get_remote_git_branches

        """
        pass

    def test_get_schema(self):
        """Test case for get_schema

        """
        pass

    def test_get_schema_content(self):
        """Test case for get_schema_content

        """
        pass

    def test_get_serving(self):
        """Test case for get_serving

        Get info about a serving instance for the project  # noqa: E501
        """
        pass

    def test_get_servings(self):
        """Test case for get_servings

        Get the list of serving instances for the project  # noqa: E501
        """
        pass

    def test_get_storage_connector_with_id(self):
        """Test case for get_storage_connector_with_id

        Get a storage connector with a specific id and type from a featurestore  # noqa: E501
        """
        pass

    def test_get_storage_connectors(self):
        """Test case for get_storage_connectors

        Get all storage connectors of a feature store  # noqa: E501
        """
        pass

    def test_get_storage_connectors_of_type(self):
        """Test case for get_storage_connectors_of_type

        Get all storage connectors of a specific type of a feature store  # noqa: E501
        """
        pass

    def test_get_tensor_board(self):
        """Test case for get_tensor_board

        Get the running TensorBoard of the logged in user in this project  # noqa: E501
        """
        pass

    def test_get_tensor_board_urls(self):
        """Test case for get_tensor_board_urls

        """
        pass

    def test_get_topic(self):
        """Test case for get_topic

        Get Kafka topic details.  # noqa: E501
        """
        pass

    def test_get_topic_acl(self):
        """Test case for get_topic_acl

        Get ACL metadata specified by id.  # noqa: E501
        """
        pass

    def test_get_topic_acls(self):
        """Test case for get_topic_acls

        Get all ACLs for a specified topic.  # noqa: E501
        """
        pass

    def test_get_topics(self):
        """Test case for get_topics

        Retrieve Kafka topics metadata .  # noqa: E501
        """
        pass

    def test_get_training_dataset_with_id(self):
        """Test case for get_training_dataset_with_id

        Get a training datasets with a specific id from a featurestore  # noqa: E501
        """
        pass

    def test_get_training_datasets_for_featurestore(self):
        """Test case for get_training_datasets_for_featurestore

        Get the list of training datasets for a featurestore  # noqa: E501
        """
        pass

    def test_get_validation_result(self):
        """Test case for get_validation_result

        Fetch the result of a Deequ data validation job  # noqa: E501
        """
        pass

    def test_get_validation_rules(self):
        """Test case for get_validation_rules

        Get previously stored Deequ validation rules  # noqa: E501
        """
        pass

    def test_get_yarn_ui(self):
        """Test case for get_yarn_ui

        """
        pass

    def test_infer(self):
        """Test case for infer

        Make inference  # noqa: E501
        """
        pass

    def test_inspect(self):
        """Test case for inspect

        Inspect Spark user program and return SparkJobConfiguration  # noqa: E501
        """
        pass

    def test_install(self):
        """Test case for install

        Install a python library in the environment  # noqa: E501
        """
        pass

    def test_is_dir(self):
        """Test case for is_dir

        """
        pass

    def test_is_dir1(self):
        """Test case for is_dir1

        """
        pass

    def test_is_running(self):
        """Test case for is_running

        """
        pass

    def test_list_schemas_for_topics(self):
        """Test case for list_schemas_for_topics

        """
        pass

    def test_livy_sessions(self):
        """Test case for livy_sessions

        """
        pass

    def test_move_file(self):
        """Test case for move_file

        """
        pass

    def test_new_featurestore_util(self):
        """Test case for new_featurestore_util

        Upload json input for featurestore-util jobs  # noqa: E501
        """
        pass

    def test_post(self):
        """Test case for post

        Create an environment from version or export an environment as yaml file  # noqa: E501
        """
        pass

    def test_post_yml(self):
        """Test case for post_yml

        Create an environment from yaml file  # noqa: E501
        """
        pass

    def test_publish(self):
        """Test case for publish

        """
        pass

    def test_put(self):
        """Test case for put

        Create or Update a Job.  # noqa: E501
        """
        pass

    def test_quotas_by_project_id(self):
        """Test case for quotas_by_project_id

        """
        pass

    def test_quotas_by_project_id1(self):
        """Test case for quotas_by_project_id1

        """
        pass

    def test_reject_request(self):
        """Test case for reject_request

        """
        pass

    def test_remove_acls_from_topic(self):
        """Test case for remove_acls_from_topic

        Remove ACL specified by id.  # noqa: E501
        """
        pass

    def test_remove_corrupted(self):
        """Test case for remove_corrupted

        """
        pass

    def test_remove_members_by_id(self):
        """Test case for remove_members_by_id

        """
        pass

    def test_remove_project_and_files(self):
        """Test case for remove_project_and_files

        """
        pass

    def test_remove_public(self):
        """Test case for remove_public

        """
        pass

    def test_remove_public1(self):
        """Test case for remove_public1

        """
        pass

    def test_remove_topic(self):
        """Test case for remove_topic

        Delete a Kafka topic.  # noqa: E501
        """
        pass

    def test_removedata_setdir(self):
        """Test case for removedata_setdir

        """
        pass

    def test_removedata_setdir1(self):
        """Test case for removedata_setdir1

        """
        pass

    def test_removefile(self):
        """Test case for removefile

        """
        pass

    def test_retry_log(self):
        """Test case for retry_log

        Retry log aggregation of given execution and type  # noqa: E501
        """
        pass

    def test_search(self):
        """Test case for search

        Search for libraries using conda or pip package managers  # noqa: E501
        """
        pass

    def test_secret_dir(self):
        """Test case for secret_dir

        Create project secret directory in Airflow home  # noqa: E501
        """
        pass

    def test_set_permissions(self):
        """Test case for set_permissions

        Set permissions (potentially with sticky bit) for datasets  # noqa: E501
        """
        pass

    def test_settings(self):
        """Test case for settings

        """
        pass

    def test_share(self):
        """Test case for share

        """
        pass

    def test_share_data_set(self):
        """Test case for share_data_set

        """
        pass

    def test_share_topic(self):
        """Test case for share_topic

        Share a Kafka topic with a project.  # noqa: E501
        """
        pass

    def test_show_manifest(self):
        """Test case for show_manifest

        """
        pass

    def test_start_download(self):
        """Test case for start_download

        """
        pass

    def test_start_notebook_server(self):
        """Test case for start_notebook_server

        """
        pass

    def test_start_or_stop(self):
        """Test case for start_or_stop

        Start or stop a Serving instance  # noqa: E501
        """
        pass

    def test_start_tensor_board(self):
        """Test case for start_tensor_board

        Start a new TensorBoard for the logged in user  # noqa: E501
        """
        pass

    def test_stop_livy_session(self):
        """Test case for stop_livy_session

        """
        pass

    def test_stop_notebook_server(self):
        """Test case for stop_notebook_server

        """
        pass

    def test_stop_tensor_board(self):
        """Test case for stop_tensor_board

        Stop the running TensorBoard for the logged in user  # noqa: E501
        """
        pass

    def test_store_airflow_jwt(self):
        """Test case for store_airflow_jwt

        Generate a JWT for Airflow usage and store it in project's secret directory in Airflow  # noqa: E501
        """
        pass

    def test_sync_with_featurestore(self):
        """Test case for sync_with_featurestore

        Synchornize Hive Table with the feature store  # noqa: E501
        """
        pass

    def test_test_method1(self):
        """Test case for test_method1

        """
        pass

    def test_topic_is_shared_to(self):
        """Test case for topic_is_shared_to

        Get list of projects that a topic has been shared with.  # noqa: E501
        """
        pass

    def test_uninstall(self):
        """Test case for uninstall

        Uninstall a python library from the environment  # noqa: E501
        """
        pass

    def test_unschedule_job(self):
        """Test case for unschedule_job

        Cancel a job's schedule.  # noqa: E501
        """
        pass

    def test_unshare_data_set(self):
        """Test case for unshare_data_set

        """
        pass

    def test_unshare_topic_from_project(self):
        """Test case for unshare_topic_from_project

        Unshare Kafka topic from a project (specified as destProjectId).  # noqa: E501
        """
        pass

    def test_unshare_topic_from_projects(self):
        """Test case for unshare_topic_from_projects

        Unshare Kafka topic from all projects.  # noqa: E501
        """
        pass

    def test_unzip(self):
        """Test case for unzip

        """
        pass

    def test_update(self):
        """Test case for update

        Update commands for this library  # noqa: E501
        """
        pass

    def test_update_featuregroup(self):
        """Test case for update_featuregroup

        Update featuregroup contents  # noqa: E501
        """
        pass

    def test_update_notebook_server(self):
        """Test case for update_notebook_server

        """
        pass

    def test_update_pia(self):
        """Test case for update_pia

        """
        pass

    def test_update_project(self):
        """Test case for update_project

        """
        pass

    def test_update_role_by_email(self):
        """Test case for update_role_by_email

        """
        pass

    def test_update_schedule(self):
        """Test case for update_schedule

        Create/Update job's schedule.  # noqa: E501
        """
        pass

    def test_update_schema_version(self):
        """Test case for update_schema_version

        """
        pass

    def test_update_storage_connector_with_id(self):
        """Test case for update_storage_connector_with_id

        Get a storage connector with a specific id and type from a featurestore  # noqa: E501
        """
        pass

    def test_update_topic_acls(self):
        """Test case for update_topic_acls

        Update ACL specified by id.  # noqa: E501
        """
        pass

    def test_update_training_dataset(self):
        """Test case for update_training_dataset

        Update a training datasets with a specific id from a featurestore  # noqa: E501
        """
        pass

    def test_upload_method1(self):
        """Test case for upload_method1

        """
        pass

    def test_validate_schema_for_topics(self):
        """Test case for validate_schema_for_topics

        """
        pass

    def test_zip(self):
        """Test case for zip

        """
        pass


if __name__ == '__main__':
    unittest.main()
