# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HopssiteServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_comment(self, public_ds_id, **kwargs):  # noqa: E501
        """add_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_comment(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_comment_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_comment_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def add_comment_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """add_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_comment_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `add_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dataset_issue(self, public_ds_id, **kwargs):  # noqa: E501
        """add_dataset_issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset_issue(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param DatasetIssueReqDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dataset_issue_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dataset_issue_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def add_dataset_issue_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """add_dataset_issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dataset_issue_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param DatasetIssueReqDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dataset_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `add_dataset_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/issue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_rating(self, public_ds_id, **kwargs):  # noqa: E501
        """add_rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_rating(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param RatingValueDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_rating_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_rating_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def add_rating_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """add_rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_rating_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :param RatingValueDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_rating" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `add_rating`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/rating', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_comment_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_comment_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
            return data

    def delete_comment_with_http_info(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_with_http_info(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'public_ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/comments/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_comments(self, public_ds_id, **kwargs):  # noqa: E501
        """get_all_comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_comments(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_comments_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_comments_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def get_all_comments_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """get_all_comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_comments_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `get_all_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_datasets(self, filter, **kwargs):  # noqa: E501
        """get_all_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_datasets(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_datasets_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_datasets_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_all_datasets_with_http_info(self, filter, **kwargs):  # noqa: E501
        """get_all_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_datasets_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_all_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_id(self, **kwargs):  # noqa: E501
        """get_cluster_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_cluster_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/clusterId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset(self, public_ds_id, **kwargs):  # noqa: E501
        """get_dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def get_dataset_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """get_dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `get_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_display_categories(self, **kwargs):  # noqa: E501
        """get_display_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_display_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_display_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_display_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_display_categories_with_http_info(self, **kwargs):  # noqa: E501
        """get_display_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_display_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_display_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_local_dataset(self, public_ds_id, **kwargs):  # noqa: E501
        """get_local_dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_local_dataset(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_local_dataset_with_http_info(public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_local_dataset_with_http_info(public_ds_id, **kwargs)  # noqa: E501
            return data

    def get_local_dataset_with_http_info(self, public_ds_id, **kwargs):  # noqa: E501
        """get_local_dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_local_dataset_with_http_info(public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_local_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `get_local_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/local', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rating(self, filter, public_ds_id, **kwargs):  # noqa: E501
        """get_rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rating(filter, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: (required)
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rating_with_http_info(filter, public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rating_with_http_info(filter, public_ds_id, **kwargs)  # noqa: E501
            return data

    def get_rating_with_http_info(self, filter, public_ds_id, **kwargs):  # noqa: E501
        """get_rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rating_with_http_info(filter, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: (required)
        :param str public_ds_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'public_ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rating" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_rating`")  # noqa: E501
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `get_rating`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_info(self, service, **kwargs):  # noqa: E501
        """get_service_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_info_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_info_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_service_info_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_service_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_info_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `get_service_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/services/{service}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_id(self, **kwargs):  # noqa: E501
        """get_user_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_id_with_http_info(self, **kwargs):  # noqa: E501
        """get_user_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/userId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_abuse(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """report_abuse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_abuse(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :param CommentIssueReqDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_abuse_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.report_abuse_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
            return data

    def report_abuse_with_http_info(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """report_abuse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_abuse_with_http_info(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :param CommentIssueReqDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'public_ds_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_abuse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `report_abuse`")  # noqa: E501
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `report_abuse`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/comments/{commentId}/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_comment_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_with_http_info(comment_id, public_ds_id, **kwargs)  # noqa: E501
            return data

    def update_comment_with_http_info(self, comment_id, public_ds_id, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_with_http_info(comment_id, public_ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int comment_id: (required)
        :param str public_ds_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'public_ds_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'public_ds_id' is set
        if ('public_ds_id' not in params or
                params['public_ds_id'] is None):
            raise ValueError("Missing the required parameter `public_ds_id` when calling `update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501
        if 'public_ds_id' in params:
            path_params['publicDSId'] = params['public_ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/hopssite/datasets/{publicDSId}/comments/{commentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
