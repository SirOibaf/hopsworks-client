# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FeaturestoreServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_validation_rules(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Write Deequ validation rules to Filesystem so validation job can pick it up  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_validation_rules(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :param ConstraintGroupDTO body:
        :return: DataValidationSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
            return data

    def add_validation_rules_with_http_info(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Write Deequ validation rules to Filesystem so validation job can pick it up  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :param ConstraintGroupDTO body:
        :return: DataValidationSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'feature_store_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_validation_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `add_validation_rules`")  # noqa: E501
        # verify the required parameter 'feature_store_id' is set
        if ('feature_store_id' not in params or
                params['feature_store_id'] is None):
            raise ValueError("Missing the required parameter `feature_store_id` when calling `add_validation_rules`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_validation_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'feature_store_id' in params:
            path_params['featureStoreId'] = params['feature_store_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataValidationSettingsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_featuregroup(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create feature group in a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_featuregroup(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_featuregroup_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_featuregroup_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def create_featuregroup_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create feature group in a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_featuregroup_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_featuregroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `create_featuregroup`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_featuregroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_storage_connector_with_type(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create a new storage connector for the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_storage_connector_with_type(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def create_new_storage_connector_with_type_with_http_info(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create a new storage connector for the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_storage_connector_with_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `create_new_storage_connector_with_type`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `create_new_storage_connector_with_type`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_new_storage_connector_with_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_import_job(self, body, project_id, **kwargs):  # noqa: E501
        """Configure job to import featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_import_job(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeaturegroupImportJobDTO body: Job configuration (required)
        :param int project_id: (required)
        :return: JobDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_import_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_import_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def create_or_update_import_job_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Configure job to import featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_import_job_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeaturegroupImportJobDTO body: Job configuration (required)
        :param int project_id: (required)
        :return: JobDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_import_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_import_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_or_update_import_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/importjob', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_training_dataset_job(self, body, project_id, **kwargs):  # noqa: E501
        """Configure job to create training dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_training_dataset_job(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingDatasetJobDTO body: Job configuration (required)
        :param int project_id: (required)
        :return: JobDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_training_dataset_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_training_dataset_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def create_or_update_training_dataset_job_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Configure job to create training dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_training_dataset_job_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainingDatasetJobDTO body: Job configuration (required)
        :param int project_id: (required)
        :return: JobDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_training_dataset_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_training_dataset_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_or_update_training_dataset_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/trainingdatasetjob', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_training_dataset(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create training dataset for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training_dataset(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param TrainingDatasetDTO body:
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_training_dataset_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_training_dataset_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def create_training_dataset_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create training dataset for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_training_dataset_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param TrainingDatasetDTO body:
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_training_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `create_training_dataset`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_training_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingDatasetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_group_from_feature_store(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete specific featuregroup from a specific featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_group_from_feature_store(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_feature_group_from_feature_store_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete specific featuregroup from a specific featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_group_from_feature_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `delete_feature_group_from_feature_store`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `delete_feature_group_from_feature_store`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_feature_group_from_feature_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_featuregroup_contents(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete featuregroup contents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_featuregroup_contents(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_featuregroup_contents_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_featuregroup_contents_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_featuregroup_contents_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete featuregroup contents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_featuregroup_contents_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_featuregroup_contents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `delete_featuregroup_contents`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `delete_featuregroup_contents`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_featuregroup_contents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storage_connector_with_type_and_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_connector_with_type_and_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_storage_connector_with_type_and_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storage_connector_with_type_and_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_training_dataset(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training_dataset(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_training_dataset_with_http_info(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trainingdatasetid', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_training_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trainingdatasetid' is set
        if ('trainingdatasetid' not in params or
                params['trainingdatasetid'] is None):
            raise ValueError("Missing the required parameter `trainingdatasetid` when calling `delete_training_dataset`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `delete_training_dataset`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_training_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainingdatasetid' in params:
            path_params['trainingdatasetid'] = params['trainingdatasetid']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingDatasetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_group_from_feature_store(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get specific featuregroup from a specific featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_from_feature_store(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_feature_group_from_feature_store_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get specific featuregroup from a specific featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_from_feature_store_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_group_from_feature_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `get_feature_group_from_feature_store`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_feature_group_from_feature_store`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_feature_group_from_feature_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_group_preview(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Preview feature data of a featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_preview(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturegroupPreview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_group_preview_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_group_preview_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_feature_group_preview_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Preview feature data of a featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_preview_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturegroupPreview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_group_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `get_feature_group_preview`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_feature_group_preview`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_feature_group_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturegroupPreview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_group_schema(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the SQL schema of a featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_schema(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: RowValueQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_group_schema_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_group_schema_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_feature_group_schema_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the SQL schema of a featuregroup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_group_schema_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: RowValueQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_group_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `get_feature_group_schema`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_feature_group_schema`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_feature_group_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RowValueQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featuregroups_for_featurestore(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the list of feature groups for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featuregroups_for_featurestore(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturegroupDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featuregroups_for_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featuregroups_for_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_featuregroups_for_featurestore_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the list of feature groups for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featuregroups_for_featurestore_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturegroupDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featuregroups_for_featurestore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_featuregroups_for_featurestore`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featuregroups_for_featurestore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturegroupDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featurestore(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get featurestore with specific Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: Id of the featurestore (required)
        :param int project_id: (required)
        :return: FeaturestoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_featurestore_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get featurestore with specific Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: Id of the featurestore (required)
        :param int project_id: (required)
        :return: FeaturestoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featurestore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_featurestore`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featurestore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featurestore_by_name(self, featurestore_name, project_id, **kwargs):  # noqa: E501
        """Get featurestore with specific name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_by_name(featurestore_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featurestore_name: Id of the featurestore (required)
        :param int project_id: (required)
        :return: FeaturestoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featurestore_by_name_with_http_info(featurestore_name, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featurestore_by_name_with_http_info(featurestore_name, project_id, **kwargs)  # noqa: E501
            return data

    def get_featurestore_by_name_with_http_info(self, featurestore_name, project_id, **kwargs):  # noqa: E501
        """Get featurestore with specific name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_by_name_with_http_info(featurestore_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featurestore_name: Id of the featurestore (required)
        :param int project_id: (required)
        :return: FeaturestoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_name', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featurestore_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_name' is set
        if ('featurestore_name' not in params or
                params['featurestore_name'] is None):
            raise ValueError("Missing the required parameter `featurestore_name` when calling `get_featurestore_by_name`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featurestore_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_name' in params:
            path_params['featurestoreName'] = params['featurestore_name']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/getByName/{featurestoreName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featurestore_id(self, featurestore_name, project_id, **kwargs):  # noqa: E501
        """Get featurestore Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_id(featurestore_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featurestore_name: (required)
        :param int project_id: (required)
        :return: FeaturestoreClientSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featurestore_id_with_http_info(featurestore_name, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featurestore_id_with_http_info(featurestore_name, project_id, **kwargs)  # noqa: E501
            return data

    def get_featurestore_id_with_http_info(self, featurestore_name, project_id, **kwargs):  # noqa: E501
        """Get featurestore Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_id_with_http_info(featurestore_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featurestore_name: (required)
        :param int project_id: (required)
        :return: FeaturestoreClientSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_name', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featurestore_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_name' is set
        if ('featurestore_name' not in params or
                params['featurestore_name'] is None):
            raise ValueError("Missing the required parameter `featurestore_name` when calling `get_featurestore_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featurestore_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_name' in params:
            path_params['featurestoreName'] = params['featurestore_name']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreName}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreClientSettingsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featurestore_settings(self, project_id, **kwargs):  # noqa: E501
        """Get featurestore settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_settings(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :return: FeaturestoreClientSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featurestore_settings_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featurestore_settings_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_featurestore_settings_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get featurestore settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestore_settings_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :return: FeaturestoreClientSettingsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featurestore_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featurestore_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreClientSettingsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_featurestores(self, project_id, **kwargs):  # noqa: E501
        """Get the list of feature stores for the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestores(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :return: list[FeaturestoreDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_featurestores_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_featurestores_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_featurestores_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get the list of feature stores for the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_featurestores_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :return: list[FeaturestoreDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_featurestores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_featurestores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturestoreDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_online_featurestore_storage_connector(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get online featurestore storage connector for this feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_online_featurestore_storage_connector(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_online_featurestore_storage_connector_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get online featurestore storage connector for this feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_online_featurestore_storage_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_online_featurestore_storage_connector`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_online_featurestore_storage_connector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/onlinefeaturestore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connector_with_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connector_with_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connector_with_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connector_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connector_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connectors(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connectors_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connectors_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connectors_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connectors`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturestoreStorageConnectorDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connectors_of_type(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a specific type of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_of_type(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connectors_of_type_with_http_info(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a specific type of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connectors_of_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `get_storage_connectors_of_type`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connectors_of_type`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connectors_of_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturestoreStorageConnectorDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_dataset_with_id(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_dataset_with_id(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_training_dataset_with_id_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_training_dataset_with_id_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_training_dataset_with_id_with_http_info(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_dataset_with_id_with_http_info(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trainingdatasetid', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_dataset_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trainingdatasetid' is set
        if ('trainingdatasetid' not in params or
                params['trainingdatasetid'] is None):
            raise ValueError("Missing the required parameter `trainingdatasetid` when calling `get_training_dataset_with_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_training_dataset_with_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_training_dataset_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainingdatasetid' in params:
            path_params['trainingdatasetid'] = params['trainingdatasetid']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingDatasetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_datasets_for_featurestore(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the list of training datasets for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_datasets_for_featurestore(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[TrainingDatasetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_training_datasets_for_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_training_datasets_for_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_training_datasets_for_featurestore_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get the list of training datasets for a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_datasets_for_featurestore_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[TrainingDatasetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_datasets_for_featurestore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_training_datasets_for_featurestore`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_training_datasets_for_featurestore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrainingDatasetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_validation_result(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Fetch the result of a Deequ data validation job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validation_result(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :return: ValidationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_validation_result_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_validation_result_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_validation_result_with_http_info(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Fetch the result of a Deequ data validation job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validation_result_with_http_info(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :return: ValidationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'feature_store_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_validation_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `get_validation_result`")  # noqa: E501
        # verify the required parameter 'feature_store_id' is set
        if ('feature_store_id' not in params or
                params['feature_store_id'] is None):
            raise ValueError("Missing the required parameter `feature_store_id` when calling `get_validation_result`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_validation_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'feature_store_id' in params:
            path_params['featureStoreId'] = params['feature_store_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValidationResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_validation_rules(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Get previously stored Deequ validation rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validation_rules(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :return: ConstraintGroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_validation_rules_with_http_info(self, featuregroup_id, feature_store_id, project_id, **kwargs):  # noqa: E501
        """Get previously stored Deequ validation rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validation_rules_with_http_info(featuregroup_id, feature_store_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: (required)
        :param int feature_store_id: (required)
        :param int project_id: (required)
        :return: ConstraintGroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'feature_store_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_validation_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `get_validation_rules`")  # noqa: E501
        # verify the required parameter 'feature_store_id' is set
        if ('feature_store_id' not in params or
                params['feature_store_id'] is None):
            raise ValueError("Missing the required parameter `feature_store_id` when calling `get_validation_rules`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_validation_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'feature_store_id' in params:
            path_params['featureStoreId'] = params['feature_store_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featureStoreId}/datavalidation/{featuregroupId}/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConstraintGroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def new_featurestore_util(self, project_id, **kwargs):  # noqa: E501
        """Upload json input for featurestore-util jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_featurestore_util(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param FeaturestoreUtilJobDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.new_featurestore_util_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.new_featurestore_util_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def new_featurestore_util_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Upload json input for featurestore-util jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_featurestore_util_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: (required)
        :param FeaturestoreUtilJobDTO body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_featurestore_util" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `new_featurestore_util`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/util', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_with_featurestore(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Synchornize Hive Table with the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_with_featurestore(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_with_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_with_featurestore_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def sync_with_featurestore_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Synchornize Hive Table with the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_with_featurestore_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_with_featurestore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `sync_with_featurestore`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `sync_with_featurestore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_featuregroup(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Update featuregroup contents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_featuregroup(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :param bool update_metadata: updateMetadata
        :param bool update_stats: updateStats
        :param bool enable_online: enableOnline
        :param bool disable_online: disableOnline
        :param bool update_stats_settings: updateStatsSettings
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_featuregroup_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_featuregroup_with_http_info(featuregroup_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_featuregroup_with_http_info(self, featuregroup_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Update featuregroup contents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_featuregroup_with_http_info(featuregroup_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featuregroup_id: Id of the featuregroup (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturegroupDTO body:
        :param bool update_metadata: updateMetadata
        :param bool update_stats: updateStats
        :param bool enable_online: enableOnline
        :param bool disable_online: disableOnline
        :param bool update_stats_settings: updateStatsSettings
        :return: FeaturegroupDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featuregroup_id', 'featurestore_id', 'project_id', 'body', 'update_metadata', 'update_stats', 'enable_online', 'disable_online', 'update_stats_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_featuregroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featuregroup_id' is set
        if ('featuregroup_id' not in params or
                params['featuregroup_id'] is None):
            raise ValueError("Missing the required parameter `featuregroup_id` when calling `update_featuregroup`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `update_featuregroup`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_featuregroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featuregroup_id' in params:
            path_params['featuregroupId'] = params['featuregroup_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'update_metadata' in params:
            query_params.append(('updateMetadata', params['update_metadata']))  # noqa: E501
        if 'update_stats' in params:
            query_params.append(('updateStats', params['update_stats']))  # noqa: E501
        if 'enable_online' in params:
            query_params.append(('enableOnline', params['enable_online']))  # noqa: E501
        if 'disable_online' in params:
            query_params.append(('disableOnline', params['disable_online']))  # noqa: E501
        if 'update_stats_settings' in params:
            query_params.append(('updateStatsSettings', params['update_stats_settings']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/featuregroups/{featuregroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturegroupDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storage_connector_with_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_connector_with_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_storage_connector_with_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storage_connector_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_storage_connector_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_training_dataset(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Update a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_training_dataset(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param TrainingDatasetDTO body:
        :param bool update_metadata: updateMetadata
        :param bool update_stats: updateStats
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_training_dataset_with_http_info(self, trainingdatasetid, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Update a training datasets with a specific id from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_training_dataset_with_http_info(trainingdatasetid, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int trainingdatasetid: Id of the training dataset (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param TrainingDatasetDTO body:
        :param bool update_metadata: updateMetadata
        :param bool update_stats: updateStats
        :return: TrainingDatasetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trainingdatasetid', 'featurestore_id', 'project_id', 'body', 'update_metadata', 'update_stats']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_training_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trainingdatasetid' is set
        if ('trainingdatasetid' not in params or
                params['trainingdatasetid'] is None):
            raise ValueError("Missing the required parameter `trainingdatasetid` when calling `update_training_dataset`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `update_training_dataset`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_training_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainingdatasetid' in params:
            path_params['trainingdatasetid'] = params['trainingdatasetid']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'update_metadata' in params:
            query_params.append(('updateMetadata', params['update_metadata']))  # noqa: E501
        if 'update_stats' in params:
            query_params.append(('updateStats', params['update_stats']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/trainingdatasets/{trainingdatasetid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingDatasetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
