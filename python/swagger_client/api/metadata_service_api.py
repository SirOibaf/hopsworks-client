# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MetadataServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_metadata_with_schema(self, **kwargs):  # noqa: E501
        """add_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_metadata_with_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_metadata_with_schema_with_http_info(self, **kwargs):  # noqa: E501
        """add_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_metadata_with_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_metadata_with_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/addWithSchema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_schemaless_metadata(self, xattr_name, path, **kwargs):  # noqa: E501
        """Create or Update a schemaless metadata for a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_schemaless_metadata(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
            return data

    def attach_schemaless_metadata_with_http_info(self, xattr_name, path, **kwargs):  # noqa: E501
        """Create or Update a schemaless metadata for a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_schemaless_metadata_with_http_info(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xattr_name', 'path', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_schemaless_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xattr_name' is set
        if ('xattr_name' not in params or
                params['xattr_name'] is None):
            raise ValueError("Missing the required parameter `xattr_name` when calling `attach_schemaless_metadata`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `attach_schemaless_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xattr_name' in params:
            path_params['xattrName'] = params['xattr_name']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/schemaless/{xattrName}/{path}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_schemaless_metadata(self, xattr_name, path, **kwargs):  # noqa: E501
        """Delete the schemaless metadata attached to a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_schemaless_metadata(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
            return data

    def detach_schemaless_metadata_with_http_info(self, xattr_name, path, **kwargs):  # noqa: E501
        """Delete the schemaless metadata attached to a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_schemaless_metadata_with_http_info(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xattr_name', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_schemaless_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xattr_name' is set
        if ('xattr_name' not in params or
                params['xattr_name'] is None):
            raise ValueError("Missing the required parameter `xattr_name` when calling `detach_schemaless_metadata`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `detach_schemaless_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xattr_name' in params:
            path_params['xattrName'] = params['xattr_name']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/schemaless/{xattrName}/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_template_from_inode(self, inodeid, templateid, **kwargs):  # noqa: E501
        """detach_template_from_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_template_from_inode(inodeid, templateid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :param int templateid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_template_from_inode_with_http_info(inodeid, templateid, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_template_from_inode_with_http_info(inodeid, templateid, **kwargs)  # noqa: E501
            return data

    def detach_template_from_inode_with_http_info(self, inodeid, templateid, **kwargs):  # noqa: E501
        """detach_template_from_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_template_from_inode_with_http_info(inodeid, templateid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :param int templateid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inodeid', 'templateid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_template_from_inode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inodeid' is set
        if ('inodeid' not in params or
                params['inodeid'] is None):
            raise ValueError("Missing the required parameter `inodeid` when calling `detach_template_from_inode`")  # noqa: E501
        # verify the required parameter 'templateid' is set
        if ('templateid' not in params or
                params['templateid'] is None):
            raise ValueError("Missing the required parameter `templateid` when calling `detach_template_from_inode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inodeid' in params:
            path_params['inodeid'] = params['inodeid']  # noqa: E501
        if 'templateid' in params:
            path_params['templateid'] = params['templateid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/detachtemplate/{inodeid}/{templateid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_available_templates_for_inode(self, inodeid, **kwargs):  # noqa: E501
        """fetch_available_templates_for_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_available_templates_for_inode(inodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_available_templates_for_inode_with_http_info(inodeid, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_available_templates_for_inode_with_http_info(inodeid, **kwargs)  # noqa: E501
            return data

    def fetch_available_templates_for_inode_with_http_info(self, inodeid, **kwargs):  # noqa: E501
        """fetch_available_templates_for_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_available_templates_for_inode_with_http_info(inodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inodeid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_available_templates_for_inode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inodeid' is set
        if ('inodeid' not in params or
                params['inodeid'] is None):
            raise ValueError("Missing the required parameter `inodeid` when calling `fetch_available_templates_for_inode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inodeid' in params:
            path_params['inodeid'] = params['inodeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/fetchavailabletemplatesforinode/{inodeid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_metadata(self, inodepid, inodename, tableid, **kwargs):  # noqa: E501
        """fetch_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_metadata(inodepid, inodename, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodepid: (required)
        :param str inodename: (required)
        :param int tableid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_metadata_with_http_info(inodepid, inodename, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_metadata_with_http_info(inodepid, inodename, tableid, **kwargs)  # noqa: E501
            return data

    def fetch_metadata_with_http_info(self, inodepid, inodename, tableid, **kwargs):  # noqa: E501
        """fetch_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_metadata_with_http_info(inodepid, inodename, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodepid: (required)
        :param str inodename: (required)
        :param int tableid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inodepid', 'inodename', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inodepid' is set
        if ('inodepid' not in params or
                params['inodepid'] is None):
            raise ValueError("Missing the required parameter `inodepid` when calling `fetch_metadata`")  # noqa: E501
        # verify the required parameter 'inodename' is set
        if ('inodename' not in params or
                params['inodename'] is None):
            raise ValueError("Missing the required parameter `inodename` when calling `fetch_metadata`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `fetch_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inodepid' in params:
            path_params['inodepid'] = params['inodepid']  # noqa: E501
        if 'inodename' in params:
            path_params['inodename'] = params['inodename']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/fetchmetadata/{inodepid}/{inodename}/{tableid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_metadata_compact(self, inodepid, **kwargs):  # noqa: E501
        """fetch_metadata_compact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_metadata_compact(inodepid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodepid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_metadata_compact_with_http_info(inodepid, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_metadata_compact_with_http_info(inodepid, **kwargs)  # noqa: E501
            return data

    def fetch_metadata_compact_with_http_info(self, inodepid, **kwargs):  # noqa: E501
        """fetch_metadata_compact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_metadata_compact_with_http_info(inodepid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodepid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inodepid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_metadata_compact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inodepid' is set
        if ('inodepid' not in params or
                params['inodepid'] is None):
            raise ValueError("Missing the required parameter `inodepid` when calling `fetch_metadata_compact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inodepid' in params:
            path_params['inodepid'] = params['inodepid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/{inodepid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_template(self, templateid, sender, **kwargs):  # noqa: E501
        """fetch_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_template(templateid, sender, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int templateid: (required)
        :param str sender: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_template_with_http_info(templateid, sender, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_template_with_http_info(templateid, sender, **kwargs)  # noqa: E501
            return data

    def fetch_template_with_http_info(self, templateid, sender, **kwargs):  # noqa: E501
        """fetch_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_template_with_http_info(templateid, sender, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int templateid: (required)
        :param str sender: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['templateid', 'sender']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'templateid' is set
        if ('templateid' not in params or
                params['templateid'] is None):
            raise ValueError("Missing the required parameter `templateid` when calling `fetch_template`")  # noqa: E501
        # verify the required parameter 'sender' is set
        if ('sender' not in params or
                params['sender'] is None):
            raise ValueError("Missing the required parameter `sender` when calling `fetch_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'templateid' in params:
            path_params['templateid'] = params['templateid']  # noqa: E501
        if 'sender' in params:
            path_params['sender'] = params['sender']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/fetchtemplate/{templateid}/{sender}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_templatesfor_inode(self, inodeid, **kwargs):  # noqa: E501
        """fetch_templatesfor_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_templatesfor_inode(inodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_templatesfor_inode_with_http_info(inodeid, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_templatesfor_inode_with_http_info(inodeid, **kwargs)  # noqa: E501
            return data

    def fetch_templatesfor_inode_with_http_info(self, inodeid, **kwargs):  # noqa: E501
        """fetch_templatesfor_inode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_templatesfor_inode_with_http_info(inodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int inodeid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inodeid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_templatesfor_inode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inodeid' is set
        if ('inodeid' not in params or
                params['inodeid'] is None):
            raise ValueError("Missing the required parameter `inodeid` when calling `fetch_templatesfor_inode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inodeid' in params:
            path_params['inodeid'] = params['inodeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/fetchtemplatesforinode/{inodeid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schemaless_metadata(self, xattr_name, path, **kwargs):  # noqa: E501
        """Get the schemaless metadata attached to a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schemaless_metadata(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schemaless_metadata_with_http_info(xattr_name, path, **kwargs)  # noqa: E501
            return data

    def get_schemaless_metadata_with_http_info(self, xattr_name, path, **kwargs):  # noqa: E501
        """Get the schemaless metadata attached to a path.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schemaless_metadata_with_http_info(xattr_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xattr_name: (required)
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xattr_name', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schemaless_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xattr_name' is set
        if ('xattr_name' not in params or
                params['xattr_name'] is None):
            raise ValueError("Missing the required parameter `xattr_name` when calling `get_schemaless_metadata`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_schemaless_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xattr_name' in params:
            path_params['xattrName'] = params['xattr_name']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/schemaless/{xattrName}/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_metadata_with_schema(self, **kwargs):  # noqa: E501
        """remove_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_metadata_with_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_metadata_with_schema_with_http_info(self, **kwargs):  # noqa: E501
        """remove_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_metadata_with_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_metadata_with_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/removeWithSchema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_method(self, **kwargs):  # noqa: E501
        """test_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_method_with_http_info(self, **kwargs):  # noqa: E501
        """test_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/upload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadata_with_schema(self, **kwargs):  # noqa: E501
        """update_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata_with_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_metadata_with_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_metadata_with_schema_with_http_info(self, **kwargs):  # noqa: E501
        """update_metadata_with_schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata_with_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata_with_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/updateWithSchema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_method(self, **kwargs):  # noqa: E501
        """upload_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file:
        :param str flow_chunk_number:
        :param str flow_chunk_size:
        :param str flow_current_chunk_size:
        :param str flow_filename:
        :param str flow_identifier:
        :param str flow_relative_path:
        :param str flow_total_chunks:
        :param str flow_total_size:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_method_with_http_info(self, **kwargs):  # noqa: E501
        """upload_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file:
        :param str flow_chunk_number:
        :param str flow_chunk_size:
        :param str flow_current_chunk_size:
        :param str flow_filename:
        :param str flow_identifier:
        :param str flow_relative_path:
        :param str flow_total_chunks:
        :param str flow_total_size:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'flow_chunk_number', 'flow_chunk_size', 'flow_current_chunk_size', 'flow_filename', 'flow_identifier', 'flow_relative_path', 'flow_total_chunks', 'flow_total_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'flow_chunk_number' in params:
            form_params.append(('flowChunkNumber', params['flow_chunk_number']))  # noqa: E501
        if 'flow_chunk_size' in params:
            form_params.append(('flowChunkSize', params['flow_chunk_size']))  # noqa: E501
        if 'flow_current_chunk_size' in params:
            form_params.append(('flowCurrentChunkSize', params['flow_current_chunk_size']))  # noqa: E501
        if 'flow_filename' in params:
            form_params.append(('flowFilename', params['flow_filename']))  # noqa: E501
        if 'flow_identifier' in params:
            form_params.append(('flowIdentifier', params['flow_identifier']))  # noqa: E501
        if 'flow_relative_path' in params:
            form_params.append(('flowRelativePath', params['flow_relative_path']))  # noqa: E501
        if 'flow_total_chunks' in params:
            form_params.append(('flowTotalChunks', params['flow_total_chunks']))  # noqa: E501
        if 'flow_total_size' in params:
            form_params.append(('flowTotalSize', params['flow_total_size']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
