# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StorageConnectorServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_new_storage_connector_with_type(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create a new storage connector for the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_storage_connector_with_type(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def create_new_storage_connector_with_type_with_http_info(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Create a new storage connector for the feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_storage_connector_with_type_with_http_info(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_storage_connector_with_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `create_new_storage_connector_with_type`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `create_new_storage_connector_with_type`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_new_storage_connector_with_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storage_connector_with_type_and_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_connector_with_type_and_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_storage_connector_with_type_and_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Delete storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_storage_connector_with_type_and_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storage_connector_with_type_and_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_storage_connector_with_type_and_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_online_featurestore_storage_connector(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get online featurestore storage connector for this feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_online_featurestore_storage_connector(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_online_featurestore_storage_connector_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get online featurestore storage connector for this feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_online_featurestore_storage_connector_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_online_featurestore_storage_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_online_featurestore_storage_connector`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_online_featurestore_storage_connector`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/onlinefeaturestore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connector_with_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connector_with_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connector_with_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connector_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connector_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connectors(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connectors_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connectors_with_http_info(featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connectors_with_http_info(self, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_with_http_info(featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connectors`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connectors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturestoreStorageConnectorDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_connectors_of_type(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a specific type of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_of_type(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_storage_connectors_of_type_with_http_info(self, connector_type, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get all storage connectors of a specific type of a feature store  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_storage_connectors_of_type_with_http_info(connector_type, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :return: list[FeaturestoreStorageConnectorDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'featurestore_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_connectors_of_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `get_storage_connectors_of_type`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `get_storage_connectors_of_type`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_storage_connectors_of_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeaturestoreStorageConnectorDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storage_connector_with_id(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_connector_with_id(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_storage_connector_with_id_with_http_info(self, connector_type, connector_id, featurestore_id, project_id, **kwargs):  # noqa: E501
        """Get a storage connector with a specific id and type from a featurestore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_storage_connector_with_id_with_http_info(connector_type, connector_id, featurestore_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_type: storage connector type (required)
        :param int connector_id: Id of the storage connector (required)
        :param int featurestore_id: (required)
        :param int project_id: (required)
        :param FeaturestoreStorageConnectorDTO body:
        :return: FeaturestoreStorageConnectorDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_type', 'connector_id', 'featurestore_id', 'project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storage_connector_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_type' is set
        if ('connector_type' not in params or
                params['connector_type'] is None):
            raise ValueError("Missing the required parameter `connector_type` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'featurestore_id' is set
        if ('featurestore_id' not in params or
                params['featurestore_id'] is None):
            raise ValueError("Missing the required parameter `featurestore_id` when calling `update_storage_connector_with_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_storage_connector_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_type' in params:
            path_params['connectorType'] = params['connector_type']  # noqa: E501
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501
        if 'featurestore_id' in params:
            path_params['featurestoreId'] = params['featurestore_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectId}/featurestores/{featurestoreId}/storageconnectors/{connectorType}/{connectorId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturestoreStorageConnectorDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
