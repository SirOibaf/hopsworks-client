# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inode_id': 'int',
        'project_id': 'int',
        'message_content': 'str'
    }

    attribute_map = {
        'inode_id': 'inodeId',
        'project_id': 'projectId',
        'message_content': 'messageContent'
    }

    def __init__(self, inode_id=None, project_id=None, message_content=None):  # noqa: E501
        """RequestDTO - a model defined in Swagger"""  # noqa: E501
        self._inode_id = None
        self._project_id = None
        self._message_content = None
        self.discriminator = None
        if inode_id is not None:
            self.inode_id = inode_id
        if project_id is not None:
            self.project_id = project_id
        if message_content is not None:
            self.message_content = message_content

    @property
    def inode_id(self):
        """Gets the inode_id of this RequestDTO.  # noqa: E501


        :return: The inode_id of this RequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._inode_id

    @inode_id.setter
    def inode_id(self, inode_id):
        """Sets the inode_id of this RequestDTO.


        :param inode_id: The inode_id of this RequestDTO.  # noqa: E501
        :type: int
        """

        self._inode_id = inode_id

    @property
    def project_id(self):
        """Gets the project_id of this RequestDTO.  # noqa: E501


        :return: The project_id of this RequestDTO.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RequestDTO.


        :param project_id: The project_id of this RequestDTO.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def message_content(self):
        """Gets the message_content of this RequestDTO.  # noqa: E501


        :return: The message_content of this RequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._message_content

    @message_content.setter
    def message_content(self, message_content):
        """Sets the message_content of this RequestDTO.


        :param message_content: The message_content of this RequestDTO.  # noqa: E501
        :type: str
        """

        self._message_content = message_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
