# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.execution_dto import ExecutionDTO  # noqa: F401,E501
from swagger_client.models.job_configuration import JobConfiguration  # noqa: F401,E501
from swagger_client.models.job_dto import JobDTO  # noqa: F401,E501
from swagger_client.models.user_dto import UserDTO  # noqa: F401,E501


class JobDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[JobDTO]',
        'count': 'int',
        'id': 'int',
        'name': 'str',
        'creation_time': 'datetime',
        'config': 'JobConfiguration',
        'job_type': 'str',
        'creator': 'UserDTO',
        'executions': 'ExecutionDTO'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'id': 'id',
        'name': 'name',
        'creation_time': 'creationTime',
        'config': 'config',
        'job_type': 'jobType',
        'creator': 'creator',
        'executions': 'executions'
    }

    def __init__(self, href=None, items=None, count=None, id=None, name=None, creation_time=None, config=None, job_type=None, creator=None, executions=None):  # noqa: E501
        """JobDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._id = None
        self._name = None
        self._creation_time = None
        self._config = None
        self._job_type = None
        self._creator = None
        self._executions = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_time is not None:
            self.creation_time = creation_time
        if config is not None:
            self.config = config
        if job_type is not None:
            self.job_type = job_type
        if creator is not None:
            self.creator = creator
        if executions is not None:
            self.executions = executions

    @property
    def href(self):
        """Gets the href of this JobDTO.  # noqa: E501


        :return: The href of this JobDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this JobDTO.


        :param href: The href of this JobDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this JobDTO.  # noqa: E501


        :return: The items of this JobDTO.  # noqa: E501
        :rtype: list[JobDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JobDTO.


        :param items: The items of this JobDTO.  # noqa: E501
        :type: list[JobDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this JobDTO.  # noqa: E501


        :return: The count of this JobDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this JobDTO.


        :param count: The count of this JobDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this JobDTO.  # noqa: E501


        :return: The id of this JobDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDTO.


        :param id: The id of this JobDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobDTO.  # noqa: E501


        :return: The name of this JobDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobDTO.


        :param name: The name of this JobDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_time(self):
        """Gets the creation_time of this JobDTO.  # noqa: E501


        :return: The creation_time of this JobDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this JobDTO.


        :param creation_time: The creation_time of this JobDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def config(self):
        """Gets the config of this JobDTO.  # noqa: E501


        :return: The config of this JobDTO.  # noqa: E501
        :rtype: JobConfiguration
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this JobDTO.


        :param config: The config of this JobDTO.  # noqa: E501
        :type: JobConfiguration
        """

        self._config = config

    @property
    def job_type(self):
        """Gets the job_type of this JobDTO.  # noqa: E501


        :return: The job_type of this JobDTO.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobDTO.


        :param job_type: The job_type of this JobDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["YARN", "FLINK", "SPARK", "PYSPARK", "BEAM_FLINK", "BEAM_SPARK", "ERASURE_CODING"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def creator(self):
        """Gets the creator of this JobDTO.  # noqa: E501


        :return: The creator of this JobDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this JobDTO.


        :param creator: The creator of this JobDTO.  # noqa: E501
        :type: UserDTO
        """

        self._creator = creator

    @property
    def executions(self):
        """Gets the executions of this JobDTO.  # noqa: E501


        :return: The executions of this JobDTO.  # noqa: E501
        :rtype: ExecutionDTO
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this JobDTO.


        :param executions: The executions of this JobDTO.  # noqa: E501
        :type: ExecutionDTO
        """

        self._executions = executions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
