# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.local_resource_dto import LocalResourceDTO  # noqa: F401,E501
from swagger_client.models.yarn_job_configuration import YarnJobConfiguration  # noqa: F401,E501


class FlinkJobConfiguration(YarnJobConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_manager_memory': 'int',
        'number_of_task_managers': 'int',
        'number_of_task_slots': 'int',
        'task_manager_memory': 'int',
        'properties': 'str'
    }

    attribute_map = {
        'job_manager_memory': 'jobManagerMemory',
        'number_of_task_managers': 'numberOfTaskManagers',
        'number_of_task_slots': 'numberOfTaskSlots',
        'task_manager_memory': 'taskManagerMemory',
        'properties': 'properties'
    }

    def __init__(self, job_manager_memory=None, number_of_task_managers=None, number_of_task_slots=None, task_manager_memory=None, properties=None):  # noqa: E501
        """FlinkJobConfiguration - a model defined in Swagger"""  # noqa: E501
        self._job_manager_memory = None
        self._number_of_task_managers = None
        self._number_of_task_slots = None
        self._task_manager_memory = None
        self._properties = None
        self.discriminator = None
        if job_manager_memory is not None:
            self.job_manager_memory = job_manager_memory
        if number_of_task_managers is not None:
            self.number_of_task_managers = number_of_task_managers
        if number_of_task_slots is not None:
            self.number_of_task_slots = number_of_task_slots
        if task_manager_memory is not None:
            self.task_manager_memory = task_manager_memory
        if properties is not None:
            self.properties = properties

    @property
    def job_manager_memory(self):
        """Gets the job_manager_memory of this FlinkJobConfiguration.  # noqa: E501


        :return: The job_manager_memory of this FlinkJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._job_manager_memory

    @job_manager_memory.setter
    def job_manager_memory(self, job_manager_memory):
        """Sets the job_manager_memory of this FlinkJobConfiguration.


        :param job_manager_memory: The job_manager_memory of this FlinkJobConfiguration.  # noqa: E501
        :type: int
        """

        self._job_manager_memory = job_manager_memory

    @property
    def number_of_task_managers(self):
        """Gets the number_of_task_managers of this FlinkJobConfiguration.  # noqa: E501


        :return: The number_of_task_managers of this FlinkJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._number_of_task_managers

    @number_of_task_managers.setter
    def number_of_task_managers(self, number_of_task_managers):
        """Sets the number_of_task_managers of this FlinkJobConfiguration.


        :param number_of_task_managers: The number_of_task_managers of this FlinkJobConfiguration.  # noqa: E501
        :type: int
        """

        self._number_of_task_managers = number_of_task_managers

    @property
    def number_of_task_slots(self):
        """Gets the number_of_task_slots of this FlinkJobConfiguration.  # noqa: E501


        :return: The number_of_task_slots of this FlinkJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._number_of_task_slots

    @number_of_task_slots.setter
    def number_of_task_slots(self, number_of_task_slots):
        """Sets the number_of_task_slots of this FlinkJobConfiguration.


        :param number_of_task_slots: The number_of_task_slots of this FlinkJobConfiguration.  # noqa: E501
        :type: int
        """

        self._number_of_task_slots = number_of_task_slots

    @property
    def task_manager_memory(self):
        """Gets the task_manager_memory of this FlinkJobConfiguration.  # noqa: E501


        :return: The task_manager_memory of this FlinkJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._task_manager_memory

    @task_manager_memory.setter
    def task_manager_memory(self, task_manager_memory):
        """Sets the task_manager_memory of this FlinkJobConfiguration.


        :param task_manager_memory: The task_manager_memory of this FlinkJobConfiguration.  # noqa: E501
        :type: int
        """

        self._task_manager_memory = task_manager_memory

    @property
    def properties(self):
        """Gets the properties of this FlinkJobConfiguration.  # noqa: E501


        :return: The properties of this FlinkJobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FlinkJobConfiguration.


        :param properties: The properties of this FlinkJobConfiguration.  # noqa: E501
        :type: str
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlinkJobConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlinkJobConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
