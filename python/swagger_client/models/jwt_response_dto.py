# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JWTResponseDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'expires_at': 'datetime',
        'nbf': 'datetime',
        'exp_leeway': 'int'
    }

    attribute_map = {
        'token': 'token',
        'expires_at': 'expiresAt',
        'nbf': 'nbf',
        'exp_leeway': 'expLeeway'
    }

    def __init__(self, token=None, expires_at=None, nbf=None, exp_leeway=None):  # noqa: E501
        """JWTResponseDTO - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._expires_at = None
        self._nbf = None
        self._exp_leeway = None
        self.discriminator = None
        if token is not None:
            self.token = token
        if expires_at is not None:
            self.expires_at = expires_at
        if nbf is not None:
            self.nbf = nbf
        if exp_leeway is not None:
            self.exp_leeway = exp_leeway

    @property
    def token(self):
        """Gets the token of this JWTResponseDTO.  # noqa: E501


        :return: The token of this JWTResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this JWTResponseDTO.


        :param token: The token of this JWTResponseDTO.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def expires_at(self):
        """Gets the expires_at of this JWTResponseDTO.  # noqa: E501


        :return: The expires_at of this JWTResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this JWTResponseDTO.


        :param expires_at: The expires_at of this JWTResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def nbf(self):
        """Gets the nbf of this JWTResponseDTO.  # noqa: E501


        :return: The nbf of this JWTResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._nbf

    @nbf.setter
    def nbf(self, nbf):
        """Sets the nbf of this JWTResponseDTO.


        :param nbf: The nbf of this JWTResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._nbf = nbf

    @property
    def exp_leeway(self):
        """Gets the exp_leeway of this JWTResponseDTO.  # noqa: E501


        :return: The exp_leeway of this JWTResponseDTO.  # noqa: E501
        :rtype: int
        """
        return self._exp_leeway

    @exp_leeway.setter
    def exp_leeway(self, exp_leeway):
        """Sets the exp_leeway of this JWTResponseDTO.


        :param exp_leeway: The exp_leeway of this JWTResponseDTO.  # noqa: E501
        :type: int
        """

        self._exp_leeway = exp_leeway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JWTResponseDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JWTResponseDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
