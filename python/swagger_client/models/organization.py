# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.users import Users  # noqa: F401,E501


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'org_name': 'str',
        'website': 'str',
        'contact_person': 'str',
        'contact_email': 'str',
        'department': 'str',
        'phone': 'str',
        'fax': 'str',
        'uid': 'Users'
    }

    attribute_map = {
        'id': 'id',
        'org_name': 'orgName',
        'website': 'website',
        'contact_person': 'contactPerson',
        'contact_email': 'contactEmail',
        'department': 'department',
        'phone': 'phone',
        'fax': 'fax',
        'uid': 'uid'
    }

    def __init__(self, id=None, org_name=None, website=None, contact_person=None, contact_email=None, department=None, phone=None, fax=None, uid=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._org_name = None
        self._website = None
        self._contact_person = None
        self._contact_email = None
        self._department = None
        self._phone = None
        self._fax = None
        self._uid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if org_name is not None:
            self.org_name = org_name
        if website is not None:
            self.website = website
        if contact_person is not None:
            self.contact_person = contact_person
        if contact_email is not None:
            self.contact_email = contact_email
        if department is not None:
            self.department = department
        if phone is not None:
            self.phone = phone
        if fax is not None:
            self.fax = fax
        if uid is not None:
            self.uid = uid

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_name(self):
        """Gets the org_name of this Organization.  # noqa: E501


        :return: The org_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this Organization.


        :param org_name: The org_name of this Organization.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def website(self):
        """Gets the website of this Organization.  # noqa: E501


        :return: The website of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organization.


        :param website: The website of this Organization.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def contact_person(self):
        """Gets the contact_person of this Organization.  # noqa: E501


        :return: The contact_person of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this Organization.


        :param contact_person: The contact_person of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def contact_email(self):
        """Gets the contact_email of this Organization.  # noqa: E501


        :return: The contact_email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Organization.


        :param contact_email: The contact_email of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def department(self):
        """Gets the department of this Organization.  # noqa: E501


        :return: The department of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Organization.


        :param department: The department of this Organization.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def phone(self):
        """Gets the phone of this Organization.  # noqa: E501


        :return: The phone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Organization.


        :param phone: The phone of this Organization.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def fax(self):
        """Gets the fax of this Organization.  # noqa: E501


        :return: The fax of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Organization.


        :param fax: The fax of this Organization.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def uid(self):
        """Gets the uid of this Organization.  # noqa: E501


        :return: The uid of this Organization.  # noqa: E501
        :rtype: Users
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Organization.


        :param uid: The uid of this Organization.  # noqa: E501
        :type: Users
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
