# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.project import Project  # noqa: F401,E501
from swagger_client.models.tensor_board_pk import TensorBoardPK  # noqa: F401,E501
from swagger_client.models.users import Users  # noqa: F401,E501


class TensorBoard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tensor_board_pk': 'TensorBoardPK',
        'hdfs_user_id': 'int',
        'pid': 'int',
        'endpoint': 'str',
        'elastic_id': 'str',
        'last_accessed': 'datetime',
        'hdfs_logdir': 'str',
        'secret': 'str',
        'project': 'Project',
        'users': 'Users'
    }

    attribute_map = {
        'tensor_board_pk': 'tensorBoardPK',
        'hdfs_user_id': 'hdfsUserId',
        'pid': 'pid',
        'endpoint': 'endpoint',
        'elastic_id': 'elasticId',
        'last_accessed': 'lastAccessed',
        'hdfs_logdir': 'hdfsLogdir',
        'secret': 'secret',
        'project': 'project',
        'users': 'users'
    }

    def __init__(self, tensor_board_pk=None, hdfs_user_id=None, pid=None, endpoint=None, elastic_id=None, last_accessed=None, hdfs_logdir=None, secret=None, project=None, users=None):  # noqa: E501
        """TensorBoard - a model defined in Swagger"""  # noqa: E501
        self._tensor_board_pk = None
        self._hdfs_user_id = None
        self._pid = None
        self._endpoint = None
        self._elastic_id = None
        self._last_accessed = None
        self._hdfs_logdir = None
        self._secret = None
        self._project = None
        self._users = None
        self.discriminator = None
        if tensor_board_pk is not None:
            self.tensor_board_pk = tensor_board_pk
        self.hdfs_user_id = hdfs_user_id
        if pid is not None:
            self.pid = pid
        if endpoint is not None:
            self.endpoint = endpoint
        if elastic_id is not None:
            self.elastic_id = elastic_id
        self.last_accessed = last_accessed
        if hdfs_logdir is not None:
            self.hdfs_logdir = hdfs_logdir
        self.secret = secret
        if project is not None:
            self.project = project
        if users is not None:
            self.users = users

    @property
    def tensor_board_pk(self):
        """Gets the tensor_board_pk of this TensorBoard.  # noqa: E501


        :return: The tensor_board_pk of this TensorBoard.  # noqa: E501
        :rtype: TensorBoardPK
        """
        return self._tensor_board_pk

    @tensor_board_pk.setter
    def tensor_board_pk(self, tensor_board_pk):
        """Sets the tensor_board_pk of this TensorBoard.


        :param tensor_board_pk: The tensor_board_pk of this TensorBoard.  # noqa: E501
        :type: TensorBoardPK
        """

        self._tensor_board_pk = tensor_board_pk

    @property
    def hdfs_user_id(self):
        """Gets the hdfs_user_id of this TensorBoard.  # noqa: E501


        :return: The hdfs_user_id of this TensorBoard.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_user_id

    @hdfs_user_id.setter
    def hdfs_user_id(self, hdfs_user_id):
        """Sets the hdfs_user_id of this TensorBoard.


        :param hdfs_user_id: The hdfs_user_id of this TensorBoard.  # noqa: E501
        :type: int
        """
        if hdfs_user_id is None:
            raise ValueError("Invalid value for `hdfs_user_id`, must not be `None`")  # noqa: E501

        self._hdfs_user_id = hdfs_user_id

    @property
    def pid(self):
        """Gets the pid of this TensorBoard.  # noqa: E501


        :return: The pid of this TensorBoard.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TensorBoard.


        :param pid: The pid of this TensorBoard.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def endpoint(self):
        """Gets the endpoint of this TensorBoard.  # noqa: E501


        :return: The endpoint of this TensorBoard.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this TensorBoard.


        :param endpoint: The endpoint of this TensorBoard.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def elastic_id(self):
        """Gets the elastic_id of this TensorBoard.  # noqa: E501


        :return: The elastic_id of this TensorBoard.  # noqa: E501
        :rtype: str
        """
        return self._elastic_id

    @elastic_id.setter
    def elastic_id(self, elastic_id):
        """Sets the elastic_id of this TensorBoard.


        :param elastic_id: The elastic_id of this TensorBoard.  # noqa: E501
        :type: str
        """

        self._elastic_id = elastic_id

    @property
    def last_accessed(self):
        """Gets the last_accessed of this TensorBoard.  # noqa: E501


        :return: The last_accessed of this TensorBoard.  # noqa: E501
        :rtype: datetime
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this TensorBoard.


        :param last_accessed: The last_accessed of this TensorBoard.  # noqa: E501
        :type: datetime
        """
        if last_accessed is None:
            raise ValueError("Invalid value for `last_accessed`, must not be `None`")  # noqa: E501

        self._last_accessed = last_accessed

    @property
    def hdfs_logdir(self):
        """Gets the hdfs_logdir of this TensorBoard.  # noqa: E501


        :return: The hdfs_logdir of this TensorBoard.  # noqa: E501
        :rtype: str
        """
        return self._hdfs_logdir

    @hdfs_logdir.setter
    def hdfs_logdir(self, hdfs_logdir):
        """Sets the hdfs_logdir of this TensorBoard.


        :param hdfs_logdir: The hdfs_logdir of this TensorBoard.  # noqa: E501
        :type: str
        """

        self._hdfs_logdir = hdfs_logdir

    @property
    def secret(self):
        """Gets the secret of this TensorBoard.  # noqa: E501


        :return: The secret of this TensorBoard.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this TensorBoard.


        :param secret: The secret of this TensorBoard.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def project(self):
        """Gets the project of this TensorBoard.  # noqa: E501


        :return: The project of this TensorBoard.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this TensorBoard.


        :param project: The project of this TensorBoard.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def users(self):
        """Gets the users of this TensorBoard.  # noqa: E501


        :return: The users of this TensorBoard.  # noqa: E501
        :rtype: Users
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this TensorBoard.


        :param users: The users of this TensorBoard.  # noqa: E501
        :type: Users
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TensorBoard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TensorBoard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
