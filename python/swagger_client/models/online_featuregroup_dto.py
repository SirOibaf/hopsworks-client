# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OnlineFeaturegroupDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'db_name': 'str',
        'table_name': 'str',
        'table_type': 'str',
        'table_rows': 'int',
        'size': 'float'
    }

    attribute_map = {
        'id': 'id',
        'db_name': 'dbName',
        'table_name': 'tableName',
        'table_type': 'tableType',
        'table_rows': 'tableRows',
        'size': 'size'
    }

    def __init__(self, id=None, db_name=None, table_name=None, table_type=None, table_rows=None, size=None):  # noqa: E501
        """OnlineFeaturegroupDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._db_name = None
        self._table_name = None
        self._table_type = None
        self._table_rows = None
        self._size = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if db_name is not None:
            self.db_name = db_name
        if table_name is not None:
            self.table_name = table_name
        if table_type is not None:
            self.table_type = table_type
        if table_rows is not None:
            self.table_rows = table_rows
        if size is not None:
            self.size = size

    @property
    def id(self):
        """Gets the id of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The id of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OnlineFeaturegroupDTO.


        :param id: The id of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def db_name(self):
        """Gets the db_name of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The db_name of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this OnlineFeaturegroupDTO.


        :param db_name: The db_name of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def table_name(self):
        """Gets the table_name of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The table_name of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this OnlineFeaturegroupDTO.


        :param table_name: The table_name of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def table_type(self):
        """Gets the table_type of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The table_type of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._table_type

    @table_type.setter
    def table_type(self, table_type):
        """Sets the table_type of this OnlineFeaturegroupDTO.


        :param table_type: The table_type of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: str
        """

        self._table_type = table_type

    @property
    def table_rows(self):
        """Gets the table_rows of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The table_rows of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: int
        """
        return self._table_rows

    @table_rows.setter
    def table_rows(self, table_rows):
        """Sets the table_rows of this OnlineFeaturegroupDTO.


        :param table_rows: The table_rows of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: int
        """

        self._table_rows = table_rows

    @property
    def size(self):
        """Gets the size of this OnlineFeaturegroupDTO.  # noqa: E501


        :return: The size of this OnlineFeaturegroupDTO.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OnlineFeaturegroupDTO.


        :param size: The size of this OnlineFeaturegroupDTO.  # noqa: E501
        :type: float
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnlineFeaturegroupDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnlineFeaturegroupDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
