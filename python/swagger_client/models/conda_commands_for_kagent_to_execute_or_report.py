# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CondaCommandsForKagentToExecuteOrReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'op': 'str',
        'user': 'str',
        'project': 'str',
        'id': 'int',
        'arg': 'str',
        'status': 'str',
        'version': 'str',
        'channel_url': 'str',
        'install_type': 'str',
        'lib': 'str',
        'environment_yml': 'str',
        'install_jupyter': 'bool'
    }

    attribute_map = {
        'op': 'op',
        'user': 'user',
        'project': 'project',
        'id': 'id',
        'arg': 'arg',
        'status': 'status',
        'version': 'version',
        'channel_url': 'channelUrl',
        'install_type': 'installType',
        'lib': 'lib',
        'environment_yml': 'environmentYml',
        'install_jupyter': 'installJupyter'
    }

    def __init__(self, op=None, user=None, project=None, id=None, arg=None, status=None, version=None, channel_url=None, install_type=None, lib=None, environment_yml=None, install_jupyter=None):  # noqa: E501
        """CondaCommandsForKagentToExecuteOrReport - a model defined in Swagger"""  # noqa: E501
        self._op = None
        self._user = None
        self._project = None
        self._id = None
        self._arg = None
        self._status = None
        self._version = None
        self._channel_url = None
        self._install_type = None
        self._lib = None
        self._environment_yml = None
        self._install_jupyter = None
        self.discriminator = None
        self.op = op
        if user is not None:
            self.user = user
        self.project = project
        self.id = id
        if arg is not None:
            self.arg = arg
        self.status = status
        if version is not None:
            self.version = version
        if channel_url is not None:
            self.channel_url = channel_url
        if install_type is not None:
            self.install_type = install_type
        if lib is not None:
            self.lib = lib
        if environment_yml is not None:
            self.environment_yml = environment_yml
        if install_jupyter is not None:
            self.install_jupyter = install_jupyter

    @property
    def op(self):
        """Gets the op of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Operation to be performed  # noqa: E501

        :return: The op of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this CondaCommandsForKagentToExecuteOrReport.

        Operation to be performed  # noqa: E501

        :param op: The op of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        if op is None:
            raise ValueError("Invalid value for `op`, must not be `None`")  # noqa: E501
        allowed_values = ["CLONE", "CREATE", "BACKUP", "REMOVE", "LIST", "INSTALL", "UNINSTALL", "UPGRADE", "CLEAN", "YML"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"  # noqa: E501
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def user(self):
        """Gets the user of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        The user command will be executed  # noqa: E501

        :return: The user of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CondaCommandsForKagentToExecuteOrReport.

        The user command will be executed  # noqa: E501

        :param user: The user of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def project(self):
        """Gets the project of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Name of the project the command is associated with  # noqa: E501

        :return: The project of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CondaCommandsForKagentToExecuteOrReport.

        Name of the project the command is associated with  # noqa: E501

        :param project: The project of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def id(self):
        """Gets the id of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        ID of command  # noqa: E501

        :return: The id of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CondaCommandsForKagentToExecuteOrReport.

        ID of command  # noqa: E501

        :param id: The id of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def arg(self):
        """Gets the arg of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Arguments passed to command  # noqa: E501

        :return: The arg of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._arg

    @arg.setter
    def arg(self, arg):
        """Sets the arg of this CondaCommandsForKagentToExecuteOrReport.

        Arguments passed to command  # noqa: E501

        :param arg: The arg of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._arg = arg

    @property
    def status(self):
        """Gets the status of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Status of comamnd  # noqa: E501

        :return: The status of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CondaCommandsForKagentToExecuteOrReport.

        Status of comamnd  # noqa: E501

        :param status: The status of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["NEW", "SUCCESS", "ONGOING", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Python version to be enabled  # noqa: E501

        :return: The version of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CondaCommandsForKagentToExecuteOrReport.

        Python version to be enabled  # noqa: E501

        :param version: The version of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def channel_url(self):
        """Gets the channel_url of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Pip channel to download a library if not th default  # noqa: E501

        :return: The channel_url of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._channel_url

    @channel_url.setter
    def channel_url(self, channel_url):
        """Sets the channel_url of this CondaCommandsForKagentToExecuteOrReport.

        Pip channel to download a library if not th default  # noqa: E501

        :param channel_url: The channel_url of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._channel_url = channel_url

    @property
    def install_type(self):
        """Gets the install_type of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Type of Conda installation  # noqa: E501

        :return: The install_type of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._install_type

    @install_type.setter
    def install_type(self, install_type):
        """Sets the install_type of this CondaCommandsForKagentToExecuteOrReport.

        Type of Conda installation  # noqa: E501

        :param install_type: The install_type of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENVIRONMENT", "CONDA", "PIP"]  # noqa: E501
        if install_type not in allowed_values:
            raise ValueError(
                "Invalid value for `install_type` ({0}), must be one of {1}"  # noqa: E501
                .format(install_type, allowed_values)
            )

        self._install_type = install_type

    @property
    def lib(self):
        """Gets the lib of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Name of the library to install  # noqa: E501

        :return: The lib of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._lib

    @lib.setter
    def lib(self, lib):
        """Sets the lib of this CondaCommandsForKagentToExecuteOrReport.

        Name of the library to install  # noqa: E501

        :param lib: The lib of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._lib = lib

    @property
    def environment_yml(self):
        """Gets the environment_yml of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Environment exported as a YML file  # noqa: E501

        :return: The environment_yml of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._environment_yml

    @environment_yml.setter
    def environment_yml(self, environment_yml):
        """Sets the environment_yml of this CondaCommandsForKagentToExecuteOrReport.

        Environment exported as a YML file  # noqa: E501

        :param environment_yml: The environment_yml of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._environment_yml = environment_yml

    @property
    def install_jupyter(self):
        """Gets the install_jupyter of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501

        Whether or not to install Jupyter during the environment creation from a YML file  # noqa: E501

        :return: The install_jupyter of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: bool
        """
        return self._install_jupyter

    @install_jupyter.setter
    def install_jupyter(self, install_jupyter):
        """Sets the install_jupyter of this CondaCommandsForKagentToExecuteOrReport.

        Whether or not to install Jupyter during the environment creation from a YML file  # noqa: E501

        :param install_jupyter: The install_jupyter of this CondaCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: bool
        """

        self._install_jupyter = install_jupyter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CondaCommandsForKagentToExecuteOrReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CondaCommandsForKagentToExecuteOrReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
