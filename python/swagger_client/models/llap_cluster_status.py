# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LlapClusterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_status': 'str',
        'hosts': 'list[str]',
        'instance_number': 'int',
        'executors_memory': 'int',
        'cache_memory': 'int',
        'executors_per_instance': 'int',
        'iothreads_per_instance': 'int'
    }

    attribute_map = {
        'cluster_status': 'clusterStatus',
        'hosts': 'hosts',
        'instance_number': 'instanceNumber',
        'executors_memory': 'executorsMemory',
        'cache_memory': 'cacheMemory',
        'executors_per_instance': 'executorsPerInstance',
        'iothreads_per_instance': 'iothreadsPerInstance'
    }

    def __init__(self, cluster_status=None, hosts=None, instance_number=None, executors_memory=None, cache_memory=None, executors_per_instance=None, iothreads_per_instance=None):  # noqa: E501
        """LlapClusterStatus - a model defined in Swagger"""  # noqa: E501
        self._cluster_status = None
        self._hosts = None
        self._instance_number = None
        self._executors_memory = None
        self._cache_memory = None
        self._executors_per_instance = None
        self._iothreads_per_instance = None
        self.discriminator = None
        if cluster_status is not None:
            self.cluster_status = cluster_status
        if hosts is not None:
            self.hosts = hosts
        if instance_number is not None:
            self.instance_number = instance_number
        if executors_memory is not None:
            self.executors_memory = executors_memory
        if cache_memory is not None:
            self.cache_memory = cache_memory
        if executors_per_instance is not None:
            self.executors_per_instance = executors_per_instance
        if iothreads_per_instance is not None:
            self.iothreads_per_instance = iothreads_per_instance

    @property
    def cluster_status(self):
        """Gets the cluster_status of this LlapClusterStatus.  # noqa: E501


        :return: The cluster_status of this LlapClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """Sets the cluster_status of this LlapClusterStatus.


        :param cluster_status: The cluster_status of this LlapClusterStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOWN", "UP", "LAUNCHING"]  # noqa: E501
        if cluster_status not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_status` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_status, allowed_values)
            )

        self._cluster_status = cluster_status

    @property
    def hosts(self):
        """Gets the hosts of this LlapClusterStatus.  # noqa: E501


        :return: The hosts of this LlapClusterStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this LlapClusterStatus.


        :param hosts: The hosts of this LlapClusterStatus.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def instance_number(self):
        """Gets the instance_number of this LlapClusterStatus.  # noqa: E501


        :return: The instance_number of this LlapClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._instance_number

    @instance_number.setter
    def instance_number(self, instance_number):
        """Sets the instance_number of this LlapClusterStatus.


        :param instance_number: The instance_number of this LlapClusterStatus.  # noqa: E501
        :type: int
        """

        self._instance_number = instance_number

    @property
    def executors_memory(self):
        """Gets the executors_memory of this LlapClusterStatus.  # noqa: E501


        :return: The executors_memory of this LlapClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._executors_memory

    @executors_memory.setter
    def executors_memory(self, executors_memory):
        """Sets the executors_memory of this LlapClusterStatus.


        :param executors_memory: The executors_memory of this LlapClusterStatus.  # noqa: E501
        :type: int
        """

        self._executors_memory = executors_memory

    @property
    def cache_memory(self):
        """Gets the cache_memory of this LlapClusterStatus.  # noqa: E501


        :return: The cache_memory of this LlapClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._cache_memory

    @cache_memory.setter
    def cache_memory(self, cache_memory):
        """Sets the cache_memory of this LlapClusterStatus.


        :param cache_memory: The cache_memory of this LlapClusterStatus.  # noqa: E501
        :type: int
        """

        self._cache_memory = cache_memory

    @property
    def executors_per_instance(self):
        """Gets the executors_per_instance of this LlapClusterStatus.  # noqa: E501


        :return: The executors_per_instance of this LlapClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._executors_per_instance

    @executors_per_instance.setter
    def executors_per_instance(self, executors_per_instance):
        """Sets the executors_per_instance of this LlapClusterStatus.


        :param executors_per_instance: The executors_per_instance of this LlapClusterStatus.  # noqa: E501
        :type: int
        """

        self._executors_per_instance = executors_per_instance

    @property
    def iothreads_per_instance(self):
        """Gets the iothreads_per_instance of this LlapClusterStatus.  # noqa: E501


        :return: The iothreads_per_instance of this LlapClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._iothreads_per_instance

    @iothreads_per_instance.setter
    def iothreads_per_instance(self, iothreads_per_instance):
        """Sets the iothreads_per_instance of this LlapClusterStatus.


        :param iothreads_per_instance: The iothreads_per_instance of this LlapClusterStatus.  # noqa: E501
        :type: int
        """

        self._iothreads_per_instance = iothreads_per_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LlapClusterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LlapClusterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
