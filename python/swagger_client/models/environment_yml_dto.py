# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EnvironmentYmlDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_yml_path': 'str',
        'cpu_yml_path': 'str',
        'gpu_yml_path': 'str',
        'install_jupyter': 'bool'
    }

    attribute_map = {
        'all_yml_path': 'allYmlPath',
        'cpu_yml_path': 'cpuYmlPath',
        'gpu_yml_path': 'gpuYmlPath',
        'install_jupyter': 'installJupyter'
    }

    def __init__(self, all_yml_path=None, cpu_yml_path=None, gpu_yml_path=None, install_jupyter=None):  # noqa: E501
        """EnvironmentYmlDTO - a model defined in Swagger"""  # noqa: E501
        self._all_yml_path = None
        self._cpu_yml_path = None
        self._gpu_yml_path = None
        self._install_jupyter = None
        self.discriminator = None
        if all_yml_path is not None:
            self.all_yml_path = all_yml_path
        if cpu_yml_path is not None:
            self.cpu_yml_path = cpu_yml_path
        if gpu_yml_path is not None:
            self.gpu_yml_path = gpu_yml_path
        if install_jupyter is not None:
            self.install_jupyter = install_jupyter

    @property
    def all_yml_path(self):
        """Gets the all_yml_path of this EnvironmentYmlDTO.  # noqa: E501

        Path to a yml with libraries to be installed on all machine types.  # noqa: E501

        :return: The all_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :rtype: str
        """
        return self._all_yml_path

    @all_yml_path.setter
    def all_yml_path(self, all_yml_path):
        """Sets the all_yml_path of this EnvironmentYmlDTO.

        Path to a yml with libraries to be installed on all machine types.  # noqa: E501

        :param all_yml_path: The all_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :type: str
        """

        self._all_yml_path = all_yml_path

    @property
    def cpu_yml_path(self):
        """Gets the cpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501

        Path to a yml with libraries to be installed on CPU machines.  # noqa: E501

        :return: The cpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :rtype: str
        """
        return self._cpu_yml_path

    @cpu_yml_path.setter
    def cpu_yml_path(self, cpu_yml_path):
        """Sets the cpu_yml_path of this EnvironmentYmlDTO.

        Path to a yml with libraries to be installed on CPU machines.  # noqa: E501

        :param cpu_yml_path: The cpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :type: str
        """

        self._cpu_yml_path = cpu_yml_path

    @property
    def gpu_yml_path(self):
        """Gets the gpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501

        Path to a yml with libraries to be installed on GPU machines.  # noqa: E501

        :return: The gpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :rtype: str
        """
        return self._gpu_yml_path

    @gpu_yml_path.setter
    def gpu_yml_path(self, gpu_yml_path):
        """Sets the gpu_yml_path of this EnvironmentYmlDTO.

        Path to a yml with libraries to be installed on GPU machines.  # noqa: E501

        :param gpu_yml_path: The gpu_yml_path of this EnvironmentYmlDTO.  # noqa: E501
        :type: str
        """

        self._gpu_yml_path = gpu_yml_path

    @property
    def install_jupyter(self):
        """Gets the install_jupyter of this EnvironmentYmlDTO.  # noqa: E501

        Install Jupyter in the environment.  # noqa: E501

        :return: The install_jupyter of this EnvironmentYmlDTO.  # noqa: E501
        :rtype: bool
        """
        return self._install_jupyter

    @install_jupyter.setter
    def install_jupyter(self, install_jupyter):
        """Sets the install_jupyter of this EnvironmentYmlDTO.

        Install Jupyter in the environment.  # noqa: E501

        :param install_jupyter: The install_jupyter of this EnvironmentYmlDTO.  # noqa: E501
        :type: bool
        """

        self._install_jupyter = install_jupyter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvironmentYmlDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentYmlDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
