# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.feature_dto import FeatureDTO  # noqa: F401,E501
from swagger_client.models.featuregroup_dto import FeaturegroupDTO  # noqa: F401,E501


class FeaturestoreUtilJobDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'features': 'list[FeatureDTO]',
        'featuregroups': 'list[FeaturegroupDTO]',
        'featurestore': 'str',
        'training_dataset': 'str',
        'featuregroup': 'str',
        'join_key': 'str',
        'description': 'str',
        'data_format': 'str',
        'version': 'int',
        'descriptive_stats': 'bool',
        'feature_correlation': 'bool',
        'cluster_analysis': 'bool',
        'feature_histograms': 'bool',
        'stat_columns': 'list[str]',
        'operation': 'str',
        'sql_query': 'str',
        'hive_database': 'str',
        'jdbc_string': 'str',
        'jdbc_arguments': 'list[str]',
        'online': 'bool'
    }

    attribute_map = {
        'file_name': 'fileName',
        'features': 'features',
        'featuregroups': 'featuregroups',
        'featurestore': 'featurestore',
        'training_dataset': 'trainingDataset',
        'featuregroup': 'featuregroup',
        'join_key': 'joinKey',
        'description': 'description',
        'data_format': 'dataFormat',
        'version': 'version',
        'descriptive_stats': 'descriptiveStats',
        'feature_correlation': 'featureCorrelation',
        'cluster_analysis': 'clusterAnalysis',
        'feature_histograms': 'featureHistograms',
        'stat_columns': 'statColumns',
        'operation': 'operation',
        'sql_query': 'sqlQuery',
        'hive_database': 'hiveDatabase',
        'jdbc_string': 'jdbcString',
        'jdbc_arguments': 'jdbcArguments',
        'online': 'online'
    }

    def __init__(self, file_name=None, features=None, featuregroups=None, featurestore=None, training_dataset=None, featuregroup=None, join_key=None, description=None, data_format=None, version=None, descriptive_stats=None, feature_correlation=None, cluster_analysis=None, feature_histograms=None, stat_columns=None, operation=None, sql_query=None, hive_database=None, jdbc_string=None, jdbc_arguments=None, online=None):  # noqa: E501
        """FeaturestoreUtilJobDTO - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._features = None
        self._featuregroups = None
        self._featurestore = None
        self._training_dataset = None
        self._featuregroup = None
        self._join_key = None
        self._description = None
        self._data_format = None
        self._version = None
        self._descriptive_stats = None
        self._feature_correlation = None
        self._cluster_analysis = None
        self._feature_histograms = None
        self._stat_columns = None
        self._operation = None
        self._sql_query = None
        self._hive_database = None
        self._jdbc_string = None
        self._jdbc_arguments = None
        self._online = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if features is not None:
            self.features = features
        if featuregroups is not None:
            self.featuregroups = featuregroups
        if featurestore is not None:
            self.featurestore = featurestore
        if training_dataset is not None:
            self.training_dataset = training_dataset
        if featuregroup is not None:
            self.featuregroup = featuregroup
        if join_key is not None:
            self.join_key = join_key
        if description is not None:
            self.description = description
        if data_format is not None:
            self.data_format = data_format
        if version is not None:
            self.version = version
        if descriptive_stats is not None:
            self.descriptive_stats = descriptive_stats
        if feature_correlation is not None:
            self.feature_correlation = feature_correlation
        if cluster_analysis is not None:
            self.cluster_analysis = cluster_analysis
        if feature_histograms is not None:
            self.feature_histograms = feature_histograms
        if stat_columns is not None:
            self.stat_columns = stat_columns
        if operation is not None:
            self.operation = operation
        if sql_query is not None:
            self.sql_query = sql_query
        if hive_database is not None:
            self.hive_database = hive_database
        if jdbc_string is not None:
            self.jdbc_string = jdbc_string
        if jdbc_arguments is not None:
            self.jdbc_arguments = jdbc_arguments
        if online is not None:
            self.online = online

    @property
    def file_name(self):
        """Gets the file_name of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The file_name of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FeaturestoreUtilJobDTO.


        :param file_name: The file_name of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def features(self):
        """Gets the features of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The features of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: list[FeatureDTO]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this FeaturestoreUtilJobDTO.


        :param features: The features of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: list[FeatureDTO]
        """

        self._features = features

    @property
    def featuregroups(self):
        """Gets the featuregroups of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The featuregroups of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: list[FeaturegroupDTO]
        """
        return self._featuregroups

    @featuregroups.setter
    def featuregroups(self, featuregroups):
        """Sets the featuregroups of this FeaturestoreUtilJobDTO.


        :param featuregroups: The featuregroups of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: list[FeaturegroupDTO]
        """

        self._featuregroups = featuregroups

    @property
    def featurestore(self):
        """Gets the featurestore of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The featurestore of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._featurestore

    @featurestore.setter
    def featurestore(self, featurestore):
        """Sets the featurestore of this FeaturestoreUtilJobDTO.


        :param featurestore: The featurestore of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._featurestore = featurestore

    @property
    def training_dataset(self):
        """Gets the training_dataset of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The training_dataset of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._training_dataset

    @training_dataset.setter
    def training_dataset(self, training_dataset):
        """Sets the training_dataset of this FeaturestoreUtilJobDTO.


        :param training_dataset: The training_dataset of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._training_dataset = training_dataset

    @property
    def featuregroup(self):
        """Gets the featuregroup of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The featuregroup of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._featuregroup

    @featuregroup.setter
    def featuregroup(self, featuregroup):
        """Sets the featuregroup of this FeaturestoreUtilJobDTO.


        :param featuregroup: The featuregroup of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._featuregroup = featuregroup

    @property
    def join_key(self):
        """Gets the join_key of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The join_key of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._join_key

    @join_key.setter
    def join_key(self, join_key):
        """Sets the join_key of this FeaturestoreUtilJobDTO.


        :param join_key: The join_key of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._join_key = join_key

    @property
    def description(self):
        """Gets the description of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The description of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeaturestoreUtilJobDTO.


        :param description: The description of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def data_format(self):
        """Gets the data_format of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The data_format of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this FeaturestoreUtilJobDTO.


        :param data_format: The data_format of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._data_format = data_format

    @property
    def version(self):
        """Gets the version of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The version of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FeaturestoreUtilJobDTO.


        :param version: The version of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def descriptive_stats(self):
        """Gets the descriptive_stats of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The descriptive_stats of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._descriptive_stats

    @descriptive_stats.setter
    def descriptive_stats(self, descriptive_stats):
        """Sets the descriptive_stats of this FeaturestoreUtilJobDTO.


        :param descriptive_stats: The descriptive_stats of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: bool
        """

        self._descriptive_stats = descriptive_stats

    @property
    def feature_correlation(self):
        """Gets the feature_correlation of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The feature_correlation of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._feature_correlation

    @feature_correlation.setter
    def feature_correlation(self, feature_correlation):
        """Sets the feature_correlation of this FeaturestoreUtilJobDTO.


        :param feature_correlation: The feature_correlation of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: bool
        """

        self._feature_correlation = feature_correlation

    @property
    def cluster_analysis(self):
        """Gets the cluster_analysis of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The cluster_analysis of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_analysis

    @cluster_analysis.setter
    def cluster_analysis(self, cluster_analysis):
        """Sets the cluster_analysis of this FeaturestoreUtilJobDTO.


        :param cluster_analysis: The cluster_analysis of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: bool
        """

        self._cluster_analysis = cluster_analysis

    @property
    def feature_histograms(self):
        """Gets the feature_histograms of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The feature_histograms of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._feature_histograms

    @feature_histograms.setter
    def feature_histograms(self, feature_histograms):
        """Sets the feature_histograms of this FeaturestoreUtilJobDTO.


        :param feature_histograms: The feature_histograms of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: bool
        """

        self._feature_histograms = feature_histograms

    @property
    def stat_columns(self):
        """Gets the stat_columns of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The stat_columns of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._stat_columns

    @stat_columns.setter
    def stat_columns(self, stat_columns):
        """Sets the stat_columns of this FeaturestoreUtilJobDTO.


        :param stat_columns: The stat_columns of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: list[str]
        """

        self._stat_columns = stat_columns

    @property
    def operation(self):
        """Gets the operation of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The operation of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this FeaturestoreUtilJobDTO.


        :param operation: The operation of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def sql_query(self):
        """Gets the sql_query of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The sql_query of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._sql_query

    @sql_query.setter
    def sql_query(self, sql_query):
        """Sets the sql_query of this FeaturestoreUtilJobDTO.


        :param sql_query: The sql_query of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._sql_query = sql_query

    @property
    def hive_database(self):
        """Gets the hive_database of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The hive_database of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._hive_database

    @hive_database.setter
    def hive_database(self, hive_database):
        """Sets the hive_database of this FeaturestoreUtilJobDTO.


        :param hive_database: The hive_database of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._hive_database = hive_database

    @property
    def jdbc_string(self):
        """Gets the jdbc_string of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The jdbc_string of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_string

    @jdbc_string.setter
    def jdbc_string(self, jdbc_string):
        """Sets the jdbc_string of this FeaturestoreUtilJobDTO.


        :param jdbc_string: The jdbc_string of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: str
        """

        self._jdbc_string = jdbc_string

    @property
    def jdbc_arguments(self):
        """Gets the jdbc_arguments of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The jdbc_arguments of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._jdbc_arguments

    @jdbc_arguments.setter
    def jdbc_arguments(self, jdbc_arguments):
        """Sets the jdbc_arguments of this FeaturestoreUtilJobDTO.


        :param jdbc_arguments: The jdbc_arguments of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: list[str]
        """

        self._jdbc_arguments = jdbc_arguments

    @property
    def online(self):
        """Gets the online of this FeaturestoreUtilJobDTO.  # noqa: E501


        :return: The online of this FeaturestoreUtilJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this FeaturestoreUtilJobDTO.


        :param online: The online of this FeaturestoreUtilJobDTO.  # noqa: E501
        :type: bool
        """

        self._online = online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturestoreUtilJobDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturestoreUtilJobDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
