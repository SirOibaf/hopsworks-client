# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.user_card_dto import UserCardDTO  # noqa: F401,E501


class DataSetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inode_id': 'int',
        'name': 'str',
        'description': 'str',
        'is_public': 'bool',
        'searchable': 'bool',
        'generate_readme': 'bool',
        'permissions': 'str',
        'template': 'int',
        'project_id': 'int',
        'project_ids': 'list[int]',
        'project_name': 'str',
        'template_name': 'str',
        'project_team': 'list[UserCardDTO]',
        'shared_with': 'list[str]',
        'type': 'str',
        'members': 'list[UserCardDTO]'
    }

    attribute_map = {
        'inode_id': 'inodeId',
        'name': 'name',
        'description': 'description',
        'is_public': 'isPublic',
        'searchable': 'searchable',
        'generate_readme': 'generateReadme',
        'permissions': 'permissions',
        'template': 'template',
        'project_id': 'projectId',
        'project_ids': 'projectIds',
        'project_name': 'projectName',
        'template_name': 'templateName',
        'project_team': 'projectTeam',
        'shared_with': 'sharedWith',
        'type': 'type',
        'members': 'members'
    }

    def __init__(self, inode_id=None, name=None, description=None, is_public=None, searchable=None, generate_readme=None, permissions=None, template=None, project_id=None, project_ids=None, project_name=None, template_name=None, project_team=None, shared_with=None, type=None, members=None):  # noqa: E501
        """DataSetDTO - a model defined in Swagger"""  # noqa: E501
        self._inode_id = None
        self._name = None
        self._description = None
        self._is_public = None
        self._searchable = None
        self._generate_readme = None
        self._permissions = None
        self._template = None
        self._project_id = None
        self._project_ids = None
        self._project_name = None
        self._template_name = None
        self._project_team = None
        self._shared_with = None
        self._type = None
        self._members = None
        self.discriminator = None
        if inode_id is not None:
            self.inode_id = inode_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_public is not None:
            self.is_public = is_public
        if searchable is not None:
            self.searchable = searchable
        if generate_readme is not None:
            self.generate_readme = generate_readme
        if permissions is not None:
            self.permissions = permissions
        if template is not None:
            self.template = template
        if project_id is not None:
            self.project_id = project_id
        if project_ids is not None:
            self.project_ids = project_ids
        if project_name is not None:
            self.project_name = project_name
        if template_name is not None:
            self.template_name = template_name
        if project_team is not None:
            self.project_team = project_team
        if shared_with is not None:
            self.shared_with = shared_with
        if type is not None:
            self.type = type
        if members is not None:
            self.members = members

    @property
    def inode_id(self):
        """Gets the inode_id of this DataSetDTO.  # noqa: E501


        :return: The inode_id of this DataSetDTO.  # noqa: E501
        :rtype: int
        """
        return self._inode_id

    @inode_id.setter
    def inode_id(self, inode_id):
        """Sets the inode_id of this DataSetDTO.


        :param inode_id: The inode_id of this DataSetDTO.  # noqa: E501
        :type: int
        """

        self._inode_id = inode_id

    @property
    def name(self):
        """Gets the name of this DataSetDTO.  # noqa: E501


        :return: The name of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetDTO.


        :param name: The name of this DataSetDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataSetDTO.  # noqa: E501


        :return: The description of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSetDTO.


        :param description: The description of this DataSetDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_public(self):
        """Gets the is_public of this DataSetDTO.  # noqa: E501


        :return: The is_public of this DataSetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this DataSetDTO.


        :param is_public: The is_public of this DataSetDTO.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def searchable(self):
        """Gets the searchable of this DataSetDTO.  # noqa: E501


        :return: The searchable of this DataSetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this DataSetDTO.


        :param searchable: The searchable of this DataSetDTO.  # noqa: E501
        :type: bool
        """

        self._searchable = searchable

    @property
    def generate_readme(self):
        """Gets the generate_readme of this DataSetDTO.  # noqa: E501


        :return: The generate_readme of this DataSetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._generate_readme

    @generate_readme.setter
    def generate_readme(self, generate_readme):
        """Sets the generate_readme of this DataSetDTO.


        :param generate_readme: The generate_readme of this DataSetDTO.  # noqa: E501
        :type: bool
        """

        self._generate_readme = generate_readme

    @property
    def permissions(self):
        """Gets the permissions of this DataSetDTO.  # noqa: E501


        :return: The permissions of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DataSetDTO.


        :param permissions: The permissions of this DataSetDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["GROUP_WRITABLE_SB", "GROUP_WRITABLE", "OWNER_ONLY"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"  # noqa: E501
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def template(self):
        """Gets the template of this DataSetDTO.  # noqa: E501


        :return: The template of this DataSetDTO.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DataSetDTO.


        :param template: The template of this DataSetDTO.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def project_id(self):
        """Gets the project_id of this DataSetDTO.  # noqa: E501


        :return: The project_id of this DataSetDTO.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DataSetDTO.


        :param project_id: The project_id of this DataSetDTO.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_ids(self):
        """Gets the project_ids of this DataSetDTO.  # noqa: E501


        :return: The project_ids of this DataSetDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this DataSetDTO.


        :param project_ids: The project_ids of this DataSetDTO.  # noqa: E501
        :type: list[int]
        """

        self._project_ids = project_ids

    @property
    def project_name(self):
        """Gets the project_name of this DataSetDTO.  # noqa: E501


        :return: The project_name of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DataSetDTO.


        :param project_name: The project_name of this DataSetDTO.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def template_name(self):
        """Gets the template_name of this DataSetDTO.  # noqa: E501


        :return: The template_name of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this DataSetDTO.


        :param template_name: The template_name of this DataSetDTO.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def project_team(self):
        """Gets the project_team of this DataSetDTO.  # noqa: E501


        :return: The project_team of this DataSetDTO.  # noqa: E501
        :rtype: list[UserCardDTO]
        """
        return self._project_team

    @project_team.setter
    def project_team(self, project_team):
        """Sets the project_team of this DataSetDTO.


        :param project_team: The project_team of this DataSetDTO.  # noqa: E501
        :type: list[UserCardDTO]
        """

        self._project_team = project_team

    @property
    def shared_with(self):
        """Gets the shared_with of this DataSetDTO.  # noqa: E501


        :return: The shared_with of this DataSetDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this DataSetDTO.


        :param shared_with: The shared_with of this DataSetDTO.  # noqa: E501
        :type: list[str]
        """

        self._shared_with = shared_with

    @property
    def type(self):
        """Gets the type of this DataSetDTO.  # noqa: E501


        :return: The type of this DataSetDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSetDTO.


        :param type: The type of this DataSetDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATASET", "HIVEDB", "FEATURESTORE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def members(self):
        """Gets the members of this DataSetDTO.  # noqa: E501


        :return: The members of this DataSetDTO.  # noqa: E501
        :rtype: list[UserCardDTO]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this DataSetDTO.


        :param members: The members of this DataSetDTO.  # noqa: E501
        :type: list[UserCardDTO]
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
