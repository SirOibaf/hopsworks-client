# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class QuotasDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hdfs_usage_in_bytes': 'int',
        'hdfs_quota_in_bytes': 'int',
        'hdfs_ns_count': 'int',
        'hdfs_ns_quota': 'int',
        'hive_hdfs_usage_in_bytes': 'int',
        'hive_hdfs_quota_in_bytes': 'int',
        'hive_hdfs_ns_count': 'int',
        'hive_hdfs_ns_quota': 'int',
        'featurestore_hdfs_usage_in_bytes': 'int',
        'featurestore_hdfs_quota_in_bytes': 'int',
        'featurestore_hdfs_ns_count': 'int',
        'featurestore_hdfs_ns_quota': 'int',
        'yarn_quota_in_secs': 'float',
        'yarn_used_quota_in_secs': 'float',
        'kafka_max_num_topics': 'int'
    }

    attribute_map = {
        'hdfs_usage_in_bytes': 'hdfsUsageInBytes',
        'hdfs_quota_in_bytes': 'hdfsQuotaInBytes',
        'hdfs_ns_count': 'hdfsNsCount',
        'hdfs_ns_quota': 'hdfsNsQuota',
        'hive_hdfs_usage_in_bytes': 'hiveHdfsUsageInBytes',
        'hive_hdfs_quota_in_bytes': 'hiveHdfsQuotaInBytes',
        'hive_hdfs_ns_count': 'hiveHdfsNsCount',
        'hive_hdfs_ns_quota': 'hiveHdfsNsQuota',
        'featurestore_hdfs_usage_in_bytes': 'featurestoreHdfsUsageInBytes',
        'featurestore_hdfs_quota_in_bytes': 'featurestoreHdfsQuotaInBytes',
        'featurestore_hdfs_ns_count': 'featurestoreHdfsNsCount',
        'featurestore_hdfs_ns_quota': 'featurestoreHdfsNsQuota',
        'yarn_quota_in_secs': 'yarnQuotaInSecs',
        'yarn_used_quota_in_secs': 'yarnUsedQuotaInSecs',
        'kafka_max_num_topics': 'kafkaMaxNumTopics'
    }

    def __init__(self, hdfs_usage_in_bytes=None, hdfs_quota_in_bytes=None, hdfs_ns_count=None, hdfs_ns_quota=None, hive_hdfs_usage_in_bytes=None, hive_hdfs_quota_in_bytes=None, hive_hdfs_ns_count=None, hive_hdfs_ns_quota=None, featurestore_hdfs_usage_in_bytes=None, featurestore_hdfs_quota_in_bytes=None, featurestore_hdfs_ns_count=None, featurestore_hdfs_ns_quota=None, yarn_quota_in_secs=None, yarn_used_quota_in_secs=None, kafka_max_num_topics=None):  # noqa: E501
        """QuotasDTO - a model defined in Swagger"""  # noqa: E501
        self._hdfs_usage_in_bytes = None
        self._hdfs_quota_in_bytes = None
        self._hdfs_ns_count = None
        self._hdfs_ns_quota = None
        self._hive_hdfs_usage_in_bytes = None
        self._hive_hdfs_quota_in_bytes = None
        self._hive_hdfs_ns_count = None
        self._hive_hdfs_ns_quota = None
        self._featurestore_hdfs_usage_in_bytes = None
        self._featurestore_hdfs_quota_in_bytes = None
        self._featurestore_hdfs_ns_count = None
        self._featurestore_hdfs_ns_quota = None
        self._yarn_quota_in_secs = None
        self._yarn_used_quota_in_secs = None
        self._kafka_max_num_topics = None
        self.discriminator = None
        if hdfs_usage_in_bytes is not None:
            self.hdfs_usage_in_bytes = hdfs_usage_in_bytes
        if hdfs_quota_in_bytes is not None:
            self.hdfs_quota_in_bytes = hdfs_quota_in_bytes
        if hdfs_ns_count is not None:
            self.hdfs_ns_count = hdfs_ns_count
        if hdfs_ns_quota is not None:
            self.hdfs_ns_quota = hdfs_ns_quota
        if hive_hdfs_usage_in_bytes is not None:
            self.hive_hdfs_usage_in_bytes = hive_hdfs_usage_in_bytes
        if hive_hdfs_quota_in_bytes is not None:
            self.hive_hdfs_quota_in_bytes = hive_hdfs_quota_in_bytes
        if hive_hdfs_ns_count is not None:
            self.hive_hdfs_ns_count = hive_hdfs_ns_count
        if hive_hdfs_ns_quota is not None:
            self.hive_hdfs_ns_quota = hive_hdfs_ns_quota
        if featurestore_hdfs_usage_in_bytes is not None:
            self.featurestore_hdfs_usage_in_bytes = featurestore_hdfs_usage_in_bytes
        if featurestore_hdfs_quota_in_bytes is not None:
            self.featurestore_hdfs_quota_in_bytes = featurestore_hdfs_quota_in_bytes
        if featurestore_hdfs_ns_count is not None:
            self.featurestore_hdfs_ns_count = featurestore_hdfs_ns_count
        if featurestore_hdfs_ns_quota is not None:
            self.featurestore_hdfs_ns_quota = featurestore_hdfs_ns_quota
        if yarn_quota_in_secs is not None:
            self.yarn_quota_in_secs = yarn_quota_in_secs
        if yarn_used_quota_in_secs is not None:
            self.yarn_used_quota_in_secs = yarn_used_quota_in_secs
        if kafka_max_num_topics is not None:
            self.kafka_max_num_topics = kafka_max_num_topics

    @property
    def hdfs_usage_in_bytes(self):
        """Gets the hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_usage_in_bytes

    @hdfs_usage_in_bytes.setter
    def hdfs_usage_in_bytes(self, hdfs_usage_in_bytes):
        """Sets the hdfs_usage_in_bytes of this QuotasDTO.


        :param hdfs_usage_in_bytes: The hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hdfs_usage_in_bytes = hdfs_usage_in_bytes

    @property
    def hdfs_quota_in_bytes(self):
        """Gets the hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_quota_in_bytes

    @hdfs_quota_in_bytes.setter
    def hdfs_quota_in_bytes(self, hdfs_quota_in_bytes):
        """Sets the hdfs_quota_in_bytes of this QuotasDTO.


        :param hdfs_quota_in_bytes: The hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hdfs_quota_in_bytes = hdfs_quota_in_bytes

    @property
    def hdfs_ns_count(self):
        """Gets the hdfs_ns_count of this QuotasDTO.  # noqa: E501


        :return: The hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_ns_count

    @hdfs_ns_count.setter
    def hdfs_ns_count(self, hdfs_ns_count):
        """Sets the hdfs_ns_count of this QuotasDTO.


        :param hdfs_ns_count: The hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hdfs_ns_count = hdfs_ns_count

    @property
    def hdfs_ns_quota(self):
        """Gets the hdfs_ns_quota of this QuotasDTO.  # noqa: E501


        :return: The hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_ns_quota

    @hdfs_ns_quota.setter
    def hdfs_ns_quota(self, hdfs_ns_quota):
        """Sets the hdfs_ns_quota of this QuotasDTO.


        :param hdfs_ns_quota: The hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hdfs_ns_quota = hdfs_ns_quota

    @property
    def hive_hdfs_usage_in_bytes(self):
        """Gets the hive_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The hive_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hive_hdfs_usage_in_bytes

    @hive_hdfs_usage_in_bytes.setter
    def hive_hdfs_usage_in_bytes(self, hive_hdfs_usage_in_bytes):
        """Sets the hive_hdfs_usage_in_bytes of this QuotasDTO.


        :param hive_hdfs_usage_in_bytes: The hive_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hive_hdfs_usage_in_bytes = hive_hdfs_usage_in_bytes

    @property
    def hive_hdfs_quota_in_bytes(self):
        """Gets the hive_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The hive_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hive_hdfs_quota_in_bytes

    @hive_hdfs_quota_in_bytes.setter
    def hive_hdfs_quota_in_bytes(self, hive_hdfs_quota_in_bytes):
        """Sets the hive_hdfs_quota_in_bytes of this QuotasDTO.


        :param hive_hdfs_quota_in_bytes: The hive_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hive_hdfs_quota_in_bytes = hive_hdfs_quota_in_bytes

    @property
    def hive_hdfs_ns_count(self):
        """Gets the hive_hdfs_ns_count of this QuotasDTO.  # noqa: E501


        :return: The hive_hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hive_hdfs_ns_count

    @hive_hdfs_ns_count.setter
    def hive_hdfs_ns_count(self, hive_hdfs_ns_count):
        """Sets the hive_hdfs_ns_count of this QuotasDTO.


        :param hive_hdfs_ns_count: The hive_hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hive_hdfs_ns_count = hive_hdfs_ns_count

    @property
    def hive_hdfs_ns_quota(self):
        """Gets the hive_hdfs_ns_quota of this QuotasDTO.  # noqa: E501


        :return: The hive_hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._hive_hdfs_ns_quota

    @hive_hdfs_ns_quota.setter
    def hive_hdfs_ns_quota(self, hive_hdfs_ns_quota):
        """Sets the hive_hdfs_ns_quota of this QuotasDTO.


        :param hive_hdfs_ns_quota: The hive_hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._hive_hdfs_ns_quota = hive_hdfs_ns_quota

    @property
    def featurestore_hdfs_usage_in_bytes(self):
        """Gets the featurestore_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The featurestore_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._featurestore_hdfs_usage_in_bytes

    @featurestore_hdfs_usage_in_bytes.setter
    def featurestore_hdfs_usage_in_bytes(self, featurestore_hdfs_usage_in_bytes):
        """Sets the featurestore_hdfs_usage_in_bytes of this QuotasDTO.


        :param featurestore_hdfs_usage_in_bytes: The featurestore_hdfs_usage_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._featurestore_hdfs_usage_in_bytes = featurestore_hdfs_usage_in_bytes

    @property
    def featurestore_hdfs_quota_in_bytes(self):
        """Gets the featurestore_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501


        :return: The featurestore_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._featurestore_hdfs_quota_in_bytes

    @featurestore_hdfs_quota_in_bytes.setter
    def featurestore_hdfs_quota_in_bytes(self, featurestore_hdfs_quota_in_bytes):
        """Sets the featurestore_hdfs_quota_in_bytes of this QuotasDTO.


        :param featurestore_hdfs_quota_in_bytes: The featurestore_hdfs_quota_in_bytes of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._featurestore_hdfs_quota_in_bytes = featurestore_hdfs_quota_in_bytes

    @property
    def featurestore_hdfs_ns_count(self):
        """Gets the featurestore_hdfs_ns_count of this QuotasDTO.  # noqa: E501


        :return: The featurestore_hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._featurestore_hdfs_ns_count

    @featurestore_hdfs_ns_count.setter
    def featurestore_hdfs_ns_count(self, featurestore_hdfs_ns_count):
        """Sets the featurestore_hdfs_ns_count of this QuotasDTO.


        :param featurestore_hdfs_ns_count: The featurestore_hdfs_ns_count of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._featurestore_hdfs_ns_count = featurestore_hdfs_ns_count

    @property
    def featurestore_hdfs_ns_quota(self):
        """Gets the featurestore_hdfs_ns_quota of this QuotasDTO.  # noqa: E501


        :return: The featurestore_hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._featurestore_hdfs_ns_quota

    @featurestore_hdfs_ns_quota.setter
    def featurestore_hdfs_ns_quota(self, featurestore_hdfs_ns_quota):
        """Sets the featurestore_hdfs_ns_quota of this QuotasDTO.


        :param featurestore_hdfs_ns_quota: The featurestore_hdfs_ns_quota of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._featurestore_hdfs_ns_quota = featurestore_hdfs_ns_quota

    @property
    def yarn_quota_in_secs(self):
        """Gets the yarn_quota_in_secs of this QuotasDTO.  # noqa: E501


        :return: The yarn_quota_in_secs of this QuotasDTO.  # noqa: E501
        :rtype: float
        """
        return self._yarn_quota_in_secs

    @yarn_quota_in_secs.setter
    def yarn_quota_in_secs(self, yarn_quota_in_secs):
        """Sets the yarn_quota_in_secs of this QuotasDTO.


        :param yarn_quota_in_secs: The yarn_quota_in_secs of this QuotasDTO.  # noqa: E501
        :type: float
        """

        self._yarn_quota_in_secs = yarn_quota_in_secs

    @property
    def yarn_used_quota_in_secs(self):
        """Gets the yarn_used_quota_in_secs of this QuotasDTO.  # noqa: E501


        :return: The yarn_used_quota_in_secs of this QuotasDTO.  # noqa: E501
        :rtype: float
        """
        return self._yarn_used_quota_in_secs

    @yarn_used_quota_in_secs.setter
    def yarn_used_quota_in_secs(self, yarn_used_quota_in_secs):
        """Sets the yarn_used_quota_in_secs of this QuotasDTO.


        :param yarn_used_quota_in_secs: The yarn_used_quota_in_secs of this QuotasDTO.  # noqa: E501
        :type: float
        """

        self._yarn_used_quota_in_secs = yarn_used_quota_in_secs

    @property
    def kafka_max_num_topics(self):
        """Gets the kafka_max_num_topics of this QuotasDTO.  # noqa: E501


        :return: The kafka_max_num_topics of this QuotasDTO.  # noqa: E501
        :rtype: int
        """
        return self._kafka_max_num_topics

    @kafka_max_num_topics.setter
    def kafka_max_num_topics(self, kafka_max_num_topics):
        """Sets the kafka_max_num_topics of this QuotasDTO.


        :param kafka_max_num_topics: The kafka_max_num_topics of this QuotasDTO.  # noqa: E501
        :type: int
        """

        self._kafka_max_num_topics = kafka_max_num_topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotasDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotasDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
