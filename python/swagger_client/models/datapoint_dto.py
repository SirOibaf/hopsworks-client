# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DatapointDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datapoint_name': 'str',
        'first_dimension': 'float',
        'second_dimension': 'float'
    }

    attribute_map = {
        'datapoint_name': 'datapointName',
        'first_dimension': 'firstDimension',
        'second_dimension': 'secondDimension'
    }

    def __init__(self, datapoint_name=None, first_dimension=None, second_dimension=None):  # noqa: E501
        """DatapointDTO - a model defined in Swagger"""  # noqa: E501
        self._datapoint_name = None
        self._first_dimension = None
        self._second_dimension = None
        self.discriminator = None
        if datapoint_name is not None:
            self.datapoint_name = datapoint_name
        if first_dimension is not None:
            self.first_dimension = first_dimension
        if second_dimension is not None:
            self.second_dimension = second_dimension

    @property
    def datapoint_name(self):
        """Gets the datapoint_name of this DatapointDTO.  # noqa: E501


        :return: The datapoint_name of this DatapointDTO.  # noqa: E501
        :rtype: str
        """
        return self._datapoint_name

    @datapoint_name.setter
    def datapoint_name(self, datapoint_name):
        """Sets the datapoint_name of this DatapointDTO.


        :param datapoint_name: The datapoint_name of this DatapointDTO.  # noqa: E501
        :type: str
        """

        self._datapoint_name = datapoint_name

    @property
    def first_dimension(self):
        """Gets the first_dimension of this DatapointDTO.  # noqa: E501


        :return: The first_dimension of this DatapointDTO.  # noqa: E501
        :rtype: float
        """
        return self._first_dimension

    @first_dimension.setter
    def first_dimension(self, first_dimension):
        """Sets the first_dimension of this DatapointDTO.


        :param first_dimension: The first_dimension of this DatapointDTO.  # noqa: E501
        :type: float
        """

        self._first_dimension = first_dimension

    @property
    def second_dimension(self):
        """Gets the second_dimension of this DatapointDTO.  # noqa: E501


        :return: The second_dimension of this DatapointDTO.  # noqa: E501
        :rtype: float
        """
        return self._second_dimension

    @second_dimension.setter
    def second_dimension(self, second_dimension):
        """Sets the second_dimension of this DatapointDTO.


        :param second_dimension: The second_dimension of this DatapointDTO.  # noqa: E501
        :type: float
        """

        self._second_dimension = second_dimension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatapointDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatapointDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
