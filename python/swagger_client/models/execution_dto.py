# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.execution_dto import ExecutionDTO  # noqa: F401,E501
from swagger_client.models.user_dto import UserDTO  # noqa: F401,E501


class ExecutionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[ExecutionDTO]',
        'count': 'int',
        'id': 'int',
        'submission_time': 'datetime',
        'state': 'str',
        'stdout_path': 'str',
        'stderr_path': 'str',
        'app_id': 'str',
        'hdfs_user': 'str',
        'final_status': 'str',
        'progress': 'float',
        'user': 'UserDTO',
        'files_to_remove': 'list[str]',
        'duration': 'int',
        'flink_master_url': 'str'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'id': 'id',
        'submission_time': 'submissionTime',
        'state': 'state',
        'stdout_path': 'stdoutPath',
        'stderr_path': 'stderrPath',
        'app_id': 'appId',
        'hdfs_user': 'hdfsUser',
        'final_status': 'finalStatus',
        'progress': 'progress',
        'user': 'user',
        'files_to_remove': 'filesToRemove',
        'duration': 'duration',
        'flink_master_url': 'flinkMasterURL'
    }

    def __init__(self, href=None, items=None, count=None, id=None, submission_time=None, state=None, stdout_path=None, stderr_path=None, app_id=None, hdfs_user=None, final_status=None, progress=None, user=None, files_to_remove=None, duration=None, flink_master_url=None):  # noqa: E501
        """ExecutionDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._id = None
        self._submission_time = None
        self._state = None
        self._stdout_path = None
        self._stderr_path = None
        self._app_id = None
        self._hdfs_user = None
        self._final_status = None
        self._progress = None
        self._user = None
        self._files_to_remove = None
        self._duration = None
        self._flink_master_url = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if id is not None:
            self.id = id
        if submission_time is not None:
            self.submission_time = submission_time
        if state is not None:
            self.state = state
        if stdout_path is not None:
            self.stdout_path = stdout_path
        if stderr_path is not None:
            self.stderr_path = stderr_path
        if app_id is not None:
            self.app_id = app_id
        if hdfs_user is not None:
            self.hdfs_user = hdfs_user
        if final_status is not None:
            self.final_status = final_status
        if progress is not None:
            self.progress = progress
        if user is not None:
            self.user = user
        if files_to_remove is not None:
            self.files_to_remove = files_to_remove
        if duration is not None:
            self.duration = duration
        if flink_master_url is not None:
            self.flink_master_url = flink_master_url

    @property
    def href(self):
        """Gets the href of this ExecutionDTO.  # noqa: E501


        :return: The href of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ExecutionDTO.


        :param href: The href of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this ExecutionDTO.  # noqa: E501


        :return: The items of this ExecutionDTO.  # noqa: E501
        :rtype: list[ExecutionDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ExecutionDTO.


        :param items: The items of this ExecutionDTO.  # noqa: E501
        :type: list[ExecutionDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this ExecutionDTO.  # noqa: E501


        :return: The count of this ExecutionDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ExecutionDTO.


        :param count: The count of this ExecutionDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this ExecutionDTO.  # noqa: E501


        :return: The id of this ExecutionDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecutionDTO.


        :param id: The id of this ExecutionDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def submission_time(self):
        """Gets the submission_time of this ExecutionDTO.  # noqa: E501


        :return: The submission_time of this ExecutionDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._submission_time

    @submission_time.setter
    def submission_time(self, submission_time):
        """Sets the submission_time of this ExecutionDTO.


        :param submission_time: The submission_time of this ExecutionDTO.  # noqa: E501
        :type: datetime
        """

        self._submission_time = submission_time

    @property
    def state(self):
        """Gets the state of this ExecutionDTO.  # noqa: E501


        :return: The state of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExecutionDTO.


        :param state: The state of this ExecutionDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIALIZING", "INITIALIZATION_FAILED", "FINISHED", "RUNNING", "ACCEPTED", "FAILED", "KILLED", "NEW", "NEW_SAVING", "SUBMITTED", "AGGREGATING_LOGS", "FRAMEWORK_FAILURE", "STARTING_APP_MASTER", "APP_MASTER_START_FAILED", "GENERATING_SECURITY_MATERIAL"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stdout_path(self):
        """Gets the stdout_path of this ExecutionDTO.  # noqa: E501


        :return: The stdout_path of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._stdout_path

    @stdout_path.setter
    def stdout_path(self, stdout_path):
        """Sets the stdout_path of this ExecutionDTO.


        :param stdout_path: The stdout_path of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._stdout_path = stdout_path

    @property
    def stderr_path(self):
        """Gets the stderr_path of this ExecutionDTO.  # noqa: E501


        :return: The stderr_path of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._stderr_path

    @stderr_path.setter
    def stderr_path(self, stderr_path):
        """Sets the stderr_path of this ExecutionDTO.


        :param stderr_path: The stderr_path of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._stderr_path = stderr_path

    @property
    def app_id(self):
        """Gets the app_id of this ExecutionDTO.  # noqa: E501


        :return: The app_id of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ExecutionDTO.


        :param app_id: The app_id of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def hdfs_user(self):
        """Gets the hdfs_user of this ExecutionDTO.  # noqa: E501


        :return: The hdfs_user of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._hdfs_user

    @hdfs_user.setter
    def hdfs_user(self, hdfs_user):
        """Sets the hdfs_user of this ExecutionDTO.


        :param hdfs_user: The hdfs_user of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._hdfs_user = hdfs_user

    @property
    def final_status(self):
        """Gets the final_status of this ExecutionDTO.  # noqa: E501


        :return: The final_status of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._final_status

    @final_status.setter
    def final_status(self, final_status):
        """Sets the final_status of this ExecutionDTO.


        :param final_status: The final_status of this ExecutionDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNDEFINED", "SUCCEEDED", "FAILED", "KILLED"]  # noqa: E501
        if final_status not in allowed_values:
            raise ValueError(
                "Invalid value for `final_status` ({0}), must be one of {1}"  # noqa: E501
                .format(final_status, allowed_values)
            )

        self._final_status = final_status

    @property
    def progress(self):
        """Gets the progress of this ExecutionDTO.  # noqa: E501


        :return: The progress of this ExecutionDTO.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ExecutionDTO.


        :param progress: The progress of this ExecutionDTO.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def user(self):
        """Gets the user of this ExecutionDTO.  # noqa: E501


        :return: The user of this ExecutionDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ExecutionDTO.


        :param user: The user of this ExecutionDTO.  # noqa: E501
        :type: UserDTO
        """

        self._user = user

    @property
    def files_to_remove(self):
        """Gets the files_to_remove of this ExecutionDTO.  # noqa: E501


        :return: The files_to_remove of this ExecutionDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._files_to_remove

    @files_to_remove.setter
    def files_to_remove(self, files_to_remove):
        """Sets the files_to_remove of this ExecutionDTO.


        :param files_to_remove: The files_to_remove of this ExecutionDTO.  # noqa: E501
        :type: list[str]
        """

        self._files_to_remove = files_to_remove

    @property
    def duration(self):
        """Gets the duration of this ExecutionDTO.  # noqa: E501


        :return: The duration of this ExecutionDTO.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ExecutionDTO.


        :param duration: The duration of this ExecutionDTO.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def flink_master_url(self):
        """Gets the flink_master_url of this ExecutionDTO.  # noqa: E501


        :return: The flink_master_url of this ExecutionDTO.  # noqa: E501
        :rtype: str
        """
        return self._flink_master_url

    @flink_master_url.setter
    def flink_master_url(self, flink_master_url):
        """Sets the flink_master_url of this ExecutionDTO.


        :param flink_master_url: The flink_master_url of this ExecutionDTO.  # noqa: E501
        :type: str
        """

        self._flink_master_url = flink_master_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
