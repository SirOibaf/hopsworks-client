# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemCommandsForKagentToExecuteOrReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'op': 'str',
        'status': 'str',
        'id': 'int',
        'arguments': 'str',
        'priority': 'int',
        'exec_user': 'str'
    }

    attribute_map = {
        'op': 'op',
        'status': 'status',
        'id': 'id',
        'arguments': 'arguments',
        'priority': 'priority',
        'exec_user': 'execUser'
    }

    def __init__(self, op=None, status=None, id=None, arguments=None, priority=None, exec_user=None):  # noqa: E501
        """SystemCommandsForKagentToExecuteOrReport - a model defined in Swagger"""  # noqa: E501
        self._op = None
        self._status = None
        self._id = None
        self._arguments = None
        self._priority = None
        self._exec_user = None
        self.discriminator = None
        self.op = op
        self.status = status
        self.id = id
        if arguments is not None:
            self.arguments = arguments
        if priority is not None:
            self.priority = priority
        if exec_user is not None:
            self.exec_user = exec_user

    @property
    def op(self):
        """Gets the op of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        Operation to be performed  # noqa: E501

        :return: The op of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this SystemCommandsForKagentToExecuteOrReport.

        Operation to be performed  # noqa: E501

        :param op: The op of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        if op is None:
            raise ValueError("Invalid value for `op`, must not be `None`")  # noqa: E501
        allowed_values = ["SERVICE_KEY_ROTATION", "CONDA_GC"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"  # noqa: E501
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def status(self):
        """Gets the status of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        Status of command  # noqa: E501

        :return: The status of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemCommandsForKagentToExecuteOrReport.

        Status of command  # noqa: E501

        :param status: The status of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["NEW", "ONGOING", "FINISHED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id(self):
        """Gets the id of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        ID of command  # noqa: E501

        :return: The id of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemCommandsForKagentToExecuteOrReport.

        ID of command  # noqa: E501

        :param id: The id of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def arguments(self):
        """Gets the arguments of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        Arguments passed to command  # noqa: E501

        :return: The arguments of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this SystemCommandsForKagentToExecuteOrReport.

        Arguments passed to command  # noqa: E501

        :param arguments: The arguments of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._arguments = arguments

    @property
    def priority(self):
        """Gets the priority of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        Priority the command will run, 0 is the lowest priority  # noqa: E501

        :return: The priority of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SystemCommandsForKagentToExecuteOrReport.

        Priority the command will run, 0 is the lowest priority  # noqa: E501

        :param priority: The priority of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def exec_user(self):
        """Gets the exec_user of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501

        The user command will be executed  # noqa: E501

        :return: The exec_user of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :rtype: str
        """
        return self._exec_user

    @exec_user.setter
    def exec_user(self, exec_user):
        """Sets the exec_user of this SystemCommandsForKagentToExecuteOrReport.

        The user command will be executed  # noqa: E501

        :param exec_user: The exec_user of this SystemCommandsForKagentToExecuteOrReport.  # noqa: E501
        :type: str
        """

        self._exec_user = exec_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemCommandsForKagentToExecuteOrReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemCommandsForKagentToExecuteOrReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
