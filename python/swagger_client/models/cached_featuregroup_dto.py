# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_analysis_dto import ClusterAnalysisDTO  # noqa: F401,E501
from swagger_client.models.descriptive_stats_dto import DescriptiveStatsDTO  # noqa: F401,E501
from swagger_client.models.feature_correlation_matrix_dto import FeatureCorrelationMatrixDTO  # noqa: F401,E501
from swagger_client.models.feature_distributions_dto import FeatureDistributionsDTO  # noqa: F401,E501
from swagger_client.models.feature_dto import FeatureDTO  # noqa: F401,E501
from swagger_client.models.featuregroup_dto import FeaturegroupDTO  # noqa: F401,E501
from swagger_client.models.featurestore_job_dto import FeaturestoreJobDTO  # noqa: F401,E501
from swagger_client.models.online_featuregroup_dto import OnlineFeaturegroupDTO  # noqa: F401,E501


class CachedFeaturegroupDTO(FeaturegroupDTO):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hive_table_id': 'int',
        'hdfs_store_paths': 'list[str]',
        'input_format': 'str',
        'hive_table_type': 'str',
        'inode_id': 'int',
        'online_featuregroup_dto': 'OnlineFeaturegroupDTO',
        'online_featuregroup_enabled': 'bool'
    }

    attribute_map = {
        'hive_table_id': 'hiveTableId',
        'hdfs_store_paths': 'hdfsStorePaths',
        'input_format': 'inputFormat',
        'hive_table_type': 'hiveTableType',
        'inode_id': 'inodeId',
        'online_featuregroup_dto': 'onlineFeaturegroupDTO',
        'online_featuregroup_enabled': 'onlineFeaturegroupEnabled'
    }

    def __init__(self, hive_table_id=None, hdfs_store_paths=None, input_format=None, hive_table_type=None, inode_id=None, online_featuregroup_dto=None, online_featuregroup_enabled=None):  # noqa: E501
        """CachedFeaturegroupDTO - a model defined in Swagger"""  # noqa: E501
        self._hive_table_id = None
        self._hdfs_store_paths = None
        self._input_format = None
        self._hive_table_type = None
        self._inode_id = None
        self._online_featuregroup_dto = None
        self._online_featuregroup_enabled = None
        self.discriminator = None
        if hive_table_id is not None:
            self.hive_table_id = hive_table_id
        if hdfs_store_paths is not None:
            self.hdfs_store_paths = hdfs_store_paths
        if input_format is not None:
            self.input_format = input_format
        if hive_table_type is not None:
            self.hive_table_type = hive_table_type
        if inode_id is not None:
            self.inode_id = inode_id
        if online_featuregroup_dto is not None:
            self.online_featuregroup_dto = online_featuregroup_dto
        if online_featuregroup_enabled is not None:
            self.online_featuregroup_enabled = online_featuregroup_enabled

    @property
    def hive_table_id(self):
        """Gets the hive_table_id of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The hive_table_id of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: int
        """
        return self._hive_table_id

    @hive_table_id.setter
    def hive_table_id(self, hive_table_id):
        """Sets the hive_table_id of this CachedFeaturegroupDTO.


        :param hive_table_id: The hive_table_id of this CachedFeaturegroupDTO.  # noqa: E501
        :type: int
        """

        self._hive_table_id = hive_table_id

    @property
    def hdfs_store_paths(self):
        """Gets the hdfs_store_paths of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The hdfs_store_paths of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._hdfs_store_paths

    @hdfs_store_paths.setter
    def hdfs_store_paths(self, hdfs_store_paths):
        """Sets the hdfs_store_paths of this CachedFeaturegroupDTO.


        :param hdfs_store_paths: The hdfs_store_paths of this CachedFeaturegroupDTO.  # noqa: E501
        :type: list[str]
        """

        self._hdfs_store_paths = hdfs_store_paths

    @property
    def input_format(self):
        """Gets the input_format of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The input_format of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._input_format

    @input_format.setter
    def input_format(self, input_format):
        """Sets the input_format of this CachedFeaturegroupDTO.


        :param input_format: The input_format of this CachedFeaturegroupDTO.  # noqa: E501
        :type: str
        """

        self._input_format = input_format

    @property
    def hive_table_type(self):
        """Gets the hive_table_type of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The hive_table_type of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._hive_table_type

    @hive_table_type.setter
    def hive_table_type(self, hive_table_type):
        """Sets the hive_table_type of this CachedFeaturegroupDTO.


        :param hive_table_type: The hive_table_type of this CachedFeaturegroupDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGED_TABLE", "EXTERNAL_TABLE"]  # noqa: E501
        if hive_table_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hive_table_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hive_table_type, allowed_values)
            )

        self._hive_table_type = hive_table_type

    @property
    def inode_id(self):
        """Gets the inode_id of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The inode_id of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: int
        """
        return self._inode_id

    @inode_id.setter
    def inode_id(self, inode_id):
        """Sets the inode_id of this CachedFeaturegroupDTO.


        :param inode_id: The inode_id of this CachedFeaturegroupDTO.  # noqa: E501
        :type: int
        """

        self._inode_id = inode_id

    @property
    def online_featuregroup_dto(self):
        """Gets the online_featuregroup_dto of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The online_featuregroup_dto of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: OnlineFeaturegroupDTO
        """
        return self._online_featuregroup_dto

    @online_featuregroup_dto.setter
    def online_featuregroup_dto(self, online_featuregroup_dto):
        """Sets the online_featuregroup_dto of this CachedFeaturegroupDTO.


        :param online_featuregroup_dto: The online_featuregroup_dto of this CachedFeaturegroupDTO.  # noqa: E501
        :type: OnlineFeaturegroupDTO
        """

        self._online_featuregroup_dto = online_featuregroup_dto

    @property
    def online_featuregroup_enabled(self):
        """Gets the online_featuregroup_enabled of this CachedFeaturegroupDTO.  # noqa: E501


        :return: The online_featuregroup_enabled of this CachedFeaturegroupDTO.  # noqa: E501
        :rtype: bool
        """
        return self._online_featuregroup_enabled

    @online_featuregroup_enabled.setter
    def online_featuregroup_enabled(self, online_featuregroup_enabled):
        """Sets the online_featuregroup_enabled of this CachedFeaturegroupDTO.


        :param online_featuregroup_enabled: The online_featuregroup_enabled of this CachedFeaturegroupDTO.  # noqa: E501
        :type: bool
        """

        self._online_featuregroup_enabled = online_featuregroup_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CachedFeaturegroupDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CachedFeaturegroupDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
