# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.command_dto import CommandDTO  # noqa: F401,E501
from swagger_client.models.environment_dto import EnvironmentDTO  # noqa: F401,E501
from swagger_client.models.library_dto import LibraryDTO  # noqa: F401,E501


class EnvironmentDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[EnvironmentDTO]',
        'count': 'int',
        'python_version': 'str',
        'conda_channel': 'str',
        'libraries': 'LibraryDTO',
        'commands': 'CommandDTO'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'python_version': 'pythonVersion',
        'conda_channel': 'condaChannel',
        'libraries': 'libraries',
        'commands': 'commands'
    }

    def __init__(self, href=None, items=None, count=None, python_version=None, conda_channel=None, libraries=None, commands=None):  # noqa: E501
        """EnvironmentDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._python_version = None
        self._conda_channel = None
        self._libraries = None
        self._commands = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if python_version is not None:
            self.python_version = python_version
        if conda_channel is not None:
            self.conda_channel = conda_channel
        if libraries is not None:
            self.libraries = libraries
        if commands is not None:
            self.commands = commands

    @property
    def href(self):
        """Gets the href of this EnvironmentDTO.  # noqa: E501


        :return: The href of this EnvironmentDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this EnvironmentDTO.


        :param href: The href of this EnvironmentDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this EnvironmentDTO.  # noqa: E501


        :return: The items of this EnvironmentDTO.  # noqa: E501
        :rtype: list[EnvironmentDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this EnvironmentDTO.


        :param items: The items of this EnvironmentDTO.  # noqa: E501
        :type: list[EnvironmentDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this EnvironmentDTO.  # noqa: E501


        :return: The count of this EnvironmentDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EnvironmentDTO.


        :param count: The count of this EnvironmentDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def python_version(self):
        """Gets the python_version of this EnvironmentDTO.  # noqa: E501


        :return: The python_version of this EnvironmentDTO.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this EnvironmentDTO.


        :param python_version: The python_version of this EnvironmentDTO.  # noqa: E501
        :type: str
        """

        self._python_version = python_version

    @property
    def conda_channel(self):
        """Gets the conda_channel of this EnvironmentDTO.  # noqa: E501


        :return: The conda_channel of this EnvironmentDTO.  # noqa: E501
        :rtype: str
        """
        return self._conda_channel

    @conda_channel.setter
    def conda_channel(self, conda_channel):
        """Sets the conda_channel of this EnvironmentDTO.


        :param conda_channel: The conda_channel of this EnvironmentDTO.  # noqa: E501
        :type: str
        """

        self._conda_channel = conda_channel

    @property
    def libraries(self):
        """Gets the libraries of this EnvironmentDTO.  # noqa: E501


        :return: The libraries of this EnvironmentDTO.  # noqa: E501
        :rtype: LibraryDTO
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this EnvironmentDTO.


        :param libraries: The libraries of this EnvironmentDTO.  # noqa: E501
        :type: LibraryDTO
        """

        self._libraries = libraries

    @property
    def commands(self):
        """Gets the commands of this EnvironmentDTO.  # noqa: E501


        :return: The commands of this EnvironmentDTO.  # noqa: E501
        :rtype: CommandDTO
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this EnvironmentDTO.


        :param commands: The commands of this EnvironmentDTO.  # noqa: E501
        :type: CommandDTO
        """

        self._commands = commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvironmentDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
