# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.project import Project  # noqa: F401,E501
from swagger_client.models.project_topics import ProjectTopics  # noqa: F401,E501
from swagger_client.models.users import Users  # noqa: F401,E501


class Serving(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'creator': 'Users',
        'name': 'str',
        'artifact_path': 'str',
        'version': 'int',
        'optimized': 'bool',
        'instances': 'int',
        'project': 'Project',
        'batching_enabled': 'bool',
        'lock_ip': 'str',
        'lock_timestamp': 'int',
        'kafka_topic': 'ProjectTopics',
        'local_port': 'int',
        'local_pid': 'int',
        'local_dir': 'str',
        'serving_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'creator': 'creator',
        'name': 'name',
        'artifact_path': 'artifactPath',
        'version': 'version',
        'optimized': 'optimized',
        'instances': 'instances',
        'project': 'project',
        'batching_enabled': 'batchingEnabled',
        'lock_ip': 'lockIP',
        'lock_timestamp': 'lockTimestamp',
        'kafka_topic': 'kafkaTopic',
        'local_port': 'localPort',
        'local_pid': 'localPid',
        'local_dir': 'localDir',
        'serving_type': 'servingType'
    }

    def __init__(self, id=None, created=None, creator=None, name=None, artifact_path=None, version=None, optimized=None, instances=None, project=None, batching_enabled=None, lock_ip=None, lock_timestamp=None, kafka_topic=None, local_port=None, local_pid=None, local_dir=None, serving_type=None):  # noqa: E501
        """Serving - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._creator = None
        self._name = None
        self._artifact_path = None
        self._version = None
        self._optimized = None
        self._instances = None
        self._project = None
        self._batching_enabled = None
        self._lock_ip = None
        self._lock_timestamp = None
        self._kafka_topic = None
        self._local_port = None
        self._local_pid = None
        self._local_dir = None
        self._serving_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if creator is not None:
            self.creator = creator
        self.name = name
        self.artifact_path = artifact_path
        self.version = version
        self.optimized = optimized
        if instances is not None:
            self.instances = instances
        if project is not None:
            self.project = project
        if batching_enabled is not None:
            self.batching_enabled = batching_enabled
        if lock_ip is not None:
            self.lock_ip = lock_ip
        if lock_timestamp is not None:
            self.lock_timestamp = lock_timestamp
        if kafka_topic is not None:
            self.kafka_topic = kafka_topic
        if local_port is not None:
            self.local_port = local_port
        if local_pid is not None:
            self.local_pid = local_pid
        if local_dir is not None:
            self.local_dir = local_dir
        self.serving_type = serving_type

    @property
    def id(self):
        """Gets the id of this Serving.  # noqa: E501


        :return: The id of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Serving.


        :param id: The id of this Serving.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Serving.  # noqa: E501


        :return: The created of this Serving.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Serving.


        :param created: The created of this Serving.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this Serving.  # noqa: E501


        :return: The creator of this Serving.  # noqa: E501
        :rtype: Users
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Serving.


        :param creator: The creator of this Serving.  # noqa: E501
        :type: Users
        """

        self._creator = creator

    @property
    def name(self):
        """Gets the name of this Serving.  # noqa: E501


        :return: The name of this Serving.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Serving.


        :param name: The name of this Serving.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def artifact_path(self):
        """Gets the artifact_path of this Serving.  # noqa: E501


        :return: The artifact_path of this Serving.  # noqa: E501
        :rtype: str
        """
        return self._artifact_path

    @artifact_path.setter
    def artifact_path(self, artifact_path):
        """Sets the artifact_path of this Serving.


        :param artifact_path: The artifact_path of this Serving.  # noqa: E501
        :type: str
        """
        if artifact_path is None:
            raise ValueError("Invalid value for `artifact_path`, must not be `None`")  # noqa: E501

        self._artifact_path = artifact_path

    @property
    def version(self):
        """Gets the version of this Serving.  # noqa: E501


        :return: The version of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Serving.


        :param version: The version of this Serving.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def optimized(self):
        """Gets the optimized of this Serving.  # noqa: E501


        :return: The optimized of this Serving.  # noqa: E501
        :rtype: bool
        """
        return self._optimized

    @optimized.setter
    def optimized(self, optimized):
        """Sets the optimized of this Serving.


        :param optimized: The optimized of this Serving.  # noqa: E501
        :type: bool
        """
        if optimized is None:
            raise ValueError("Invalid value for `optimized`, must not be `None`")  # noqa: E501

        self._optimized = optimized

    @property
    def instances(self):
        """Gets the instances of this Serving.  # noqa: E501


        :return: The instances of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Serving.


        :param instances: The instances of this Serving.  # noqa: E501
        :type: int
        """

        self._instances = instances

    @property
    def project(self):
        """Gets the project of this Serving.  # noqa: E501


        :return: The project of this Serving.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Serving.


        :param project: The project of this Serving.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def batching_enabled(self):
        """Gets the batching_enabled of this Serving.  # noqa: E501


        :return: The batching_enabled of this Serving.  # noqa: E501
        :rtype: bool
        """
        return self._batching_enabled

    @batching_enabled.setter
    def batching_enabled(self, batching_enabled):
        """Sets the batching_enabled of this Serving.


        :param batching_enabled: The batching_enabled of this Serving.  # noqa: E501
        :type: bool
        """

        self._batching_enabled = batching_enabled

    @property
    def lock_ip(self):
        """Gets the lock_ip of this Serving.  # noqa: E501


        :return: The lock_ip of this Serving.  # noqa: E501
        :rtype: str
        """
        return self._lock_ip

    @lock_ip.setter
    def lock_ip(self, lock_ip):
        """Sets the lock_ip of this Serving.


        :param lock_ip: The lock_ip of this Serving.  # noqa: E501
        :type: str
        """

        self._lock_ip = lock_ip

    @property
    def lock_timestamp(self):
        """Gets the lock_timestamp of this Serving.  # noqa: E501


        :return: The lock_timestamp of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._lock_timestamp

    @lock_timestamp.setter
    def lock_timestamp(self, lock_timestamp):
        """Sets the lock_timestamp of this Serving.


        :param lock_timestamp: The lock_timestamp of this Serving.  # noqa: E501
        :type: int
        """

        self._lock_timestamp = lock_timestamp

    @property
    def kafka_topic(self):
        """Gets the kafka_topic of this Serving.  # noqa: E501


        :return: The kafka_topic of this Serving.  # noqa: E501
        :rtype: ProjectTopics
        """
        return self._kafka_topic

    @kafka_topic.setter
    def kafka_topic(self, kafka_topic):
        """Sets the kafka_topic of this Serving.


        :param kafka_topic: The kafka_topic of this Serving.  # noqa: E501
        :type: ProjectTopics
        """

        self._kafka_topic = kafka_topic

    @property
    def local_port(self):
        """Gets the local_port of this Serving.  # noqa: E501


        :return: The local_port of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this Serving.


        :param local_port: The local_port of this Serving.  # noqa: E501
        :type: int
        """

        self._local_port = local_port

    @property
    def local_pid(self):
        """Gets the local_pid of this Serving.  # noqa: E501


        :return: The local_pid of this Serving.  # noqa: E501
        :rtype: int
        """
        return self._local_pid

    @local_pid.setter
    def local_pid(self, local_pid):
        """Sets the local_pid of this Serving.


        :param local_pid: The local_pid of this Serving.  # noqa: E501
        :type: int
        """

        self._local_pid = local_pid

    @property
    def local_dir(self):
        """Gets the local_dir of this Serving.  # noqa: E501


        :return: The local_dir of this Serving.  # noqa: E501
        :rtype: str
        """
        return self._local_dir

    @local_dir.setter
    def local_dir(self, local_dir):
        """Sets the local_dir of this Serving.


        :param local_dir: The local_dir of this Serving.  # noqa: E501
        :type: str
        """

        self._local_dir = local_dir

    @property
    def serving_type(self):
        """Gets the serving_type of this Serving.  # noqa: E501


        :return: The serving_type of this Serving.  # noqa: E501
        :rtype: str
        """
        return self._serving_type

    @serving_type.setter
    def serving_type(self, serving_type):
        """Sets the serving_type of this Serving.


        :param serving_type: The serving_type of this Serving.  # noqa: E501
        :type: str
        """
        if serving_type is None:
            raise ValueError("Invalid value for `serving_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TENSORFLOW", "SKLEARN"]  # noqa: E501
        if serving_type not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_type` ({0}), must be one of {1}"  # noqa: E501
                .format(serving_type, allowed_values)
            )

        self._serving_type = serving_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Serving, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Serving):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
