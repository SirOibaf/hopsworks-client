# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.git_config import GitConfig  # noqa: F401,E501
from swagger_client.models.job_configuration import JobConfiguration  # noqa: F401,E501
from swagger_client.models.jupyter_settings_pk import JupyterSettingsPK  # noqa: F401,E501
from swagger_client.models.project import Project  # noqa: F401,E501
from swagger_client.models.users import Users  # noqa: F401,E501


class JupyterSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jupyter_settings_pk': 'JupyterSettingsPK',
        'secret': 'str',
        'shutdown_level': 'int',
        'advanced': 'bool',
        'python_kernel': 'bool',
        'users': 'Users',
        'project': 'Project',
        'base_dir': 'str',
        'job_config': 'JobConfiguration',
        'private_dir': 'str',
        'git_available': 'bool',
        'git_backend': 'bool',
        'git_config': 'GitConfig',
        'mode': 'str'
    }

    attribute_map = {
        'jupyter_settings_pk': 'jupyterSettingsPK',
        'secret': 'secret',
        'shutdown_level': 'shutdownLevel',
        'advanced': 'advanced',
        'python_kernel': 'pythonKernel',
        'users': 'users',
        'project': 'project',
        'base_dir': 'baseDir',
        'job_config': 'jobConfig',
        'private_dir': 'privateDir',
        'git_available': 'gitAvailable',
        'git_backend': 'gitBackend',
        'git_config': 'gitConfig',
        'mode': 'mode'
    }

    def __init__(self, jupyter_settings_pk=None, secret=None, shutdown_level=None, advanced=None, python_kernel=None, users=None, project=None, base_dir=None, job_config=None, private_dir=None, git_available=None, git_backend=None, git_config=None, mode=None):  # noqa: E501
        """JupyterSettings - a model defined in Swagger"""  # noqa: E501
        self._jupyter_settings_pk = None
        self._secret = None
        self._shutdown_level = None
        self._advanced = None
        self._python_kernel = None
        self._users = None
        self._project = None
        self._base_dir = None
        self._job_config = None
        self._private_dir = None
        self._git_available = None
        self._git_backend = None
        self._git_config = None
        self._mode = None
        self.discriminator = None
        if jupyter_settings_pk is not None:
            self.jupyter_settings_pk = jupyter_settings_pk
        self.secret = secret
        if shutdown_level is not None:
            self.shutdown_level = shutdown_level
        if advanced is not None:
            self.advanced = advanced
        if python_kernel is not None:
            self.python_kernel = python_kernel
        if users is not None:
            self.users = users
        if project is not None:
            self.project = project
        self.base_dir = base_dir
        if job_config is not None:
            self.job_config = job_config
        if private_dir is not None:
            self.private_dir = private_dir
        if git_available is not None:
            self.git_available = git_available
        if git_backend is not None:
            self.git_backend = git_backend
        if git_config is not None:
            self.git_config = git_config
        if mode is not None:
            self.mode = mode

    @property
    def jupyter_settings_pk(self):
        """Gets the jupyter_settings_pk of this JupyterSettings.  # noqa: E501


        :return: The jupyter_settings_pk of this JupyterSettings.  # noqa: E501
        :rtype: JupyterSettingsPK
        """
        return self._jupyter_settings_pk

    @jupyter_settings_pk.setter
    def jupyter_settings_pk(self, jupyter_settings_pk):
        """Sets the jupyter_settings_pk of this JupyterSettings.


        :param jupyter_settings_pk: The jupyter_settings_pk of this JupyterSettings.  # noqa: E501
        :type: JupyterSettingsPK
        """

        self._jupyter_settings_pk = jupyter_settings_pk

    @property
    def secret(self):
        """Gets the secret of this JupyterSettings.  # noqa: E501


        :return: The secret of this JupyterSettings.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this JupyterSettings.


        :param secret: The secret of this JupyterSettings.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def shutdown_level(self):
        """Gets the shutdown_level of this JupyterSettings.  # noqa: E501


        :return: The shutdown_level of this JupyterSettings.  # noqa: E501
        :rtype: int
        """
        return self._shutdown_level

    @shutdown_level.setter
    def shutdown_level(self, shutdown_level):
        """Sets the shutdown_level of this JupyterSettings.


        :param shutdown_level: The shutdown_level of this JupyterSettings.  # noqa: E501
        :type: int
        """

        self._shutdown_level = shutdown_level

    @property
    def advanced(self):
        """Gets the advanced of this JupyterSettings.  # noqa: E501


        :return: The advanced of this JupyterSettings.  # noqa: E501
        :rtype: bool
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this JupyterSettings.


        :param advanced: The advanced of this JupyterSettings.  # noqa: E501
        :type: bool
        """

        self._advanced = advanced

    @property
    def python_kernel(self):
        """Gets the python_kernel of this JupyterSettings.  # noqa: E501


        :return: The python_kernel of this JupyterSettings.  # noqa: E501
        :rtype: bool
        """
        return self._python_kernel

    @python_kernel.setter
    def python_kernel(self, python_kernel):
        """Sets the python_kernel of this JupyterSettings.


        :param python_kernel: The python_kernel of this JupyterSettings.  # noqa: E501
        :type: bool
        """

        self._python_kernel = python_kernel

    @property
    def users(self):
        """Gets the users of this JupyterSettings.  # noqa: E501


        :return: The users of this JupyterSettings.  # noqa: E501
        :rtype: Users
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this JupyterSettings.


        :param users: The users of this JupyterSettings.  # noqa: E501
        :type: Users
        """

        self._users = users

    @property
    def project(self):
        """Gets the project of this JupyterSettings.  # noqa: E501


        :return: The project of this JupyterSettings.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this JupyterSettings.


        :param project: The project of this JupyterSettings.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def base_dir(self):
        """Gets the base_dir of this JupyterSettings.  # noqa: E501


        :return: The base_dir of this JupyterSettings.  # noqa: E501
        :rtype: str
        """
        return self._base_dir

    @base_dir.setter
    def base_dir(self, base_dir):
        """Sets the base_dir of this JupyterSettings.


        :param base_dir: The base_dir of this JupyterSettings.  # noqa: E501
        :type: str
        """
        if base_dir is None:
            raise ValueError("Invalid value for `base_dir`, must not be `None`")  # noqa: E501

        self._base_dir = base_dir

    @property
    def job_config(self):
        """Gets the job_config of this JupyterSettings.  # noqa: E501


        :return: The job_config of this JupyterSettings.  # noqa: E501
        :rtype: JobConfiguration
        """
        return self._job_config

    @job_config.setter
    def job_config(self, job_config):
        """Sets the job_config of this JupyterSettings.


        :param job_config: The job_config of this JupyterSettings.  # noqa: E501
        :type: JobConfiguration
        """

        self._job_config = job_config

    @property
    def private_dir(self):
        """Gets the private_dir of this JupyterSettings.  # noqa: E501


        :return: The private_dir of this JupyterSettings.  # noqa: E501
        :rtype: str
        """
        return self._private_dir

    @private_dir.setter
    def private_dir(self, private_dir):
        """Sets the private_dir of this JupyterSettings.


        :param private_dir: The private_dir of this JupyterSettings.  # noqa: E501
        :type: str
        """

        self._private_dir = private_dir

    @property
    def git_available(self):
        """Gets the git_available of this JupyterSettings.  # noqa: E501


        :return: The git_available of this JupyterSettings.  # noqa: E501
        :rtype: bool
        """
        return self._git_available

    @git_available.setter
    def git_available(self, git_available):
        """Sets the git_available of this JupyterSettings.


        :param git_available: The git_available of this JupyterSettings.  # noqa: E501
        :type: bool
        """

        self._git_available = git_available

    @property
    def git_backend(self):
        """Gets the git_backend of this JupyterSettings.  # noqa: E501


        :return: The git_backend of this JupyterSettings.  # noqa: E501
        :rtype: bool
        """
        return self._git_backend

    @git_backend.setter
    def git_backend(self, git_backend):
        """Sets the git_backend of this JupyterSettings.


        :param git_backend: The git_backend of this JupyterSettings.  # noqa: E501
        :type: bool
        """

        self._git_backend = git_backend

    @property
    def git_config(self):
        """Gets the git_config of this JupyterSettings.  # noqa: E501


        :return: The git_config of this JupyterSettings.  # noqa: E501
        :rtype: GitConfig
        """
        return self._git_config

    @git_config.setter
    def git_config(self, git_config):
        """Sets the git_config of this JupyterSettings.


        :param git_config: The git_config of this JupyterSettings.  # noqa: E501
        :type: GitConfig
        """

        self._git_config = git_config

    @property
    def mode(self):
        """Gets the mode of this JupyterSettings.  # noqa: E501


        :return: The mode of this JupyterSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this JupyterSettings.


        :param mode: The mode of this JupyterSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["JUPYTER_LAB", "JUPYTER_CLASSIC"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JupyterSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JupyterSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
