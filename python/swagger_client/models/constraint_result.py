# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ConstraintResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check': 'str',
        'check_level': 'str',
        'check_status': 'str',
        'constraint': 'str',
        'constraint_status': 'str',
        'constraint_message': 'str'
    }

    attribute_map = {
        'check': 'check',
        'check_level': 'checkLevel',
        'check_status': 'checkStatus',
        'constraint': 'constraint',
        'constraint_status': 'constraintStatus',
        'constraint_message': 'constraintMessage'
    }

    def __init__(self, check=None, check_level=None, check_status=None, constraint=None, constraint_status=None, constraint_message=None):  # noqa: E501
        """ConstraintResult - a model defined in Swagger"""  # noqa: E501
        self._check = None
        self._check_level = None
        self._check_status = None
        self._constraint = None
        self._constraint_status = None
        self._constraint_message = None
        self.discriminator = None
        if check is not None:
            self.check = check
        if check_level is not None:
            self.check_level = check_level
        if check_status is not None:
            self.check_status = check_status
        if constraint is not None:
            self.constraint = constraint
        if constraint_status is not None:
            self.constraint_status = constraint_status
        if constraint_message is not None:
            self.constraint_message = constraint_message

    @property
    def check(self):
        """Gets the check of this ConstraintResult.  # noqa: E501


        :return: The check of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this ConstraintResult.


        :param check: The check of this ConstraintResult.  # noqa: E501
        :type: str
        """

        self._check = check

    @property
    def check_level(self):
        """Gets the check_level of this ConstraintResult.  # noqa: E501


        :return: The check_level of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._check_level

    @check_level.setter
    def check_level(self, check_level):
        """Sets the check_level of this ConstraintResult.


        :param check_level: The check_level of this ConstraintResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Warning", "Error"]  # noqa: E501
        if check_level not in allowed_values:
            raise ValueError(
                "Invalid value for `check_level` ({0}), must be one of {1}"  # noqa: E501
                .format(check_level, allowed_values)
            )

        self._check_level = check_level

    @property
    def check_status(self):
        """Gets the check_status of this ConstraintResult.  # noqa: E501


        :return: The check_status of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._check_status

    @check_status.setter
    def check_status(self, check_status):
        """Sets the check_status of this ConstraintResult.


        :param check_status: The check_status of this ConstraintResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Warning", "Error"]  # noqa: E501
        if check_status not in allowed_values:
            raise ValueError(
                "Invalid value for `check_status` ({0}), must be one of {1}"  # noqa: E501
                .format(check_status, allowed_values)
            )

        self._check_status = check_status

    @property
    def constraint(self):
        """Gets the constraint of this ConstraintResult.  # noqa: E501


        :return: The constraint of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this ConstraintResult.


        :param constraint: The constraint of this ConstraintResult.  # noqa: E501
        :type: str
        """

        self._constraint = constraint

    @property
    def constraint_status(self):
        """Gets the constraint_status of this ConstraintResult.  # noqa: E501


        :return: The constraint_status of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._constraint_status

    @constraint_status.setter
    def constraint_status(self, constraint_status):
        """Sets the constraint_status of this ConstraintResult.


        :param constraint_status: The constraint_status of this ConstraintResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Success", "Warning", "Failure", "Empty"]  # noqa: E501
        if constraint_status not in allowed_values:
            raise ValueError(
                "Invalid value for `constraint_status` ({0}), must be one of {1}"  # noqa: E501
                .format(constraint_status, allowed_values)
            )

        self._constraint_status = constraint_status

    @property
    def constraint_message(self):
        """Gets the constraint_message of this ConstraintResult.  # noqa: E501


        :return: The constraint_message of this ConstraintResult.  # noqa: E501
        :rtype: str
        """
        return self._constraint_message

    @constraint_message.setter
    def constraint_message(self, constraint_message):
        """Sets the constraint_message of this ConstraintResult.


        :param constraint_message: The constraint_message of this ConstraintResult.  # noqa: E501
        :type: str
        """

        self._constraint_message = constraint_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConstraintResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConstraintResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
