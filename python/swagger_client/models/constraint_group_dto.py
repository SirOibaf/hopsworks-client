# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.constraint_dto import ConstraintDTO  # noqa: F401,E501
from swagger_client.models.constraint_group_dto import ConstraintGroupDTO  # noqa: F401,E501


class ConstraintGroupDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[ConstraintGroupDTO]',
        'count': 'int',
        'name': 'str',
        'description': 'str',
        'level': 'str',
        'constraints': 'ConstraintDTO'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'name': 'name',
        'description': 'description',
        'level': 'level',
        'constraints': 'constraints'
    }

    def __init__(self, href=None, items=None, count=None, name=None, description=None, level=None, constraints=None):  # noqa: E501
        """ConstraintGroupDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._name = None
        self._description = None
        self._level = None
        self._constraints = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        self.name = name
        self.description = description
        self.level = level
        if constraints is not None:
            self.constraints = constraints

    @property
    def href(self):
        """Gets the href of this ConstraintGroupDTO.  # noqa: E501


        :return: The href of this ConstraintGroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ConstraintGroupDTO.


        :param href: The href of this ConstraintGroupDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this ConstraintGroupDTO.  # noqa: E501


        :return: The items of this ConstraintGroupDTO.  # noqa: E501
        :rtype: list[ConstraintGroupDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ConstraintGroupDTO.


        :param items: The items of this ConstraintGroupDTO.  # noqa: E501
        :type: list[ConstraintGroupDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this ConstraintGroupDTO.  # noqa: E501


        :return: The count of this ConstraintGroupDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ConstraintGroupDTO.


        :param count: The count of this ConstraintGroupDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def name(self):
        """Gets the name of this ConstraintGroupDTO.  # noqa: E501


        :return: The name of this ConstraintGroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConstraintGroupDTO.


        :param name: The name of this ConstraintGroupDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConstraintGroupDTO.  # noqa: E501


        :return: The description of this ConstraintGroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConstraintGroupDTO.


        :param description: The description of this ConstraintGroupDTO.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def level(self):
        """Gets the level of this ConstraintGroupDTO.  # noqa: E501


        :return: The level of this ConstraintGroupDTO.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ConstraintGroupDTO.


        :param level: The level of this ConstraintGroupDTO.  # noqa: E501
        :type: str
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501
        allowed_values = ["Warning", "Error"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def constraints(self):
        """Gets the constraints of this ConstraintGroupDTO.  # noqa: E501


        :return: The constraints of this ConstraintGroupDTO.  # noqa: E501
        :rtype: ConstraintDTO
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ConstraintGroupDTO.


        :param constraints: The constraints of this ConstraintGroupDTO.  # noqa: E501
        :type: ConstraintDTO
        """

        self._constraints = constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConstraintGroupDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConstraintGroupDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
