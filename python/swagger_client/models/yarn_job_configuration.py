# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.job_configuration import JobConfiguration  # noqa: F401,E501
from swagger_client.models.local_resource_dto import LocalResourceDTO  # noqa: F401,E501
from swagger_client.models.schedule_dto import ScheduleDTO  # noqa: F401,E501


class YarnJobConfiguration(JobConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'am_queue': 'str',
        'am_memory': 'int',
        'am_v_cores': 'int',
        'local_resources': 'list[LocalResourceDTO]',
        'session_id': 'str'
    }

    attribute_map = {
        'am_queue': 'amQueue',
        'am_memory': 'amMemory',
        'am_v_cores': 'amVCores',
        'local_resources': 'localResources',
        'session_id': 'sessionId'
    }

    def __init__(self, am_queue=None, am_memory=None, am_v_cores=None, local_resources=None, session_id=None):  # noqa: E501
        """YarnJobConfiguration - a model defined in Swagger"""  # noqa: E501
        self._am_queue = None
        self._am_memory = None
        self._am_v_cores = None
        self._local_resources = None
        self._session_id = None
        self.discriminator = None
        if am_queue is not None:
            self.am_queue = am_queue
        if am_memory is not None:
            self.am_memory = am_memory
        if am_v_cores is not None:
            self.am_v_cores = am_v_cores
        if local_resources is not None:
            self.local_resources = local_resources
        if session_id is not None:
            self.session_id = session_id

    @property
    def am_queue(self):
        """Gets the am_queue of this YarnJobConfiguration.  # noqa: E501


        :return: The am_queue of this YarnJobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._am_queue

    @am_queue.setter
    def am_queue(self, am_queue):
        """Sets the am_queue of this YarnJobConfiguration.


        :param am_queue: The am_queue of this YarnJobConfiguration.  # noqa: E501
        :type: str
        """

        self._am_queue = am_queue

    @property
    def am_memory(self):
        """Gets the am_memory of this YarnJobConfiguration.  # noqa: E501


        :return: The am_memory of this YarnJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._am_memory

    @am_memory.setter
    def am_memory(self, am_memory):
        """Sets the am_memory of this YarnJobConfiguration.


        :param am_memory: The am_memory of this YarnJobConfiguration.  # noqa: E501
        :type: int
        """

        self._am_memory = am_memory

    @property
    def am_v_cores(self):
        """Gets the am_v_cores of this YarnJobConfiguration.  # noqa: E501


        :return: The am_v_cores of this YarnJobConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._am_v_cores

    @am_v_cores.setter
    def am_v_cores(self, am_v_cores):
        """Sets the am_v_cores of this YarnJobConfiguration.


        :param am_v_cores: The am_v_cores of this YarnJobConfiguration.  # noqa: E501
        :type: int
        """

        self._am_v_cores = am_v_cores

    @property
    def local_resources(self):
        """Gets the local_resources of this YarnJobConfiguration.  # noqa: E501


        :return: The local_resources of this YarnJobConfiguration.  # noqa: E501
        :rtype: list[LocalResourceDTO]
        """
        return self._local_resources

    @local_resources.setter
    def local_resources(self, local_resources):
        """Sets the local_resources of this YarnJobConfiguration.


        :param local_resources: The local_resources of this YarnJobConfiguration.  # noqa: E501
        :type: list[LocalResourceDTO]
        """

        self._local_resources = local_resources

    @property
    def session_id(self):
        """Gets the session_id of this YarnJobConfiguration.  # noqa: E501


        :return: The session_id of this YarnJobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this YarnJobConfiguration.


        :param session_id: The session_id of this YarnJobConfiguration.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(YarnJobConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, YarnJobConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
