# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MaggyDriver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'app_id': 'str',
        'host_ip': 'str',
        'port': 'int',
        'secret': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'app_id': 'appId',
        'host_ip': 'hostIp',
        'port': 'port',
        'secret': 'secret',
        'created': 'created'
    }

    def __init__(self, id=None, app_id=None, host_ip=None, port=None, secret=None, created=None):  # noqa: E501
        """MaggyDriver - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._app_id = None
        self._host_ip = None
        self._port = None
        self._secret = None
        self._created = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.app_id = app_id
        self.host_ip = host_ip
        self.port = port
        self.secret = secret
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this MaggyDriver.  # noqa: E501


        :return: The id of this MaggyDriver.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaggyDriver.


        :param id: The id of this MaggyDriver.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def app_id(self):
        """Gets the app_id of this MaggyDriver.  # noqa: E501


        :return: The app_id of this MaggyDriver.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MaggyDriver.


        :param app_id: The app_id of this MaggyDriver.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def host_ip(self):
        """Gets the host_ip of this MaggyDriver.  # noqa: E501


        :return: The host_ip of this MaggyDriver.  # noqa: E501
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip):
        """Sets the host_ip of this MaggyDriver.


        :param host_ip: The host_ip of this MaggyDriver.  # noqa: E501
        :type: str
        """
        if host_ip is None:
            raise ValueError("Invalid value for `host_ip`, must not be `None`")  # noqa: E501

        self._host_ip = host_ip

    @property
    def port(self):
        """Gets the port of this MaggyDriver.  # noqa: E501


        :return: The port of this MaggyDriver.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MaggyDriver.


        :param port: The port of this MaggyDriver.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def secret(self):
        """Gets the secret of this MaggyDriver.  # noqa: E501


        :return: The secret of this MaggyDriver.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this MaggyDriver.


        :param secret: The secret of this MaggyDriver.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def created(self):
        """Gets the created of this MaggyDriver.  # noqa: E501


        :return: The created of this MaggyDriver.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MaggyDriver.


        :param created: The created of this MaggyDriver.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaggyDriver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaggyDriver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
