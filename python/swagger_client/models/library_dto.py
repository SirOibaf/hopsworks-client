# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.command_dto import CommandDTO  # noqa: F401,E501
from swagger_client.models.library_dto import LibraryDTO  # noqa: F401,E501


class LibraryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[LibraryDTO]',
        'count': 'int',
        'channel': 'str',
        'package_manager': 'str',
        'machine': 'str',
        'library': 'str',
        'version': 'str',
        'status': 'str',
        'preinstalled': 'str',
        'commands': 'CommandDTO'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'channel': 'channel',
        'package_manager': 'packageManager',
        'machine': 'machine',
        'library': 'library',
        'version': 'version',
        'status': 'status',
        'preinstalled': 'preinstalled',
        'commands': 'commands'
    }

    def __init__(self, href=None, items=None, count=None, channel=None, package_manager=None, machine=None, library=None, version=None, status=None, preinstalled=None, commands=None):  # noqa: E501
        """LibraryDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._channel = None
        self._package_manager = None
        self._machine = None
        self._library = None
        self._version = None
        self._status = None
        self._preinstalled = None
        self._commands = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if channel is not None:
            self.channel = channel
        if package_manager is not None:
            self.package_manager = package_manager
        if machine is not None:
            self.machine = machine
        if library is not None:
            self.library = library
        if version is not None:
            self.version = version
        if status is not None:
            self.status = status
        if preinstalled is not None:
            self.preinstalled = preinstalled
        if commands is not None:
            self.commands = commands

    @property
    def href(self):
        """Gets the href of this LibraryDTO.  # noqa: E501


        :return: The href of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LibraryDTO.


        :param href: The href of this LibraryDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this LibraryDTO.  # noqa: E501


        :return: The items of this LibraryDTO.  # noqa: E501
        :rtype: list[LibraryDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this LibraryDTO.


        :param items: The items of this LibraryDTO.  # noqa: E501
        :type: list[LibraryDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this LibraryDTO.  # noqa: E501


        :return: The count of this LibraryDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this LibraryDTO.


        :param count: The count of this LibraryDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def channel(self):
        """Gets the channel of this LibraryDTO.  # noqa: E501


        :return: The channel of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this LibraryDTO.


        :param channel: The channel of this LibraryDTO.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def package_manager(self):
        """Gets the package_manager of this LibraryDTO.  # noqa: E501


        :return: The package_manager of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._package_manager

    @package_manager.setter
    def package_manager(self, package_manager):
        """Sets the package_manager of this LibraryDTO.


        :param package_manager: The package_manager of this LibraryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONDA", "PIP"]  # noqa: E501
        if package_manager not in allowed_values:
            raise ValueError(
                "Invalid value for `package_manager` ({0}), must be one of {1}"  # noqa: E501
                .format(package_manager, allowed_values)
            )

        self._package_manager = package_manager

    @property
    def machine(self):
        """Gets the machine of this LibraryDTO.  # noqa: E501


        :return: The machine of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this LibraryDTO.


        :param machine: The machine of this LibraryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "CPU", "GPU"]  # noqa: E501
        if machine not in allowed_values:
            raise ValueError(
                "Invalid value for `machine` ({0}), must be one of {1}"  # noqa: E501
                .format(machine, allowed_values)
            )

        self._machine = machine

    @property
    def library(self):
        """Gets the library of this LibraryDTO.  # noqa: E501


        :return: The library of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this LibraryDTO.


        :param library: The library of this LibraryDTO.  # noqa: E501
        :type: str
        """

        self._library = library

    @property
    def version(self):
        """Gets the version of this LibraryDTO.  # noqa: E501


        :return: The version of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LibraryDTO.


        :param version: The version of this LibraryDTO.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this LibraryDTO.  # noqa: E501


        :return: The status of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LibraryDTO.


        :param status: The status of this LibraryDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "SUCCESS", "ONGOING", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def preinstalled(self):
        """Gets the preinstalled of this LibraryDTO.  # noqa: E501


        :return: The preinstalled of this LibraryDTO.  # noqa: E501
        :rtype: str
        """
        return self._preinstalled

    @preinstalled.setter
    def preinstalled(self, preinstalled):
        """Sets the preinstalled of this LibraryDTO.


        :param preinstalled: The preinstalled of this LibraryDTO.  # noqa: E501
        :type: str
        """

        self._preinstalled = preinstalled

    @property
    def commands(self):
        """Gets the commands of this LibraryDTO.  # noqa: E501


        :return: The commands of this LibraryDTO.  # noqa: E501
        :rtype: CommandDTO
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this LibraryDTO.


        :param commands: The commands of this LibraryDTO.  # noqa: E501
        :type: CommandDTO
        """

        self._commands = commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
