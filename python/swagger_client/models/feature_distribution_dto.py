# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.histogram_bin_dto import HistogramBinDTO  # noqa: F401,E501


class FeatureDistributionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_name': 'str',
        'frequency_distribution': 'list[HistogramBinDTO]',
        'statistic_type': 'str'
    }

    attribute_map = {
        'feature_name': 'featureName',
        'frequency_distribution': 'frequencyDistribution',
        'statistic_type': 'statisticType'
    }

    def __init__(self, feature_name=None, frequency_distribution=None, statistic_type=None):  # noqa: E501
        """FeatureDistributionDTO - a model defined in Swagger"""  # noqa: E501
        self._feature_name = None
        self._frequency_distribution = None
        self._statistic_type = None
        self.discriminator = None
        if feature_name is not None:
            self.feature_name = feature_name
        if frequency_distribution is not None:
            self.frequency_distribution = frequency_distribution
        if statistic_type is not None:
            self.statistic_type = statistic_type

    @property
    def feature_name(self):
        """Gets the feature_name of this FeatureDistributionDTO.  # noqa: E501


        :return: The feature_name of this FeatureDistributionDTO.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this FeatureDistributionDTO.


        :param feature_name: The feature_name of this FeatureDistributionDTO.  # noqa: E501
        :type: str
        """

        self._feature_name = feature_name

    @property
    def frequency_distribution(self):
        """Gets the frequency_distribution of this FeatureDistributionDTO.  # noqa: E501


        :return: The frequency_distribution of this FeatureDistributionDTO.  # noqa: E501
        :rtype: list[HistogramBinDTO]
        """
        return self._frequency_distribution

    @frequency_distribution.setter
    def frequency_distribution(self, frequency_distribution):
        """Sets the frequency_distribution of this FeatureDistributionDTO.


        :param frequency_distribution: The frequency_distribution of this FeatureDistributionDTO.  # noqa: E501
        :type: list[HistogramBinDTO]
        """

        self._frequency_distribution = frequency_distribution

    @property
    def statistic_type(self):
        """Gets the statistic_type of this FeatureDistributionDTO.  # noqa: E501


        :return: The statistic_type of this FeatureDistributionDTO.  # noqa: E501
        :rtype: str
        """
        return self._statistic_type

    @statistic_type.setter
    def statistic_type(self, statistic_type):
        """Sets the statistic_type of this FeatureDistributionDTO.


        :param statistic_type: The statistic_type of this FeatureDistributionDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["DESCRIPTIVESTATISTICS", "CLUSTERANALYSIS", "FEATUREDISTRIBUTIONS", "FEATURECORRELATIONS"]  # noqa: E501
        if statistic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `statistic_type` ({0}), must be one of {1}"  # noqa: E501
                .format(statistic_type, allowed_values)
            )

        self._statistic_type = statistic_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureDistributionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureDistributionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
