# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.metadata_pk import MetadataPK  # noqa: F401,E501
from swagger_client.models.raw_data import RawData  # noqa: F401,E501


class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata_pk': 'MetadataPK',
        'data': 'str',
        'raw_data': 'RawData',
        'id': 'int'
    }

    attribute_map = {
        'metadata_pk': 'metadataPK',
        'data': 'data',
        'raw_data': 'rawData',
        'id': 'id'
    }

    def __init__(self, metadata_pk=None, data=None, raw_data=None, id=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501
        self._metadata_pk = None
        self._data = None
        self._raw_data = None
        self._id = None
        self.discriminator = None
        if metadata_pk is not None:
            self.metadata_pk = metadata_pk
        self.data = data
        if raw_data is not None:
            self.raw_data = raw_data
        if id is not None:
            self.id = id

    @property
    def metadata_pk(self):
        """Gets the metadata_pk of this Metadata.  # noqa: E501


        :return: The metadata_pk of this Metadata.  # noqa: E501
        :rtype: MetadataPK
        """
        return self._metadata_pk

    @metadata_pk.setter
    def metadata_pk(self, metadata_pk):
        """Sets the metadata_pk of this Metadata.


        :param metadata_pk: The metadata_pk of this Metadata.  # noqa: E501
        :type: MetadataPK
        """

        self._metadata_pk = metadata_pk

    @property
    def data(self):
        """Gets the data of this Metadata.  # noqa: E501


        :return: The data of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Metadata.


        :param data: The data of this Metadata.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def raw_data(self):
        """Gets the raw_data of this Metadata.  # noqa: E501


        :return: The raw_data of this Metadata.  # noqa: E501
        :rtype: RawData
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this Metadata.


        :param raw_data: The raw_data of this Metadata.  # noqa: E501
        :type: RawData
        """

        self._raw_data = raw_data

    @property
    def id(self):
        """Gets the id of this Metadata.  # noqa: E501


        :return: The id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metadata.


        :param id: The id of this Metadata.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
