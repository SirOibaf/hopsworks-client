# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.schedule_dto import ScheduleDTO  # noqa: F401,E501


class JobConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'schedule': 'ScheduleDTO',
        'job_type': 'str',
        'job_type_name': 'str'
    }

    attribute_map = {
        'app_name': 'appName',
        'schedule': 'schedule',
        'job_type': 'jobType',
        'job_type_name': 'jobTypeName'
    }

    def __init__(self, app_name=None, schedule=None, job_type=None, job_type_name=None):  # noqa: E501
        """JobConfiguration - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._schedule = None
        self._job_type = None
        self._job_type_name = None
        self.discriminator = None
        if app_name is not None:
            self.app_name = app_name
        if schedule is not None:
            self.schedule = schedule
        if job_type is not None:
            self.job_type = job_type
        if job_type_name is not None:
            self.job_type_name = job_type_name

    @property
    def app_name(self):
        """Gets the app_name of this JobConfiguration.  # noqa: E501


        :return: The app_name of this JobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this JobConfiguration.


        :param app_name: The app_name of this JobConfiguration.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def schedule(self):
        """Gets the schedule of this JobConfiguration.  # noqa: E501


        :return: The schedule of this JobConfiguration.  # noqa: E501
        :rtype: ScheduleDTO
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this JobConfiguration.


        :param schedule: The schedule of this JobConfiguration.  # noqa: E501
        :type: ScheduleDTO
        """

        self._schedule = schedule

    @property
    def job_type(self):
        """Gets the job_type of this JobConfiguration.  # noqa: E501


        :return: The job_type of this JobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobConfiguration.


        :param job_type: The job_type of this JobConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["YARN", "FLINK", "SPARK", "PYSPARK", "BEAM_FLINK", "BEAM_SPARK", "ERASURE_CODING"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def job_type_name(self):
        """Gets the job_type_name of this JobConfiguration.  # noqa: E501


        :return: The job_type_name of this JobConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._job_type_name

    @job_type_name.setter
    def job_type_name(self, job_type_name):
        """Sets the job_type_name of this JobConfiguration.


        :param job_type_name: The job_type_name of this JobConfiguration.  # noqa: E501
        :type: str
        """

        self._job_type_name = job_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
