# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.schema_dto import SchemaDTO  # noqa: F401,E501


class SchemaDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[SchemaDTO]',
        'count': 'int',
        'name': 'str',
        'contents': 'str',
        'versions': 'list[int]'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'name': 'name',
        'contents': 'contents',
        'versions': 'versions'
    }

    def __init__(self, href=None, items=None, count=None, name=None, contents=None, versions=None):  # noqa: E501
        """SchemaDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._name = None
        self._contents = None
        self._versions = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if name is not None:
            self.name = name
        if contents is not None:
            self.contents = contents
        if versions is not None:
            self.versions = versions

    @property
    def href(self):
        """Gets the href of this SchemaDTO.  # noqa: E501


        :return: The href of this SchemaDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SchemaDTO.


        :param href: The href of this SchemaDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this SchemaDTO.  # noqa: E501


        :return: The items of this SchemaDTO.  # noqa: E501
        :rtype: list[SchemaDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SchemaDTO.


        :param items: The items of this SchemaDTO.  # noqa: E501
        :type: list[SchemaDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this SchemaDTO.  # noqa: E501


        :return: The count of this SchemaDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SchemaDTO.


        :param count: The count of this SchemaDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def name(self):
        """Gets the name of this SchemaDTO.  # noqa: E501


        :return: The name of this SchemaDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaDTO.


        :param name: The name of this SchemaDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contents(self):
        """Gets the contents of this SchemaDTO.  # noqa: E501


        :return: The contents of this SchemaDTO.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this SchemaDTO.


        :param contents: The contents of this SchemaDTO.  # noqa: E501
        :type: str
        """

        self._contents = contents

    @property
    def versions(self):
        """Gets the versions of this SchemaDTO.  # noqa: E501


        :return: The versions of this SchemaDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this SchemaDTO.


        :param versions: The versions of this SchemaDTO.  # noqa: E501
        :type: list[int]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
