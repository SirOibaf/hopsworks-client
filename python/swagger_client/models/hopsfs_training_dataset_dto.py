# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_analysis_dto import ClusterAnalysisDTO  # noqa: F401,E501
from swagger_client.models.descriptive_stats_dto import DescriptiveStatsDTO  # noqa: F401,E501
from swagger_client.models.feature_correlation_matrix_dto import FeatureCorrelationMatrixDTO  # noqa: F401,E501
from swagger_client.models.feature_distributions_dto import FeatureDistributionsDTO  # noqa: F401,E501
from swagger_client.models.feature_dto import FeatureDTO  # noqa: F401,E501
from swagger_client.models.featurestore_job_dto import FeaturestoreJobDTO  # noqa: F401,E501
from swagger_client.models.training_dataset_dto import TrainingDatasetDTO  # noqa: F401,E501


class HopsfsTrainingDatasetDTO(TrainingDatasetDTO):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hdfs_store_path': 'str',
        'size': 'int',
        'hopsfs_connector_id': 'int',
        'hopsfs_connector_name': 'str',
        'inode_id': 'int'
    }

    attribute_map = {
        'hdfs_store_path': 'hdfsStorePath',
        'size': 'size',
        'hopsfs_connector_id': 'hopsfsConnectorId',
        'hopsfs_connector_name': 'hopsfsConnectorName',
        'inode_id': 'inodeId'
    }

    def __init__(self, hdfs_store_path=None, size=None, hopsfs_connector_id=None, hopsfs_connector_name=None, inode_id=None):  # noqa: E501
        """HopsfsTrainingDatasetDTO - a model defined in Swagger"""  # noqa: E501
        self._hdfs_store_path = None
        self._size = None
        self._hopsfs_connector_id = None
        self._hopsfs_connector_name = None
        self._inode_id = None
        self.discriminator = None
        if hdfs_store_path is not None:
            self.hdfs_store_path = hdfs_store_path
        if size is not None:
            self.size = size
        if hopsfs_connector_id is not None:
            self.hopsfs_connector_id = hopsfs_connector_id
        if hopsfs_connector_name is not None:
            self.hopsfs_connector_name = hopsfs_connector_name
        if inode_id is not None:
            self.inode_id = inode_id

    @property
    def hdfs_store_path(self):
        """Gets the hdfs_store_path of this HopsfsTrainingDatasetDTO.  # noqa: E501


        :return: The hdfs_store_path of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :rtype: str
        """
        return self._hdfs_store_path

    @hdfs_store_path.setter
    def hdfs_store_path(self, hdfs_store_path):
        """Sets the hdfs_store_path of this HopsfsTrainingDatasetDTO.


        :param hdfs_store_path: The hdfs_store_path of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :type: str
        """

        self._hdfs_store_path = hdfs_store_path

    @property
    def size(self):
        """Gets the size of this HopsfsTrainingDatasetDTO.  # noqa: E501


        :return: The size of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HopsfsTrainingDatasetDTO.


        :param size: The size of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def hopsfs_connector_id(self):
        """Gets the hopsfs_connector_id of this HopsfsTrainingDatasetDTO.  # noqa: E501


        :return: The hopsfs_connector_id of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :rtype: int
        """
        return self._hopsfs_connector_id

    @hopsfs_connector_id.setter
    def hopsfs_connector_id(self, hopsfs_connector_id):
        """Sets the hopsfs_connector_id of this HopsfsTrainingDatasetDTO.


        :param hopsfs_connector_id: The hopsfs_connector_id of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :type: int
        """

        self._hopsfs_connector_id = hopsfs_connector_id

    @property
    def hopsfs_connector_name(self):
        """Gets the hopsfs_connector_name of this HopsfsTrainingDatasetDTO.  # noqa: E501


        :return: The hopsfs_connector_name of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :rtype: str
        """
        return self._hopsfs_connector_name

    @hopsfs_connector_name.setter
    def hopsfs_connector_name(self, hopsfs_connector_name):
        """Sets the hopsfs_connector_name of this HopsfsTrainingDatasetDTO.


        :param hopsfs_connector_name: The hopsfs_connector_name of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :type: str
        """

        self._hopsfs_connector_name = hopsfs_connector_name

    @property
    def inode_id(self):
        """Gets the inode_id of this HopsfsTrainingDatasetDTO.  # noqa: E501


        :return: The inode_id of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :rtype: int
        """
        return self._inode_id

    @inode_id.setter
    def inode_id(self, inode_id):
        """Sets the inode_id of this HopsfsTrainingDatasetDTO.


        :param inode_id: The inode_id of this HopsfsTrainingDatasetDTO.  # noqa: E501
        :type: int
        """

        self._inode_id = inode_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HopsfsTrainingDatasetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HopsfsTrainingDatasetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
