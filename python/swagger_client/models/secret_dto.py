# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.secret_dto import SecretDTO  # noqa: F401,E501


class SecretDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'items': 'list[SecretDTO]',
        'count': 'int',
        'name': 'str',
        'secret': 'str',
        'added_on': 'datetime',
        'visibility': 'str',
        'project_id_scope': 'int',
        'owner': 'str'
    }

    attribute_map = {
        'href': 'href',
        'items': 'items',
        'count': 'count',
        'name': 'name',
        'secret': 'secret',
        'added_on': 'addedOn',
        'visibility': 'visibility',
        'project_id_scope': 'projectIdScope',
        'owner': 'owner'
    }

    def __init__(self, href=None, items=None, count=None, name=None, secret=None, added_on=None, visibility=None, project_id_scope=None, owner=None):  # noqa: E501
        """SecretDTO - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._items = None
        self._count = None
        self._name = None
        self._secret = None
        self._added_on = None
        self._visibility = None
        self._project_id_scope = None
        self._owner = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if items is not None:
            self.items = items
        if count is not None:
            self.count = count
        if name is not None:
            self.name = name
        if secret is not None:
            self.secret = secret
        if added_on is not None:
            self.added_on = added_on
        self.visibility = visibility
        if project_id_scope is not None:
            self.project_id_scope = project_id_scope
        if owner is not None:
            self.owner = owner

    @property
    def href(self):
        """Gets the href of this SecretDTO.  # noqa: E501


        :return: The href of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SecretDTO.


        :param href: The href of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """Gets the items of this SecretDTO.  # noqa: E501


        :return: The items of this SecretDTO.  # noqa: E501
        :rtype: list[SecretDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SecretDTO.


        :param items: The items of this SecretDTO.  # noqa: E501
        :type: list[SecretDTO]
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this SecretDTO.  # noqa: E501


        :return: The count of this SecretDTO.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SecretDTO.


        :param count: The count of this SecretDTO.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def name(self):
        """Gets the name of this SecretDTO.  # noqa: E501


        :return: The name of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretDTO.


        :param name: The name of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this SecretDTO.  # noqa: E501


        :return: The secret of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this SecretDTO.


        :param secret: The secret of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def added_on(self):
        """Gets the added_on of this SecretDTO.  # noqa: E501


        :return: The added_on of this SecretDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._added_on

    @added_on.setter
    def added_on(self, added_on):
        """Sets the added_on of this SecretDTO.


        :param added_on: The added_on of this SecretDTO.  # noqa: E501
        :type: datetime
        """

        self._added_on = added_on

    @property
    def visibility(self):
        """Gets the visibility of this SecretDTO.  # noqa: E501


        :return: The visibility of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SecretDTO.


        :param visibility: The visibility of this SecretDTO.  # noqa: E501
        :type: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501
        allowed_values = ["PRIVATE", "PROJECT"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def project_id_scope(self):
        """Gets the project_id_scope of this SecretDTO.  # noqa: E501


        :return: The project_id_scope of this SecretDTO.  # noqa: E501
        :rtype: int
        """
        return self._project_id_scope

    @project_id_scope.setter
    def project_id_scope(self, project_id_scope):
        """Sets the project_id_scope of this SecretDTO.


        :param project_id_scope: The project_id_scope of this SecretDTO.  # noqa: E501
        :type: int
        """

        self._project_id_scope = project_id_scope

    @property
    def owner(self):
        """Gets the owner of this SecretDTO.  # noqa: E501


        :return: The owner of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SecretDTO.


        :param owner: The owner of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
