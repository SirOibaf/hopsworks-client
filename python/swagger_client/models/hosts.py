# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.conda_commands import CondaCommands  # noqa: F401,E501
from swagger_client.models.host_services import HostServices  # noqa: F401,E501


class Hosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'hostname': 'str',
        'host_ip': 'str',
        'public_ip': 'str',
        'private_ip': 'str',
        'agent_password': 'str',
        'cores': 'int',
        'last_heartbeat': 'int',
        'memory_capacity': 'int',
        'num_gpus': 'int',
        'registered': 'bool',
        'conda_enabled': 'bool',
        'conda_commands': 'list[CondaCommands]',
        'host_services': 'list[HostServices]',
        'public_or_private_ip': 'str',
        'health': 'str',
        'last_heartbeat_formatted': 'str'
    }

    attribute_map = {
        'id': 'id',
        'hostname': 'hostname',
        'host_ip': 'hostIp',
        'public_ip': 'publicIp',
        'private_ip': 'privateIp',
        'agent_password': 'agentPassword',
        'cores': 'cores',
        'last_heartbeat': 'lastHeartbeat',
        'memory_capacity': 'memoryCapacity',
        'num_gpus': 'numGpus',
        'registered': 'registered',
        'conda_enabled': 'condaEnabled',
        'conda_commands': 'condaCommands',
        'host_services': 'hostServices',
        'public_or_private_ip': 'publicOrPrivateIp',
        'health': 'health',
        'last_heartbeat_formatted': 'lastHeartbeatFormatted'
    }

    def __init__(self, id=None, hostname=None, host_ip=None, public_ip=None, private_ip=None, agent_password=None, cores=None, last_heartbeat=None, memory_capacity=None, num_gpus=None, registered=None, conda_enabled=None, conda_commands=None, host_services=None, public_or_private_ip=None, health=None, last_heartbeat_formatted=None):  # noqa: E501
        """Hosts - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._hostname = None
        self._host_ip = None
        self._public_ip = None
        self._private_ip = None
        self._agent_password = None
        self._cores = None
        self._last_heartbeat = None
        self._memory_capacity = None
        self._num_gpus = None
        self._registered = None
        self._conda_enabled = None
        self._conda_commands = None
        self._host_services = None
        self._public_or_private_ip = None
        self._health = None
        self._last_heartbeat_formatted = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if hostname is not None:
            self.hostname = hostname
        if host_ip is not None:
            self.host_ip = host_ip
        if public_ip is not None:
            self.public_ip = public_ip
        if private_ip is not None:
            self.private_ip = private_ip
        if agent_password is not None:
            self.agent_password = agent_password
        if cores is not None:
            self.cores = cores
        if last_heartbeat is not None:
            self.last_heartbeat = last_heartbeat
        if memory_capacity is not None:
            self.memory_capacity = memory_capacity
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if registered is not None:
            self.registered = registered
        if conda_enabled is not None:
            self.conda_enabled = conda_enabled
        if conda_commands is not None:
            self.conda_commands = conda_commands
        if host_services is not None:
            self.host_services = host_services
        if public_or_private_ip is not None:
            self.public_or_private_ip = public_or_private_ip
        if health is not None:
            self.health = health
        if last_heartbeat_formatted is not None:
            self.last_heartbeat_formatted = last_heartbeat_formatted

    @property
    def id(self):
        """Gets the id of this Hosts.  # noqa: E501


        :return: The id of this Hosts.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hosts.


        :param id: The id of this Hosts.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hostname(self):
        """Gets the hostname of this Hosts.  # noqa: E501


        :return: The hostname of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Hosts.


        :param hostname: The hostname of this Hosts.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def host_ip(self):
        """Gets the host_ip of this Hosts.  # noqa: E501


        :return: The host_ip of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip):
        """Sets the host_ip of this Hosts.


        :param host_ip: The host_ip of this Hosts.  # noqa: E501
        :type: str
        """

        self._host_ip = host_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this Hosts.  # noqa: E501


        :return: The public_ip of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this Hosts.


        :param public_ip: The public_ip of this Hosts.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def private_ip(self):
        """Gets the private_ip of this Hosts.  # noqa: E501


        :return: The private_ip of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this Hosts.


        :param private_ip: The private_ip of this Hosts.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def agent_password(self):
        """Gets the agent_password of this Hosts.  # noqa: E501


        :return: The agent_password of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._agent_password

    @agent_password.setter
    def agent_password(self, agent_password):
        """Sets the agent_password of this Hosts.


        :param agent_password: The agent_password of this Hosts.  # noqa: E501
        :type: str
        """

        self._agent_password = agent_password

    @property
    def cores(self):
        """Gets the cores of this Hosts.  # noqa: E501


        :return: The cores of this Hosts.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this Hosts.


        :param cores: The cores of this Hosts.  # noqa: E501
        :type: int
        """

        self._cores = cores

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this Hosts.  # noqa: E501


        :return: The last_heartbeat of this Hosts.  # noqa: E501
        :rtype: int
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this Hosts.


        :param last_heartbeat: The last_heartbeat of this Hosts.  # noqa: E501
        :type: int
        """

        self._last_heartbeat = last_heartbeat

    @property
    def memory_capacity(self):
        """Gets the memory_capacity of this Hosts.  # noqa: E501


        :return: The memory_capacity of this Hosts.  # noqa: E501
        :rtype: int
        """
        return self._memory_capacity

    @memory_capacity.setter
    def memory_capacity(self, memory_capacity):
        """Sets the memory_capacity of this Hosts.


        :param memory_capacity: The memory_capacity of this Hosts.  # noqa: E501
        :type: int
        """

        self._memory_capacity = memory_capacity

    @property
    def num_gpus(self):
        """Gets the num_gpus of this Hosts.  # noqa: E501


        :return: The num_gpus of this Hosts.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus):
        """Sets the num_gpus of this Hosts.


        :param num_gpus: The num_gpus of this Hosts.  # noqa: E501
        :type: int
        """

        self._num_gpus = num_gpus

    @property
    def registered(self):
        """Gets the registered of this Hosts.  # noqa: E501


        :return: The registered of this Hosts.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this Hosts.


        :param registered: The registered of this Hosts.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    @property
    def conda_enabled(self):
        """Gets the conda_enabled of this Hosts.  # noqa: E501


        :return: The conda_enabled of this Hosts.  # noqa: E501
        :rtype: bool
        """
        return self._conda_enabled

    @conda_enabled.setter
    def conda_enabled(self, conda_enabled):
        """Sets the conda_enabled of this Hosts.


        :param conda_enabled: The conda_enabled of this Hosts.  # noqa: E501
        :type: bool
        """

        self._conda_enabled = conda_enabled

    @property
    def conda_commands(self):
        """Gets the conda_commands of this Hosts.  # noqa: E501


        :return: The conda_commands of this Hosts.  # noqa: E501
        :rtype: list[CondaCommands]
        """
        return self._conda_commands

    @conda_commands.setter
    def conda_commands(self, conda_commands):
        """Sets the conda_commands of this Hosts.


        :param conda_commands: The conda_commands of this Hosts.  # noqa: E501
        :type: list[CondaCommands]
        """

        self._conda_commands = conda_commands

    @property
    def host_services(self):
        """Gets the host_services of this Hosts.  # noqa: E501


        :return: The host_services of this Hosts.  # noqa: E501
        :rtype: list[HostServices]
        """
        return self._host_services

    @host_services.setter
    def host_services(self, host_services):
        """Sets the host_services of this Hosts.


        :param host_services: The host_services of this Hosts.  # noqa: E501
        :type: list[HostServices]
        """

        self._host_services = host_services

    @property
    def public_or_private_ip(self):
        """Gets the public_or_private_ip of this Hosts.  # noqa: E501


        :return: The public_or_private_ip of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._public_or_private_ip

    @public_or_private_ip.setter
    def public_or_private_ip(self, public_or_private_ip):
        """Sets the public_or_private_ip of this Hosts.


        :param public_or_private_ip: The public_or_private_ip of this Hosts.  # noqa: E501
        :type: str
        """

        self._public_or_private_ip = public_or_private_ip

    @property
    def health(self):
        """Gets the health of this Hosts.  # noqa: E501


        :return: The health of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Hosts.


        :param health: The health of this Hosts.  # noqa: E501
        :type: str
        """
        allowed_values = ["Good", "Bad"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def last_heartbeat_formatted(self):
        """Gets the last_heartbeat_formatted of this Hosts.  # noqa: E501


        :return: The last_heartbeat_formatted of this Hosts.  # noqa: E501
        :rtype: str
        """
        return self._last_heartbeat_formatted

    @last_heartbeat_formatted.setter
    def last_heartbeat_formatted(self, last_heartbeat_formatted):
        """Sets the last_heartbeat_formatted of this Hosts.


        :param last_heartbeat_formatted: The last_heartbeat_formatted of this Hosts.  # noqa: E501
        :type: str
        """

        self._last_heartbeat_formatted = last_heartbeat_formatted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Hosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
