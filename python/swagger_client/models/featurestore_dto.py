# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FeaturestoreDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'featurestore_id': 'int',
        'featurestore_name': 'str',
        'created': 'datetime',
        'hdfs_store_path': 'str',
        'project_name': 'str',
        'project_id': 'int',
        'featurestore_description': 'str',
        'inode_id': 'int',
        'online_featurestore_type': 'str',
        'online_featurestore_name': 'str',
        'online_featurestore_size': 'float',
        'offline_featurestore_type': 'str',
        'offline_featurestore_name': 'str',
        'hive_endpoint': 'str',
        'mysql_server_endpoint': 'str',
        'online_enabled': 'bool'
    }

    attribute_map = {
        'featurestore_id': 'featurestoreId',
        'featurestore_name': 'featurestoreName',
        'created': 'created',
        'hdfs_store_path': 'hdfsStorePath',
        'project_name': 'projectName',
        'project_id': 'projectId',
        'featurestore_description': 'featurestoreDescription',
        'inode_id': 'inodeId',
        'online_featurestore_type': 'onlineFeaturestoreType',
        'online_featurestore_name': 'onlineFeaturestoreName',
        'online_featurestore_size': 'onlineFeaturestoreSize',
        'offline_featurestore_type': 'offlineFeaturestoreType',
        'offline_featurestore_name': 'offlineFeaturestoreName',
        'hive_endpoint': 'hiveEndpoint',
        'mysql_server_endpoint': 'mysqlServerEndpoint',
        'online_enabled': 'onlineEnabled'
    }

    def __init__(self, featurestore_id=None, featurestore_name=None, created=None, hdfs_store_path=None, project_name=None, project_id=None, featurestore_description=None, inode_id=None, online_featurestore_type=None, online_featurestore_name=None, online_featurestore_size=None, offline_featurestore_type=None, offline_featurestore_name=None, hive_endpoint=None, mysql_server_endpoint=None, online_enabled=None):  # noqa: E501
        """FeaturestoreDTO - a model defined in Swagger"""  # noqa: E501
        self._featurestore_id = None
        self._featurestore_name = None
        self._created = None
        self._hdfs_store_path = None
        self._project_name = None
        self._project_id = None
        self._featurestore_description = None
        self._inode_id = None
        self._online_featurestore_type = None
        self._online_featurestore_name = None
        self._online_featurestore_size = None
        self._offline_featurestore_type = None
        self._offline_featurestore_name = None
        self._hive_endpoint = None
        self._mysql_server_endpoint = None
        self._online_enabled = None
        self.discriminator = None
        if featurestore_id is not None:
            self.featurestore_id = featurestore_id
        if featurestore_name is not None:
            self.featurestore_name = featurestore_name
        if created is not None:
            self.created = created
        if hdfs_store_path is not None:
            self.hdfs_store_path = hdfs_store_path
        if project_name is not None:
            self.project_name = project_name
        if project_id is not None:
            self.project_id = project_id
        if featurestore_description is not None:
            self.featurestore_description = featurestore_description
        if inode_id is not None:
            self.inode_id = inode_id
        if online_featurestore_type is not None:
            self.online_featurestore_type = online_featurestore_type
        if online_featurestore_name is not None:
            self.online_featurestore_name = online_featurestore_name
        if online_featurestore_size is not None:
            self.online_featurestore_size = online_featurestore_size
        if offline_featurestore_type is not None:
            self.offline_featurestore_type = offline_featurestore_type
        if offline_featurestore_name is not None:
            self.offline_featurestore_name = offline_featurestore_name
        if hive_endpoint is not None:
            self.hive_endpoint = hive_endpoint
        if mysql_server_endpoint is not None:
            self.mysql_server_endpoint = mysql_server_endpoint
        if online_enabled is not None:
            self.online_enabled = online_enabled

    @property
    def featurestore_id(self):
        """Gets the featurestore_id of this FeaturestoreDTO.  # noqa: E501


        :return: The featurestore_id of this FeaturestoreDTO.  # noqa: E501
        :rtype: int
        """
        return self._featurestore_id

    @featurestore_id.setter
    def featurestore_id(self, featurestore_id):
        """Sets the featurestore_id of this FeaturestoreDTO.


        :param featurestore_id: The featurestore_id of this FeaturestoreDTO.  # noqa: E501
        :type: int
        """

        self._featurestore_id = featurestore_id

    @property
    def featurestore_name(self):
        """Gets the featurestore_name of this FeaturestoreDTO.  # noqa: E501


        :return: The featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._featurestore_name

    @featurestore_name.setter
    def featurestore_name(self, featurestore_name):
        """Sets the featurestore_name of this FeaturestoreDTO.


        :param featurestore_name: The featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._featurestore_name = featurestore_name

    @property
    def created(self):
        """Gets the created of this FeaturestoreDTO.  # noqa: E501


        :return: The created of this FeaturestoreDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FeaturestoreDTO.


        :param created: The created of this FeaturestoreDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def hdfs_store_path(self):
        """Gets the hdfs_store_path of this FeaturestoreDTO.  # noqa: E501


        :return: The hdfs_store_path of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._hdfs_store_path

    @hdfs_store_path.setter
    def hdfs_store_path(self, hdfs_store_path):
        """Sets the hdfs_store_path of this FeaturestoreDTO.


        :param hdfs_store_path: The hdfs_store_path of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._hdfs_store_path = hdfs_store_path

    @property
    def project_name(self):
        """Gets the project_name of this FeaturestoreDTO.  # noqa: E501


        :return: The project_name of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this FeaturestoreDTO.


        :param project_name: The project_name of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_id(self):
        """Gets the project_id of this FeaturestoreDTO.  # noqa: E501


        :return: The project_id of this FeaturestoreDTO.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this FeaturestoreDTO.


        :param project_id: The project_id of this FeaturestoreDTO.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def featurestore_description(self):
        """Gets the featurestore_description of this FeaturestoreDTO.  # noqa: E501


        :return: The featurestore_description of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._featurestore_description

    @featurestore_description.setter
    def featurestore_description(self, featurestore_description):
        """Sets the featurestore_description of this FeaturestoreDTO.


        :param featurestore_description: The featurestore_description of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._featurestore_description = featurestore_description

    @property
    def inode_id(self):
        """Gets the inode_id of this FeaturestoreDTO.  # noqa: E501


        :return: The inode_id of this FeaturestoreDTO.  # noqa: E501
        :rtype: int
        """
        return self._inode_id

    @inode_id.setter
    def inode_id(self, inode_id):
        """Sets the inode_id of this FeaturestoreDTO.


        :param inode_id: The inode_id of this FeaturestoreDTO.  # noqa: E501
        :type: int
        """

        self._inode_id = inode_id

    @property
    def online_featurestore_type(self):
        """Gets the online_featurestore_type of this FeaturestoreDTO.  # noqa: E501


        :return: The online_featurestore_type of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._online_featurestore_type

    @online_featurestore_type.setter
    def online_featurestore_type(self, online_featurestore_type):
        """Sets the online_featurestore_type of this FeaturestoreDTO.


        :param online_featurestore_type: The online_featurestore_type of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._online_featurestore_type = online_featurestore_type

    @property
    def online_featurestore_name(self):
        """Gets the online_featurestore_name of this FeaturestoreDTO.  # noqa: E501


        :return: The online_featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._online_featurestore_name

    @online_featurestore_name.setter
    def online_featurestore_name(self, online_featurestore_name):
        """Sets the online_featurestore_name of this FeaturestoreDTO.


        :param online_featurestore_name: The online_featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._online_featurestore_name = online_featurestore_name

    @property
    def online_featurestore_size(self):
        """Gets the online_featurestore_size of this FeaturestoreDTO.  # noqa: E501


        :return: The online_featurestore_size of this FeaturestoreDTO.  # noqa: E501
        :rtype: float
        """
        return self._online_featurestore_size

    @online_featurestore_size.setter
    def online_featurestore_size(self, online_featurestore_size):
        """Sets the online_featurestore_size of this FeaturestoreDTO.


        :param online_featurestore_size: The online_featurestore_size of this FeaturestoreDTO.  # noqa: E501
        :type: float
        """

        self._online_featurestore_size = online_featurestore_size

    @property
    def offline_featurestore_type(self):
        """Gets the offline_featurestore_type of this FeaturestoreDTO.  # noqa: E501


        :return: The offline_featurestore_type of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._offline_featurestore_type

    @offline_featurestore_type.setter
    def offline_featurestore_type(self, offline_featurestore_type):
        """Sets the offline_featurestore_type of this FeaturestoreDTO.


        :param offline_featurestore_type: The offline_featurestore_type of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._offline_featurestore_type = offline_featurestore_type

    @property
    def offline_featurestore_name(self):
        """Gets the offline_featurestore_name of this FeaturestoreDTO.  # noqa: E501


        :return: The offline_featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._offline_featurestore_name

    @offline_featurestore_name.setter
    def offline_featurestore_name(self, offline_featurestore_name):
        """Sets the offline_featurestore_name of this FeaturestoreDTO.


        :param offline_featurestore_name: The offline_featurestore_name of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._offline_featurestore_name = offline_featurestore_name

    @property
    def hive_endpoint(self):
        """Gets the hive_endpoint of this FeaturestoreDTO.  # noqa: E501


        :return: The hive_endpoint of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._hive_endpoint

    @hive_endpoint.setter
    def hive_endpoint(self, hive_endpoint):
        """Sets the hive_endpoint of this FeaturestoreDTO.


        :param hive_endpoint: The hive_endpoint of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._hive_endpoint = hive_endpoint

    @property
    def mysql_server_endpoint(self):
        """Gets the mysql_server_endpoint of this FeaturestoreDTO.  # noqa: E501


        :return: The mysql_server_endpoint of this FeaturestoreDTO.  # noqa: E501
        :rtype: str
        """
        return self._mysql_server_endpoint

    @mysql_server_endpoint.setter
    def mysql_server_endpoint(self, mysql_server_endpoint):
        """Sets the mysql_server_endpoint of this FeaturestoreDTO.


        :param mysql_server_endpoint: The mysql_server_endpoint of this FeaturestoreDTO.  # noqa: E501
        :type: str
        """

        self._mysql_server_endpoint = mysql_server_endpoint

    @property
    def online_enabled(self):
        """Gets the online_enabled of this FeaturestoreDTO.  # noqa: E501


        :return: The online_enabled of this FeaturestoreDTO.  # noqa: E501
        :rtype: bool
        """
        return self._online_enabled

    @online_enabled.setter
    def online_enabled(self, online_enabled):
        """Sets the online_enabled of this FeaturestoreDTO.


        :param online_enabled: The online_enabled of this FeaturestoreDTO.  # noqa: E501
        :type: bool
        """

        self._online_enabled = online_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturestoreDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturestoreDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
