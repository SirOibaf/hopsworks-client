# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_address_dto import ClusterAddressDTO  # noqa: F401,E501


class Download(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'public_ds_id': 'str',
        'name': 'str',
        'bootstrap': 'list[ClusterAddressDTO]',
        'topics': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'public_ds_id': 'publicDSId',
        'name': 'name',
        'bootstrap': 'bootstrap',
        'topics': 'topics'
    }

    def __init__(self, project_id=None, public_ds_id=None, name=None, bootstrap=None, topics=None):  # noqa: E501
        """Download - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._public_ds_id = None
        self._name = None
        self._bootstrap = None
        self._topics = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if public_ds_id is not None:
            self.public_ds_id = public_ds_id
        if name is not None:
            self.name = name
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if topics is not None:
            self.topics = topics

    @property
    def project_id(self):
        """Gets the project_id of this Download.  # noqa: E501


        :return: The project_id of this Download.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Download.


        :param project_id: The project_id of this Download.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def public_ds_id(self):
        """Gets the public_ds_id of this Download.  # noqa: E501


        :return: The public_ds_id of this Download.  # noqa: E501
        :rtype: str
        """
        return self._public_ds_id

    @public_ds_id.setter
    def public_ds_id(self, public_ds_id):
        """Sets the public_ds_id of this Download.


        :param public_ds_id: The public_ds_id of this Download.  # noqa: E501
        :type: str
        """

        self._public_ds_id = public_ds_id

    @property
    def name(self):
        """Gets the name of this Download.  # noqa: E501


        :return: The name of this Download.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Download.


        :param name: The name of this Download.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bootstrap(self):
        """Gets the bootstrap of this Download.  # noqa: E501


        :return: The bootstrap of this Download.  # noqa: E501
        :rtype: list[ClusterAddressDTO]
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this Download.


        :param bootstrap: The bootstrap of this Download.  # noqa: E501
        :type: list[ClusterAddressDTO]
        """

        self._bootstrap = bootstrap

    @property
    def topics(self):
        """Gets the topics of this Download.  # noqa: E501


        :return: The topics of this Download.  # noqa: E501
        :rtype: str
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Download.


        :param topics: The topics of this Download.  # noqa: E501
        :type: str
        """

        self._topics = topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Download, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Download):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
