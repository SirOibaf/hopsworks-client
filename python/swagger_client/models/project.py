# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.activity import Activity  # noqa: F401,E501
from swagger_client.models.conda_commands import CondaCommands  # noqa: F401,E501
from swagger_client.models.dataset import Dataset  # noqa: F401,E501
from swagger_client.models.inode import Inode  # noqa: F401,E501
from swagger_client.models.jupyter_project import JupyterProject  # noqa: F401,E501
from swagger_client.models.jupyter_settings import JupyterSettings  # noqa: F401,E501
from swagger_client.models.project_services import ProjectServices  # noqa: F401,E501
from swagger_client.models.project_team import ProjectTeam  # noqa: F401,E501
from swagger_client.models.python_dep import PythonDep  # noqa: F401,E501
from swagger_client.models.serving import Serving  # noqa: F401,E501
from swagger_client.models.tensor_board import TensorBoard  # noqa: F401,E501
from swagger_client.models.users import Users  # noqa: F401,E501


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conda': 'bool',
        'archived': 'bool',
        'logs': 'bool',
        'conda_env': 'bool',
        'project_team_collection': 'list[ProjectTeam]',
        'activity_collection': 'list[Activity]',
        'project_services_collection': 'list[ProjectServices]',
        'dataset_collection': 'list[Dataset]',
        'conda_commands_collection': 'list[CondaCommands]',
        'jupyter_settings_collection': 'list[JupyterSettings]',
        'serving_collection': 'list[Serving]',
        'tensor_board_collection': 'list[TensorBoard]',
        'id': 'int',
        'name': 'str',
        'owner': 'Users',
        'created': 'datetime',
        'retention_period': 'datetime',
        'deleted': 'bool',
        'payment_type': 'str',
        'python_version': 'str',
        'description': 'str',
        'kafka_max_num_topics': 'int',
        'last_quota_update': 'datetime',
        'inode': 'Inode',
        'python_dep_collection': 'list[PythonDep]',
        'jupyter_project_collection': 'list[JupyterProject]',
        'payment_type_string': 'str'
    }

    attribute_map = {
        'conda': 'conda',
        'archived': 'archived',
        'logs': 'logs',
        'conda_env': 'condaEnv',
        'project_team_collection': 'projectTeamCollection',
        'activity_collection': 'activityCollection',
        'project_services_collection': 'projectServicesCollection',
        'dataset_collection': 'datasetCollection',
        'conda_commands_collection': 'condaCommandsCollection',
        'jupyter_settings_collection': 'jupyterSettingsCollection',
        'serving_collection': 'servingCollection',
        'tensor_board_collection': 'tensorBoardCollection',
        'id': 'id',
        'name': 'name',
        'owner': 'owner',
        'created': 'created',
        'retention_period': 'retentionPeriod',
        'deleted': 'deleted',
        'payment_type': 'paymentType',
        'python_version': 'pythonVersion',
        'description': 'description',
        'kafka_max_num_topics': 'kafkaMaxNumTopics',
        'last_quota_update': 'lastQuotaUpdate',
        'inode': 'inode',
        'python_dep_collection': 'pythonDepCollection',
        'jupyter_project_collection': 'jupyterProjectCollection',
        'payment_type_string': 'paymentTypeString'
    }

    def __init__(self, conda=None, archived=None, logs=None, conda_env=None, project_team_collection=None, activity_collection=None, project_services_collection=None, dataset_collection=None, conda_commands_collection=None, jupyter_settings_collection=None, serving_collection=None, tensor_board_collection=None, id=None, name=None, owner=None, created=None, retention_period=None, deleted=None, payment_type=None, python_version=None, description=None, kafka_max_num_topics=None, last_quota_update=None, inode=None, python_dep_collection=None, jupyter_project_collection=None, payment_type_string=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._conda = None
        self._archived = None
        self._logs = None
        self._conda_env = None
        self._project_team_collection = None
        self._activity_collection = None
        self._project_services_collection = None
        self._dataset_collection = None
        self._conda_commands_collection = None
        self._jupyter_settings_collection = None
        self._serving_collection = None
        self._tensor_board_collection = None
        self._id = None
        self._name = None
        self._owner = None
        self._created = None
        self._retention_period = None
        self._deleted = None
        self._payment_type = None
        self._python_version = None
        self._description = None
        self._kafka_max_num_topics = None
        self._last_quota_update = None
        self._inode = None
        self._python_dep_collection = None
        self._jupyter_project_collection = None
        self._payment_type_string = None
        self.discriminator = None
        if conda is not None:
            self.conda = conda
        if archived is not None:
            self.archived = archived
        if logs is not None:
            self.logs = logs
        if conda_env is not None:
            self.conda_env = conda_env
        if project_team_collection is not None:
            self.project_team_collection = project_team_collection
        if activity_collection is not None:
            self.activity_collection = activity_collection
        if project_services_collection is not None:
            self.project_services_collection = project_services_collection
        if dataset_collection is not None:
            self.dataset_collection = dataset_collection
        if conda_commands_collection is not None:
            self.conda_commands_collection = conda_commands_collection
        if jupyter_settings_collection is not None:
            self.jupyter_settings_collection = jupyter_settings_collection
        if serving_collection is not None:
            self.serving_collection = serving_collection
        if tensor_board_collection is not None:
            self.tensor_board_collection = tensor_board_collection
        if id is not None:
            self.id = id
        self.name = name
        if owner is not None:
            self.owner = owner
        self.created = created
        if retention_period is not None:
            self.retention_period = retention_period
        if deleted is not None:
            self.deleted = deleted
        self.payment_type = payment_type
        if python_version is not None:
            self.python_version = python_version
        if description is not None:
            self.description = description
        self.kafka_max_num_topics = kafka_max_num_topics
        self.last_quota_update = last_quota_update
        if inode is not None:
            self.inode = inode
        if python_dep_collection is not None:
            self.python_dep_collection = python_dep_collection
        if jupyter_project_collection is not None:
            self.jupyter_project_collection = jupyter_project_collection
        if payment_type_string is not None:
            self.payment_type_string = payment_type_string

    @property
    def conda(self):
        """Gets the conda of this Project.  # noqa: E501


        :return: The conda of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._conda

    @conda.setter
    def conda(self, conda):
        """Sets the conda of this Project.


        :param conda: The conda of this Project.  # noqa: E501
        :type: bool
        """

        self._conda = conda

    @property
    def archived(self):
        """Gets the archived of this Project.  # noqa: E501


        :return: The archived of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Project.


        :param archived: The archived of this Project.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def logs(self):
        """Gets the logs of this Project.  # noqa: E501


        :return: The logs of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Project.


        :param logs: The logs of this Project.  # noqa: E501
        :type: bool
        """

        self._logs = logs

    @property
    def conda_env(self):
        """Gets the conda_env of this Project.  # noqa: E501


        :return: The conda_env of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._conda_env

    @conda_env.setter
    def conda_env(self, conda_env):
        """Sets the conda_env of this Project.


        :param conda_env: The conda_env of this Project.  # noqa: E501
        :type: bool
        """

        self._conda_env = conda_env

    @property
    def project_team_collection(self):
        """Gets the project_team_collection of this Project.  # noqa: E501


        :return: The project_team_collection of this Project.  # noqa: E501
        :rtype: list[ProjectTeam]
        """
        return self._project_team_collection

    @project_team_collection.setter
    def project_team_collection(self, project_team_collection):
        """Sets the project_team_collection of this Project.


        :param project_team_collection: The project_team_collection of this Project.  # noqa: E501
        :type: list[ProjectTeam]
        """

        self._project_team_collection = project_team_collection

    @property
    def activity_collection(self):
        """Gets the activity_collection of this Project.  # noqa: E501


        :return: The activity_collection of this Project.  # noqa: E501
        :rtype: list[Activity]
        """
        return self._activity_collection

    @activity_collection.setter
    def activity_collection(self, activity_collection):
        """Sets the activity_collection of this Project.


        :param activity_collection: The activity_collection of this Project.  # noqa: E501
        :type: list[Activity]
        """

        self._activity_collection = activity_collection

    @property
    def project_services_collection(self):
        """Gets the project_services_collection of this Project.  # noqa: E501


        :return: The project_services_collection of this Project.  # noqa: E501
        :rtype: list[ProjectServices]
        """
        return self._project_services_collection

    @project_services_collection.setter
    def project_services_collection(self, project_services_collection):
        """Sets the project_services_collection of this Project.


        :param project_services_collection: The project_services_collection of this Project.  # noqa: E501
        :type: list[ProjectServices]
        """

        self._project_services_collection = project_services_collection

    @property
    def dataset_collection(self):
        """Gets the dataset_collection of this Project.  # noqa: E501


        :return: The dataset_collection of this Project.  # noqa: E501
        :rtype: list[Dataset]
        """
        return self._dataset_collection

    @dataset_collection.setter
    def dataset_collection(self, dataset_collection):
        """Sets the dataset_collection of this Project.


        :param dataset_collection: The dataset_collection of this Project.  # noqa: E501
        :type: list[Dataset]
        """

        self._dataset_collection = dataset_collection

    @property
    def conda_commands_collection(self):
        """Gets the conda_commands_collection of this Project.  # noqa: E501


        :return: The conda_commands_collection of this Project.  # noqa: E501
        :rtype: list[CondaCommands]
        """
        return self._conda_commands_collection

    @conda_commands_collection.setter
    def conda_commands_collection(self, conda_commands_collection):
        """Sets the conda_commands_collection of this Project.


        :param conda_commands_collection: The conda_commands_collection of this Project.  # noqa: E501
        :type: list[CondaCommands]
        """

        self._conda_commands_collection = conda_commands_collection

    @property
    def jupyter_settings_collection(self):
        """Gets the jupyter_settings_collection of this Project.  # noqa: E501


        :return: The jupyter_settings_collection of this Project.  # noqa: E501
        :rtype: list[JupyterSettings]
        """
        return self._jupyter_settings_collection

    @jupyter_settings_collection.setter
    def jupyter_settings_collection(self, jupyter_settings_collection):
        """Sets the jupyter_settings_collection of this Project.


        :param jupyter_settings_collection: The jupyter_settings_collection of this Project.  # noqa: E501
        :type: list[JupyterSettings]
        """

        self._jupyter_settings_collection = jupyter_settings_collection

    @property
    def serving_collection(self):
        """Gets the serving_collection of this Project.  # noqa: E501


        :return: The serving_collection of this Project.  # noqa: E501
        :rtype: list[Serving]
        """
        return self._serving_collection

    @serving_collection.setter
    def serving_collection(self, serving_collection):
        """Sets the serving_collection of this Project.


        :param serving_collection: The serving_collection of this Project.  # noqa: E501
        :type: list[Serving]
        """

        self._serving_collection = serving_collection

    @property
    def tensor_board_collection(self):
        """Gets the tensor_board_collection of this Project.  # noqa: E501


        :return: The tensor_board_collection of this Project.  # noqa: E501
        :rtype: list[TensorBoard]
        """
        return self._tensor_board_collection

    @tensor_board_collection.setter
    def tensor_board_collection(self, tensor_board_collection):
        """Sets the tensor_board_collection of this Project.


        :param tensor_board_collection: The tensor_board_collection of this Project.  # noqa: E501
        :type: list[TensorBoard]
        """

        self._tensor_board_collection = tensor_board_collection

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Project.  # noqa: E501


        :return: The owner of this Project.  # noqa: E501
        :rtype: Users
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.


        :param owner: The owner of this Project.  # noqa: E501
        :type: Users
        """

        self._owner = owner

    @property
    def created(self):
        """Gets the created of this Project.  # noqa: E501


        :return: The created of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def retention_period(self):
        """Gets the retention_period of this Project.  # noqa: E501


        :return: The retention_period of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this Project.


        :param retention_period: The retention_period of this Project.  # noqa: E501
        :type: datetime
        """

        self._retention_period = retention_period

    @property
    def deleted(self):
        """Gets the deleted of this Project.  # noqa: E501


        :return: The deleted of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Project.


        :param deleted: The deleted of this Project.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def payment_type(self):
        """Gets the payment_type of this Project.  # noqa: E501


        :return: The payment_type of this Project.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this Project.


        :param payment_type: The payment_type of this Project.  # noqa: E501
        :type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PREPAID", "NOLIMIT"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def python_version(self):
        """Gets the python_version of this Project.  # noqa: E501


        :return: The python_version of this Project.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this Project.


        :param python_version: The python_version of this Project.  # noqa: E501
        :type: str
        """

        self._python_version = python_version

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def kafka_max_num_topics(self):
        """Gets the kafka_max_num_topics of this Project.  # noqa: E501


        :return: The kafka_max_num_topics of this Project.  # noqa: E501
        :rtype: int
        """
        return self._kafka_max_num_topics

    @kafka_max_num_topics.setter
    def kafka_max_num_topics(self, kafka_max_num_topics):
        """Sets the kafka_max_num_topics of this Project.


        :param kafka_max_num_topics: The kafka_max_num_topics of this Project.  # noqa: E501
        :type: int
        """
        if kafka_max_num_topics is None:
            raise ValueError("Invalid value for `kafka_max_num_topics`, must not be `None`")  # noqa: E501

        self._kafka_max_num_topics = kafka_max_num_topics

    @property
    def last_quota_update(self):
        """Gets the last_quota_update of this Project.  # noqa: E501


        :return: The last_quota_update of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._last_quota_update

    @last_quota_update.setter
    def last_quota_update(self, last_quota_update):
        """Sets the last_quota_update of this Project.


        :param last_quota_update: The last_quota_update of this Project.  # noqa: E501
        :type: datetime
        """
        if last_quota_update is None:
            raise ValueError("Invalid value for `last_quota_update`, must not be `None`")  # noqa: E501

        self._last_quota_update = last_quota_update

    @property
    def inode(self):
        """Gets the inode of this Project.  # noqa: E501


        :return: The inode of this Project.  # noqa: E501
        :rtype: Inode
        """
        return self._inode

    @inode.setter
    def inode(self, inode):
        """Sets the inode of this Project.


        :param inode: The inode of this Project.  # noqa: E501
        :type: Inode
        """

        self._inode = inode

    @property
    def python_dep_collection(self):
        """Gets the python_dep_collection of this Project.  # noqa: E501


        :return: The python_dep_collection of this Project.  # noqa: E501
        :rtype: list[PythonDep]
        """
        return self._python_dep_collection

    @python_dep_collection.setter
    def python_dep_collection(self, python_dep_collection):
        """Sets the python_dep_collection of this Project.


        :param python_dep_collection: The python_dep_collection of this Project.  # noqa: E501
        :type: list[PythonDep]
        """

        self._python_dep_collection = python_dep_collection

    @property
    def jupyter_project_collection(self):
        """Gets the jupyter_project_collection of this Project.  # noqa: E501


        :return: The jupyter_project_collection of this Project.  # noqa: E501
        :rtype: list[JupyterProject]
        """
        return self._jupyter_project_collection

    @jupyter_project_collection.setter
    def jupyter_project_collection(self, jupyter_project_collection):
        """Sets the jupyter_project_collection of this Project.


        :param jupyter_project_collection: The jupyter_project_collection of this Project.  # noqa: E501
        :type: list[JupyterProject]
        """

        self._jupyter_project_collection = jupyter_project_collection

    @property
    def payment_type_string(self):
        """Gets the payment_type_string of this Project.  # noqa: E501


        :return: The payment_type_string of this Project.  # noqa: E501
        :rtype: str
        """
        return self._payment_type_string

    @payment_type_string.setter
    def payment_type_string(self, payment_type_string):
        """Sets the payment_type_string of this Project.


        :param payment_type_string: The payment_type_string of this Project.  # noqa: E501
        :type: str
        """

        self._payment_type_string = payment_type_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
