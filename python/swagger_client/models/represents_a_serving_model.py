# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.topic_dto import TopicDTO  # noqa: F401,E501


class RepresentsAServingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'artifact_path': 'str',
        'model_version': 'int',
        'available_instances': 'int',
        'requested_instances': 'int',
        'node_port': 'int',
        'created': 'datetime',
        'batching_enabled': 'bool',
        'serving_type': 'str',
        'creator': 'str',
        'status': 'str',
        'kafka_topic_dto': 'TopicDTO'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'artifact_path': 'artifactPath',
        'model_version': 'modelVersion',
        'available_instances': 'availableInstances',
        'requested_instances': 'requestedInstances',
        'node_port': 'nodePort',
        'created': 'created',
        'batching_enabled': 'batchingEnabled',
        'serving_type': 'servingType',
        'creator': 'creator',
        'status': 'status',
        'kafka_topic_dto': 'kafkaTopicDTO'
    }

    def __init__(self, id=None, name=None, artifact_path=None, model_version=None, available_instances=None, requested_instances=None, node_port=None, created=None, batching_enabled=None, serving_type=None, creator=None, status=None, kafka_topic_dto=None):  # noqa: E501
        """RepresentsAServingModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._artifact_path = None
        self._model_version = None
        self._available_instances = None
        self._requested_instances = None
        self._node_port = None
        self._created = None
        self._batching_enabled = None
        self._serving_type = None
        self._creator = None
        self._status = None
        self._kafka_topic_dto = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if artifact_path is not None:
            self.artifact_path = artifact_path
        if model_version is not None:
            self.model_version = model_version
        if available_instances is not None:
            self.available_instances = available_instances
        if requested_instances is not None:
            self.requested_instances = requested_instances
        if node_port is not None:
            self.node_port = node_port
        if created is not None:
            self.created = created
        if batching_enabled is not None:
            self.batching_enabled = batching_enabled
        if serving_type is not None:
            self.serving_type = serving_type
        if creator is not None:
            self.creator = creator
        if status is not None:
            self.status = status
        if kafka_topic_dto is not None:
            self.kafka_topic_dto = kafka_topic_dto

    @property
    def id(self):
        """Gets the id of this RepresentsAServingModel.  # noqa: E501

        ID of the Serving entry  # noqa: E501

        :return: The id of this RepresentsAServingModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepresentsAServingModel.

        ID of the Serving entry  # noqa: E501

        :param id: The id of this RepresentsAServingModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RepresentsAServingModel.  # noqa: E501

        Name of the serving  # noqa: E501

        :return: The name of this RepresentsAServingModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepresentsAServingModel.

        Name of the serving  # noqa: E501

        :param name: The name of this RepresentsAServingModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def artifact_path(self):
        """Gets the artifact_path of this RepresentsAServingModel.  # noqa: E501

        HOPSFS directory path containing the model (tf) or python script (sklearn)  # noqa: E501

        :return: The artifact_path of this RepresentsAServingModel.  # noqa: E501
        :rtype: str
        """
        return self._artifact_path

    @artifact_path.setter
    def artifact_path(self, artifact_path):
        """Sets the artifact_path of this RepresentsAServingModel.

        HOPSFS directory path containing the model (tf) or python script (sklearn)  # noqa: E501

        :param artifact_path: The artifact_path of this RepresentsAServingModel.  # noqa: E501
        :type: str
        """

        self._artifact_path = artifact_path

    @property
    def model_version(self):
        """Gets the model_version of this RepresentsAServingModel.  # noqa: E501

        Version of the serving  # noqa: E501

        :return: The model_version of this RepresentsAServingModel.  # noqa: E501
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this RepresentsAServingModel.

        Version of the serving  # noqa: E501

        :param model_version: The model_version of this RepresentsAServingModel.  # noqa: E501
        :type: int
        """

        self._model_version = model_version

    @property
    def available_instances(self):
        """Gets the available_instances of this RepresentsAServingModel.  # noqa: E501

        Number of Serving instances available for serving  # noqa: E501

        :return: The available_instances of this RepresentsAServingModel.  # noqa: E501
        :rtype: int
        """
        return self._available_instances

    @available_instances.setter
    def available_instances(self, available_instances):
        """Sets the available_instances of this RepresentsAServingModel.

        Number of Serving instances available for serving  # noqa: E501

        :param available_instances: The available_instances of this RepresentsAServingModel.  # noqa: E501
        :type: int
        """

        self._available_instances = available_instances

    @property
    def requested_instances(self):
        """Gets the requested_instances of this RepresentsAServingModel.  # noqa: E501

        Number of Serving instances to use for serving  # noqa: E501

        :return: The requested_instances of this RepresentsAServingModel.  # noqa: E501
        :rtype: int
        """
        return self._requested_instances

    @requested_instances.setter
    def requested_instances(self, requested_instances):
        """Sets the requested_instances of this RepresentsAServingModel.

        Number of Serving instances to use for serving  # noqa: E501

        :param requested_instances: The requested_instances of this RepresentsAServingModel.  # noqa: E501
        :type: int
        """

        self._requested_instances = requested_instances

    @property
    def node_port(self):
        """Gets the node_port of this RepresentsAServingModel.  # noqa: E501

        Port on which the Serving instance(s) are listening  # noqa: E501

        :return: The node_port of this RepresentsAServingModel.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this RepresentsAServingModel.

        Port on which the Serving instance(s) are listening  # noqa: E501

        :param node_port: The node_port of this RepresentsAServingModel.  # noqa: E501
        :type: int
        """

        self._node_port = node_port

    @property
    def created(self):
        """Gets the created of this RepresentsAServingModel.  # noqa: E501

        Date on which the Serving entry was created  # noqa: E501

        :return: The created of this RepresentsAServingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RepresentsAServingModel.

        Date on which the Serving entry was created  # noqa: E501

        :param created: The created of this RepresentsAServingModel.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def batching_enabled(self):
        """Gets the batching_enabled of this RepresentsAServingModel.  # noqa: E501

        Is request batching enabled  # noqa: E501

        :return: The batching_enabled of this RepresentsAServingModel.  # noqa: E501
        :rtype: bool
        """
        return self._batching_enabled

    @batching_enabled.setter
    def batching_enabled(self, batching_enabled):
        """Sets the batching_enabled of this RepresentsAServingModel.

        Is request batching enabled  # noqa: E501

        :param batching_enabled: The batching_enabled of this RepresentsAServingModel.  # noqa: E501
        :type: bool
        """

        self._batching_enabled = batching_enabled

    @property
    def serving_type(self):
        """Gets the serving_type of this RepresentsAServingModel.  # noqa: E501

        Type of serving, sklearn or tfserving  # noqa: E501

        :return: The serving_type of this RepresentsAServingModel.  # noqa: E501
        :rtype: str
        """
        return self._serving_type

    @serving_type.setter
    def serving_type(self, serving_type):
        """Sets the serving_type of this RepresentsAServingModel.

        Type of serving, sklearn or tfserving  # noqa: E501

        :param serving_type: The serving_type of this RepresentsAServingModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TENSORFLOW", "SKLEARN"]  # noqa: E501
        if serving_type not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_type` ({0}), must be one of {1}"  # noqa: E501
                .format(serving_type, allowed_values)
            )

        self._serving_type = serving_type

    @property
    def creator(self):
        """Gets the creator of this RepresentsAServingModel.  # noqa: E501

        User whom created the Serving entry  # noqa: E501

        :return: The creator of this RepresentsAServingModel.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this RepresentsAServingModel.

        User whom created the Serving entry  # noqa: E501

        :param creator: The creator of this RepresentsAServingModel.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def status(self):
        """Gets the status of this RepresentsAServingModel.  # noqa: E501

        Status of the Serving entry  # noqa: E501

        :return: The status of this RepresentsAServingModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepresentsAServingModel.

        Status of the Serving entry  # noqa: E501

        :param status: The status of this RepresentsAServingModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUNNING", "STOPPED", "STARTING", "UPDATING", "STOPPING", "TRANSFORMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def kafka_topic_dto(self):
        """Gets the kafka_topic_dto of this RepresentsAServingModel.  # noqa: E501


        :return: The kafka_topic_dto of this RepresentsAServingModel.  # noqa: E501
        :rtype: TopicDTO
        """
        return self._kafka_topic_dto

    @kafka_topic_dto.setter
    def kafka_topic_dto(self, kafka_topic_dto):
        """Sets the kafka_topic_dto of this RepresentsAServingModel.


        :param kafka_topic_dto: The kafka_topic_dto of this RepresentsAServingModel.  # noqa: E501
        :type: TopicDTO
        """

        self._kafka_topic_dto = kafka_topic_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepresentsAServingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepresentsAServingModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
