# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.project_topics import ProjectTopics  # noqa: F401,E501
from swagger_client.models.users import Users  # noqa: F401,E501


class TopicAcls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'permission_type': 'str',
        'operation_type': 'str',
        'host': 'str',
        'role': 'str',
        'principal': 'str',
        'project_topics': 'ProjectTopics',
        'user': 'Users'
    }

    attribute_map = {
        'id': 'id',
        'permission_type': 'permissionType',
        'operation_type': 'operationType',
        'host': 'host',
        'role': 'role',
        'principal': 'principal',
        'project_topics': 'projectTopics',
        'user': 'user'
    }

    def __init__(self, id=None, permission_type=None, operation_type=None, host=None, role=None, principal=None, project_topics=None, user=None):  # noqa: E501
        """TopicAcls - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._permission_type = None
        self._operation_type = None
        self._host = None
        self._role = None
        self._principal = None
        self._project_topics = None
        self._user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.permission_type = permission_type
        self.operation_type = operation_type
        self.host = host
        self.role = role
        self.principal = principal
        if project_topics is not None:
            self.project_topics = project_topics
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this TopicAcls.  # noqa: E501


        :return: The id of this TopicAcls.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopicAcls.


        :param id: The id of this TopicAcls.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def permission_type(self):
        """Gets the permission_type of this TopicAcls.  # noqa: E501


        :return: The permission_type of this TopicAcls.  # noqa: E501
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this TopicAcls.


        :param permission_type: The permission_type of this TopicAcls.  # noqa: E501
        :type: str
        """
        if permission_type is None:
            raise ValueError("Invalid value for `permission_type`, must not be `None`")  # noqa: E501

        self._permission_type = permission_type

    @property
    def operation_type(self):
        """Gets the operation_type of this TopicAcls.  # noqa: E501


        :return: The operation_type of this TopicAcls.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this TopicAcls.


        :param operation_type: The operation_type of this TopicAcls.  # noqa: E501
        :type: str
        """
        if operation_type is None:
            raise ValueError("Invalid value for `operation_type`, must not be `None`")  # noqa: E501

        self._operation_type = operation_type

    @property
    def host(self):
        """Gets the host of this TopicAcls.  # noqa: E501


        :return: The host of this TopicAcls.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TopicAcls.


        :param host: The host of this TopicAcls.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def role(self):
        """Gets the role of this TopicAcls.  # noqa: E501


        :return: The role of this TopicAcls.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TopicAcls.


        :param role: The role of this TopicAcls.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def principal(self):
        """Gets the principal of this TopicAcls.  # noqa: E501


        :return: The principal of this TopicAcls.  # noqa: E501
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this TopicAcls.


        :param principal: The principal of this TopicAcls.  # noqa: E501
        :type: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")  # noqa: E501

        self._principal = principal

    @property
    def project_topics(self):
        """Gets the project_topics of this TopicAcls.  # noqa: E501


        :return: The project_topics of this TopicAcls.  # noqa: E501
        :rtype: ProjectTopics
        """
        return self._project_topics

    @project_topics.setter
    def project_topics(self, project_topics):
        """Sets the project_topics of this TopicAcls.


        :param project_topics: The project_topics of this TopicAcls.  # noqa: E501
        :type: ProjectTopics
        """

        self._project_topics = project_topics

    @property
    def user(self):
        """Gets the user of this TopicAcls.  # noqa: E501


        :return: The user of this TopicAcls.  # noqa: E501
        :rtype: Users
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TopicAcls.


        :param user: The user of this TopicAcls.  # noqa: E501
        :type: Users
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopicAcls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicAcls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
