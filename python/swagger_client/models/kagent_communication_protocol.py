# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.conda_commands_for_kagent_to_execute_or_report import CondaCommandsForKagentToExecuteOrReport  # noqa: F401,E501
from swagger_client.models.status_report_for_running_services_on_host import StatusReportForRunningServicesOnHost  # noqa: F401,E501
from swagger_client.models.system_commands_for_kagent_to_execute_or_report import SystemCommandsForKagentToExecuteOrReport  # noqa: F401,E501


class KagentCommunicationProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_id': 'str',
        'password': 'str',
        'hadoop_home': 'str',
        'agent_time': 'int',
        'memory_capacity': 'int',
        'cores': 'int',
        'private_ip': 'str',
        'services': 'StatusReportForRunningServicesOnHost',
        'system_commands': 'list[SystemCommandsForKagentToExecuteOrReport]',
        'conda_commands': 'list[CondaCommandsForKagentToExecuteOrReport]',
        'conda_report': 'list[str]'
    }

    attribute_map = {
        'host_id': 'hostId',
        'password': 'password',
        'hadoop_home': 'hadoopHome',
        'agent_time': 'agentTime',
        'memory_capacity': 'memoryCapacity',
        'cores': 'cores',
        'private_ip': 'privateIp',
        'services': 'services',
        'system_commands': 'systemCommands',
        'conda_commands': 'condaCommands',
        'conda_report': 'condaReport'
    }

    def __init__(self, host_id=None, password=None, hadoop_home=None, agent_time=None, memory_capacity=None, cores=None, private_ip=None, services=None, system_commands=None, conda_commands=None, conda_report=None):  # noqa: E501
        """KagentCommunicationProtocol - a model defined in Swagger"""  # noqa: E501
        self._host_id = None
        self._password = None
        self._hadoop_home = None
        self._agent_time = None
        self._memory_capacity = None
        self._cores = None
        self._private_ip = None
        self._services = None
        self._system_commands = None
        self._conda_commands = None
        self._conda_report = None
        self.discriminator = None
        self.host_id = host_id
        if password is not None:
            self.password = password
        if hadoop_home is not None:
            self.hadoop_home = hadoop_home
        self.agent_time = agent_time
        self.memory_capacity = memory_capacity
        self.cores = cores
        self.private_ip = private_ip
        if services is not None:
            self.services = services
        if system_commands is not None:
            self.system_commands = system_commands
        if conda_commands is not None:
            self.conda_commands = conda_commands
        if conda_report is not None:
            self.conda_report = conda_report

    @property
    def host_id(self):
        """Gets the host_id of this KagentCommunicationProtocol.  # noqa: E501

        ID of the host kagent is running  # noqa: E501

        :return: The host_id of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this KagentCommunicationProtocol.

        ID of the host kagent is running  # noqa: E501

        :param host_id: The host_id of this KagentCommunicationProtocol.  # noqa: E501
        :type: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")  # noqa: E501

        self._host_id = host_id

    @property
    def password(self):
        """Gets the password of this KagentCommunicationProtocol.  # noqa: E501

        Password of kagent's REST API  # noqa: E501

        :return: The password of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this KagentCommunicationProtocol.

        Password of kagent's REST API  # noqa: E501

        :param password: The password of this KagentCommunicationProtocol.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def hadoop_home(self):
        """Gets the hadoop_home of this KagentCommunicationProtocol.  # noqa: E501

        Path to Hadoop home returned to agent after successful registration  # noqa: E501

        :return: The hadoop_home of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: str
        """
        return self._hadoop_home

    @hadoop_home.setter
    def hadoop_home(self, hadoop_home):
        """Sets the hadoop_home of this KagentCommunicationProtocol.

        Path to Hadoop home returned to agent after successful registration  # noqa: E501

        :param hadoop_home: The hadoop_home of this KagentCommunicationProtocol.  # noqa: E501
        :type: str
        """

        self._hadoop_home = hadoop_home

    @property
    def agent_time(self):
        """Gets the agent_time of this KagentCommunicationProtocol.  # noqa: E501

        Heartbeat timestamp  # noqa: E501

        :return: The agent_time of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: int
        """
        return self._agent_time

    @agent_time.setter
    def agent_time(self, agent_time):
        """Sets the agent_time of this KagentCommunicationProtocol.

        Heartbeat timestamp  # noqa: E501

        :param agent_time: The agent_time of this KagentCommunicationProtocol.  # noqa: E501
        :type: int
        """
        if agent_time is None:
            raise ValueError("Invalid value for `agent_time`, must not be `None`")  # noqa: E501

        self._agent_time = agent_time

    @property
    def memory_capacity(self):
        """Gets the memory_capacity of this KagentCommunicationProtocol.  # noqa: E501

        Total memory capacity of host  # noqa: E501

        :return: The memory_capacity of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: int
        """
        return self._memory_capacity

    @memory_capacity.setter
    def memory_capacity(self, memory_capacity):
        """Sets the memory_capacity of this KagentCommunicationProtocol.

        Total memory capacity of host  # noqa: E501

        :param memory_capacity: The memory_capacity of this KagentCommunicationProtocol.  # noqa: E501
        :type: int
        """
        if memory_capacity is None:
            raise ValueError("Invalid value for `memory_capacity`, must not be `None`")  # noqa: E501

        self._memory_capacity = memory_capacity

    @property
    def cores(self):
        """Gets the cores of this KagentCommunicationProtocol.  # noqa: E501

        Number of available cores in host  # noqa: E501

        :return: The cores of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this KagentCommunicationProtocol.

        Number of available cores in host  # noqa: E501

        :param cores: The cores of this KagentCommunicationProtocol.  # noqa: E501
        :type: int
        """
        if cores is None:
            raise ValueError("Invalid value for `cores`, must not be `None`")  # noqa: E501

        self._cores = cores

    @property
    def private_ip(self):
        """Gets the private_ip of this KagentCommunicationProtocol.  # noqa: E501

        Private IP of host  # noqa: E501

        :return: The private_ip of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this KagentCommunicationProtocol.

        Private IP of host  # noqa: E501

        :param private_ip: The private_ip of this KagentCommunicationProtocol.  # noqa: E501
        :type: str
        """
        if private_ip is None:
            raise ValueError("Invalid value for `private_ip`, must not be `None`")  # noqa: E501

        self._private_ip = private_ip

    @property
    def services(self):
        """Gets the services of this KagentCommunicationProtocol.  # noqa: E501


        :return: The services of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: StatusReportForRunningServicesOnHost
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this KagentCommunicationProtocol.


        :param services: The services of this KagentCommunicationProtocol.  # noqa: E501
        :type: StatusReportForRunningServicesOnHost
        """

        self._services = services

    @property
    def system_commands(self):
        """Gets the system_commands of this KagentCommunicationProtocol.  # noqa: E501

        Status report of running system commands  # noqa: E501

        :return: The system_commands of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: list[SystemCommandsForKagentToExecuteOrReport]
        """
        return self._system_commands

    @system_commands.setter
    def system_commands(self, system_commands):
        """Sets the system_commands of this KagentCommunicationProtocol.

        Status report of running system commands  # noqa: E501

        :param system_commands: The system_commands of this KagentCommunicationProtocol.  # noqa: E501
        :type: list[SystemCommandsForKagentToExecuteOrReport]
        """

        self._system_commands = system_commands

    @property
    def conda_commands(self):
        """Gets the conda_commands of this KagentCommunicationProtocol.  # noqa: E501

        Status report of running conda commands  # noqa: E501

        :return: The conda_commands of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: list[CondaCommandsForKagentToExecuteOrReport]
        """
        return self._conda_commands

    @conda_commands.setter
    def conda_commands(self, conda_commands):
        """Sets the conda_commands of this KagentCommunicationProtocol.

        Status report of running conda commands  # noqa: E501

        :param conda_commands: The conda_commands of this KagentCommunicationProtocol.  # noqa: E501
        :type: list[CondaCommandsForKagentToExecuteOrReport]
        """

        self._conda_commands = conda_commands

    @property
    def conda_report(self):
        """Gets the conda_report of this KagentCommunicationProtocol.  # noqa: E501

        List of Anaconda environments to check for garbage collection  # noqa: E501

        :return: The conda_report of this KagentCommunicationProtocol.  # noqa: E501
        :rtype: list[str]
        """
        return self._conda_report

    @conda_report.setter
    def conda_report(self, conda_report):
        """Sets the conda_report of this KagentCommunicationProtocol.

        List of Anaconda environments to check for garbage collection  # noqa: E501

        :param conda_report: The conda_report of this KagentCommunicationProtocol.  # noqa: E501
        :type: list[str]
        """

        self._conda_report = conda_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KagentCommunicationProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KagentCommunicationProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
