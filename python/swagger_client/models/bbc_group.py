# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.users import Users  # noqa: F401,E501


class BbcGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_desc': 'str',
        'gid': 'int',
        'users_collection': 'list[Users]'
    }

    attribute_map = {
        'group_name': 'groupName',
        'group_desc': 'groupDesc',
        'gid': 'gid',
        'users_collection': 'usersCollection'
    }

    def __init__(self, group_name=None, group_desc=None, gid=None, users_collection=None):  # noqa: E501
        """BbcGroup - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._group_desc = None
        self._gid = None
        self._users_collection = None
        self.discriminator = None
        self.group_name = group_name
        if group_desc is not None:
            self.group_desc = group_desc
        self.gid = gid
        if users_collection is not None:
            self.users_collection = users_collection

    @property
    def group_name(self):
        """Gets the group_name of this BbcGroup.  # noqa: E501


        :return: The group_name of this BbcGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this BbcGroup.


        :param group_name: The group_name of this BbcGroup.  # noqa: E501
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def group_desc(self):
        """Gets the group_desc of this BbcGroup.  # noqa: E501


        :return: The group_desc of this BbcGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_desc

    @group_desc.setter
    def group_desc(self, group_desc):
        """Sets the group_desc of this BbcGroup.


        :param group_desc: The group_desc of this BbcGroup.  # noqa: E501
        :type: str
        """

        self._group_desc = group_desc

    @property
    def gid(self):
        """Gets the gid of this BbcGroup.  # noqa: E501


        :return: The gid of this BbcGroup.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this BbcGroup.


        :param gid: The gid of this BbcGroup.  # noqa: E501
        :type: int
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def users_collection(self):
        """Gets the users_collection of this BbcGroup.  # noqa: E501


        :return: The users_collection of this BbcGroup.  # noqa: E501
        :rtype: list[Users]
        """
        return self._users_collection

    @users_collection.setter
    def users_collection(self, users_collection):
        """Sets the users_collection of this BbcGroup.


        :param users_collection: The users_collection of this BbcGroup.  # noqa: E501
        :type: list[Users]
        """

        self._users_collection = users_collection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BbcGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BbcGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
