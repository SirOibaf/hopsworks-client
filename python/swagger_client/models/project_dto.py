# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.inode_view import InodeView  # noqa: F401,E501
from swagger_client.models.project_team import ProjectTeam  # noqa: F401,E501
from swagger_client.models.quotas_dto import QuotasDTO  # noqa: F401,E501


class ProjectDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'project_name': 'str',
        'owner': 'str',
        'description': 'str',
        'retention_period': 'datetime',
        'created': 'datetime',
        'archived': 'bool',
        'services': 'list[str]',
        'project_team': 'list[ProjectTeam]',
        'datasets': 'list[InodeView]',
        'inodeid': 'int',
        'quotas': 'QuotasDTO',
        'hops_examples': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'project_name': 'projectName',
        'owner': 'owner',
        'description': 'description',
        'retention_period': 'retentionPeriod',
        'created': 'created',
        'archived': 'archived',
        'services': 'services',
        'project_team': 'projectTeam',
        'datasets': 'datasets',
        'inodeid': 'inodeid',
        'quotas': 'quotas',
        'hops_examples': 'hopsExamples'
    }

    def __init__(self, project_id=None, project_name=None, owner=None, description=None, retention_period=None, created=None, archived=None, services=None, project_team=None, datasets=None, inodeid=None, quotas=None, hops_examples=None):  # noqa: E501
        """ProjectDTO - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._project_name = None
        self._owner = None
        self._description = None
        self._retention_period = None
        self._created = None
        self._archived = None
        self._services = None
        self._project_team = None
        self._datasets = None
        self._inodeid = None
        self._quotas = None
        self._hops_examples = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if owner is not None:
            self.owner = owner
        if description is not None:
            self.description = description
        if retention_period is not None:
            self.retention_period = retention_period
        if created is not None:
            self.created = created
        if archived is not None:
            self.archived = archived
        if services is not None:
            self.services = services
        if project_team is not None:
            self.project_team = project_team
        if datasets is not None:
            self.datasets = datasets
        if inodeid is not None:
            self.inodeid = inodeid
        if quotas is not None:
            self.quotas = quotas
        if hops_examples is not None:
            self.hops_examples = hops_examples

    @property
    def project_id(self):
        """Gets the project_id of this ProjectDTO.  # noqa: E501


        :return: The project_id of this ProjectDTO.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectDTO.


        :param project_id: The project_id of this ProjectDTO.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this ProjectDTO.  # noqa: E501


        :return: The project_name of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ProjectDTO.


        :param project_name: The project_name of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def owner(self):
        """Gets the owner of this ProjectDTO.  # noqa: E501


        :return: The owner of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectDTO.


        :param owner: The owner of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this ProjectDTO.  # noqa: E501


        :return: The description of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectDTO.


        :param description: The description of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def retention_period(self):
        """Gets the retention_period of this ProjectDTO.  # noqa: E501


        :return: The retention_period of this ProjectDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this ProjectDTO.


        :param retention_period: The retention_period of this ProjectDTO.  # noqa: E501
        :type: datetime
        """

        self._retention_period = retention_period

    @property
    def created(self):
        """Gets the created of this ProjectDTO.  # noqa: E501


        :return: The created of this ProjectDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectDTO.


        :param created: The created of this ProjectDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def archived(self):
        """Gets the archived of this ProjectDTO.  # noqa: E501


        :return: The archived of this ProjectDTO.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProjectDTO.


        :param archived: The archived of this ProjectDTO.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def services(self):
        """Gets the services of this ProjectDTO.  # noqa: E501


        :return: The services of this ProjectDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ProjectDTO.


        :param services: The services of this ProjectDTO.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def project_team(self):
        """Gets the project_team of this ProjectDTO.  # noqa: E501


        :return: The project_team of this ProjectDTO.  # noqa: E501
        :rtype: list[ProjectTeam]
        """
        return self._project_team

    @project_team.setter
    def project_team(self, project_team):
        """Sets the project_team of this ProjectDTO.


        :param project_team: The project_team of this ProjectDTO.  # noqa: E501
        :type: list[ProjectTeam]
        """

        self._project_team = project_team

    @property
    def datasets(self):
        """Gets the datasets of this ProjectDTO.  # noqa: E501


        :return: The datasets of this ProjectDTO.  # noqa: E501
        :rtype: list[InodeView]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this ProjectDTO.


        :param datasets: The datasets of this ProjectDTO.  # noqa: E501
        :type: list[InodeView]
        """

        self._datasets = datasets

    @property
    def inodeid(self):
        """Gets the inodeid of this ProjectDTO.  # noqa: E501


        :return: The inodeid of this ProjectDTO.  # noqa: E501
        :rtype: int
        """
        return self._inodeid

    @inodeid.setter
    def inodeid(self, inodeid):
        """Sets the inodeid of this ProjectDTO.


        :param inodeid: The inodeid of this ProjectDTO.  # noqa: E501
        :type: int
        """

        self._inodeid = inodeid

    @property
    def quotas(self):
        """Gets the quotas of this ProjectDTO.  # noqa: E501


        :return: The quotas of this ProjectDTO.  # noqa: E501
        :rtype: QuotasDTO
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas):
        """Sets the quotas of this ProjectDTO.


        :param quotas: The quotas of this ProjectDTO.  # noqa: E501
        :type: QuotasDTO
        """

        self._quotas = quotas

    @property
    def hops_examples(self):
        """Gets the hops_examples of this ProjectDTO.  # noqa: E501


        :return: The hops_examples of this ProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._hops_examples

    @hops_examples.setter
    def hops_examples(self, hops_examples):
        """Sets the hops_examples of this ProjectDTO.


        :param hops_examples: The hops_examples of this ProjectDTO.  # noqa: E501
        :type: str
        """

        self._hops_examples = hops_examples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
