# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.project_topics import ProjectTopics  # noqa: F401,E501
from swagger_client.models.schema_topics_pk import SchemaTopicsPK  # noqa: F401,E501


class SchemaTopics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_topics_collection': 'list[ProjectTopics]',
        'schema_topics_pk': 'SchemaTopicsPK',
        'contents': 'str',
        'created_on': 'datetime'
    }

    attribute_map = {
        'project_topics_collection': 'projectTopicsCollection',
        'schema_topics_pk': 'schemaTopicsPK',
        'contents': 'contents',
        'created_on': 'createdOn'
    }

    def __init__(self, project_topics_collection=None, schema_topics_pk=None, contents=None, created_on=None):  # noqa: E501
        """SchemaTopics - a model defined in Swagger"""  # noqa: E501
        self._project_topics_collection = None
        self._schema_topics_pk = None
        self._contents = None
        self._created_on = None
        self.discriminator = None
        if project_topics_collection is not None:
            self.project_topics_collection = project_topics_collection
        if schema_topics_pk is not None:
            self.schema_topics_pk = schema_topics_pk
        self.contents = contents
        self.created_on = created_on

    @property
    def project_topics_collection(self):
        """Gets the project_topics_collection of this SchemaTopics.  # noqa: E501


        :return: The project_topics_collection of this SchemaTopics.  # noqa: E501
        :rtype: list[ProjectTopics]
        """
        return self._project_topics_collection

    @project_topics_collection.setter
    def project_topics_collection(self, project_topics_collection):
        """Sets the project_topics_collection of this SchemaTopics.


        :param project_topics_collection: The project_topics_collection of this SchemaTopics.  # noqa: E501
        :type: list[ProjectTopics]
        """

        self._project_topics_collection = project_topics_collection

    @property
    def schema_topics_pk(self):
        """Gets the schema_topics_pk of this SchemaTopics.  # noqa: E501


        :return: The schema_topics_pk of this SchemaTopics.  # noqa: E501
        :rtype: SchemaTopicsPK
        """
        return self._schema_topics_pk

    @schema_topics_pk.setter
    def schema_topics_pk(self, schema_topics_pk):
        """Sets the schema_topics_pk of this SchemaTopics.


        :param schema_topics_pk: The schema_topics_pk of this SchemaTopics.  # noqa: E501
        :type: SchemaTopicsPK
        """

        self._schema_topics_pk = schema_topics_pk

    @property
    def contents(self):
        """Gets the contents of this SchemaTopics.  # noqa: E501


        :return: The contents of this SchemaTopics.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this SchemaTopics.


        :param contents: The contents of this SchemaTopics.  # noqa: E501
        :type: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def created_on(self):
        """Gets the created_on of this SchemaTopics.  # noqa: E501


        :return: The created_on of this SchemaTopics.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SchemaTopics.


        :param created_on: The created_on of this SchemaTopics.  # noqa: E501
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaTopics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaTopics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
