# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.anaconda_repo import AnacondaRepo  # noqa: F401,E501
from swagger_client.models.project import Project  # noqa: F401,E501


class PythonDep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'dependency': 'str',
        'version': 'str',
        'preinstalled': 'bool',
        'project_collection': 'list[Project]',
        'repo_url': 'AnacondaRepo',
        'install_type': 'str',
        'machine_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'dependency': 'dependency',
        'version': 'version',
        'preinstalled': 'preinstalled',
        'project_collection': 'projectCollection',
        'repo_url': 'repoUrl',
        'install_type': 'installType',
        'machine_type': 'machineType'
    }

    def __init__(self, id=None, dependency=None, version=None, preinstalled=None, project_collection=None, repo_url=None, install_type=None, machine_type=None):  # noqa: E501
        """PythonDep - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._dependency = None
        self._version = None
        self._preinstalled = None
        self._project_collection = None
        self._repo_url = None
        self._install_type = None
        self._machine_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.dependency = dependency
        self.version = version
        if preinstalled is not None:
            self.preinstalled = preinstalled
        if project_collection is not None:
            self.project_collection = project_collection
        if repo_url is not None:
            self.repo_url = repo_url
        if install_type is not None:
            self.install_type = install_type
        if machine_type is not None:
            self.machine_type = machine_type

    @property
    def id(self):
        """Gets the id of this PythonDep.  # noqa: E501


        :return: The id of this PythonDep.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PythonDep.


        :param id: The id of this PythonDep.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def dependency(self):
        """Gets the dependency of this PythonDep.  # noqa: E501


        :return: The dependency of this PythonDep.  # noqa: E501
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this PythonDep.


        :param dependency: The dependency of this PythonDep.  # noqa: E501
        :type: str
        """
        if dependency is None:
            raise ValueError("Invalid value for `dependency`, must not be `None`")  # noqa: E501

        self._dependency = dependency

    @property
    def version(self):
        """Gets the version of this PythonDep.  # noqa: E501


        :return: The version of this PythonDep.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PythonDep.


        :param version: The version of this PythonDep.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def preinstalled(self):
        """Gets the preinstalled of this PythonDep.  # noqa: E501


        :return: The preinstalled of this PythonDep.  # noqa: E501
        :rtype: bool
        """
        return self._preinstalled

    @preinstalled.setter
    def preinstalled(self, preinstalled):
        """Sets the preinstalled of this PythonDep.


        :param preinstalled: The preinstalled of this PythonDep.  # noqa: E501
        :type: bool
        """

        self._preinstalled = preinstalled

    @property
    def project_collection(self):
        """Gets the project_collection of this PythonDep.  # noqa: E501


        :return: The project_collection of this PythonDep.  # noqa: E501
        :rtype: list[Project]
        """
        return self._project_collection

    @project_collection.setter
    def project_collection(self, project_collection):
        """Sets the project_collection of this PythonDep.


        :param project_collection: The project_collection of this PythonDep.  # noqa: E501
        :type: list[Project]
        """

        self._project_collection = project_collection

    @property
    def repo_url(self):
        """Gets the repo_url of this PythonDep.  # noqa: E501


        :return: The repo_url of this PythonDep.  # noqa: E501
        :rtype: AnacondaRepo
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this PythonDep.


        :param repo_url: The repo_url of this PythonDep.  # noqa: E501
        :type: AnacondaRepo
        """

        self._repo_url = repo_url

    @property
    def install_type(self):
        """Gets the install_type of this PythonDep.  # noqa: E501


        :return: The install_type of this PythonDep.  # noqa: E501
        :rtype: str
        """
        return self._install_type

    @install_type.setter
    def install_type(self, install_type):
        """Sets the install_type of this PythonDep.


        :param install_type: The install_type of this PythonDep.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENVIRONMENT", "CONDA", "PIP"]  # noqa: E501
        if install_type not in allowed_values:
            raise ValueError(
                "Invalid value for `install_type` ({0}), must be one of {1}"  # noqa: E501
                .format(install_type, allowed_values)
            )

        self._install_type = install_type

    @property
    def machine_type(self):
        """Gets the machine_type of this PythonDep.  # noqa: E501


        :return: The machine_type of this PythonDep.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this PythonDep.


        :param machine_type: The machine_type of this PythonDep.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "CPU", "GPU"]  # noqa: E501
        if machine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `machine_type` ({0}), must be one of {1}"  # noqa: E501
                .format(machine_type, allowed_values)
            )

        self._machine_type = machine_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PythonDep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PythonDep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
