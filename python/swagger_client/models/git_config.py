# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GitConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'remote_git_url': 'str',
        'api_key_name': 'str',
        'base_branch': 'str',
        'head_branch': 'str',
        'startup_auto_pull': 'bool',
        'shutdown_auto_push': 'bool',
        'branches': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'remote_git_url': 'remoteGitURL',
        'api_key_name': 'apiKeyName',
        'base_branch': 'baseBranch',
        'head_branch': 'headBranch',
        'startup_auto_pull': 'startupAutoPull',
        'shutdown_auto_push': 'shutdownAutoPush',
        'branches': 'branches'
    }

    def __init__(self, id=None, remote_git_url=None, api_key_name=None, base_branch=None, head_branch=None, startup_auto_pull=None, shutdown_auto_push=None, branches=None):  # noqa: E501
        """GitConfig - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._remote_git_url = None
        self._api_key_name = None
        self._base_branch = None
        self._head_branch = None
        self._startup_auto_pull = None
        self._shutdown_auto_push = None
        self._branches = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if remote_git_url is not None:
            self.remote_git_url = remote_git_url
        if api_key_name is not None:
            self.api_key_name = api_key_name
        if base_branch is not None:
            self.base_branch = base_branch
        if head_branch is not None:
            self.head_branch = head_branch
        if startup_auto_pull is not None:
            self.startup_auto_pull = startup_auto_pull
        if shutdown_auto_push is not None:
            self.shutdown_auto_push = shutdown_auto_push
        if branches is not None:
            self.branches = branches

    @property
    def id(self):
        """Gets the id of this GitConfig.  # noqa: E501


        :return: The id of this GitConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GitConfig.


        :param id: The id of this GitConfig.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def remote_git_url(self):
        """Gets the remote_git_url of this GitConfig.  # noqa: E501


        :return: The remote_git_url of this GitConfig.  # noqa: E501
        :rtype: str
        """
        return self._remote_git_url

    @remote_git_url.setter
    def remote_git_url(self, remote_git_url):
        """Sets the remote_git_url of this GitConfig.


        :param remote_git_url: The remote_git_url of this GitConfig.  # noqa: E501
        :type: str
        """

        self._remote_git_url = remote_git_url

    @property
    def api_key_name(self):
        """Gets the api_key_name of this GitConfig.  # noqa: E501


        :return: The api_key_name of this GitConfig.  # noqa: E501
        :rtype: str
        """
        return self._api_key_name

    @api_key_name.setter
    def api_key_name(self, api_key_name):
        """Sets the api_key_name of this GitConfig.


        :param api_key_name: The api_key_name of this GitConfig.  # noqa: E501
        :type: str
        """

        self._api_key_name = api_key_name

    @property
    def base_branch(self):
        """Gets the base_branch of this GitConfig.  # noqa: E501


        :return: The base_branch of this GitConfig.  # noqa: E501
        :rtype: str
        """
        return self._base_branch

    @base_branch.setter
    def base_branch(self, base_branch):
        """Sets the base_branch of this GitConfig.


        :param base_branch: The base_branch of this GitConfig.  # noqa: E501
        :type: str
        """

        self._base_branch = base_branch

    @property
    def head_branch(self):
        """Gets the head_branch of this GitConfig.  # noqa: E501


        :return: The head_branch of this GitConfig.  # noqa: E501
        :rtype: str
        """
        return self._head_branch

    @head_branch.setter
    def head_branch(self, head_branch):
        """Sets the head_branch of this GitConfig.


        :param head_branch: The head_branch of this GitConfig.  # noqa: E501
        :type: str
        """

        self._head_branch = head_branch

    @property
    def startup_auto_pull(self):
        """Gets the startup_auto_pull of this GitConfig.  # noqa: E501


        :return: The startup_auto_pull of this GitConfig.  # noqa: E501
        :rtype: bool
        """
        return self._startup_auto_pull

    @startup_auto_pull.setter
    def startup_auto_pull(self, startup_auto_pull):
        """Sets the startup_auto_pull of this GitConfig.


        :param startup_auto_pull: The startup_auto_pull of this GitConfig.  # noqa: E501
        :type: bool
        """

        self._startup_auto_pull = startup_auto_pull

    @property
    def shutdown_auto_push(self):
        """Gets the shutdown_auto_push of this GitConfig.  # noqa: E501


        :return: The shutdown_auto_push of this GitConfig.  # noqa: E501
        :rtype: bool
        """
        return self._shutdown_auto_push

    @shutdown_auto_push.setter
    def shutdown_auto_push(self, shutdown_auto_push):
        """Sets the shutdown_auto_push of this GitConfig.


        :param shutdown_auto_push: The shutdown_auto_push of this GitConfig.  # noqa: E501
        :type: bool
        """

        self._shutdown_auto_push = shutdown_auto_push

    @property
    def branches(self):
        """Gets the branches of this GitConfig.  # noqa: E501


        :return: The branches of this GitConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this GitConfig.


        :param branches: The branches of this GitConfig.  # noqa: E501
        :type: list[str]
        """

        self._branches = branches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GitConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
