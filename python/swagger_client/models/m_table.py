# coding: utf-8

"""
    Hopsworks api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.field import Field  # noqa: F401,E501
from swagger_client.models.template import Template  # noqa: F401,E501


class MTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'templateid': 'int',
        'template': 'Template',
        'fields': 'list[Field]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'templateid': 'templateid',
        'template': 'template',
        'fields': 'fields'
    }

    def __init__(self, id=None, name=None, templateid=None, template=None, fields=None):  # noqa: E501
        """MTable - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._templateid = None
        self._template = None
        self._fields = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.templateid = templateid
        if template is not None:
            self.template = template
        if fields is not None:
            self.fields = fields

    @property
    def id(self):
        """Gets the id of this MTable.  # noqa: E501


        :return: The id of this MTable.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MTable.


        :param id: The id of this MTable.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MTable.  # noqa: E501


        :return: The name of this MTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MTable.


        :param name: The name of this MTable.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def templateid(self):
        """Gets the templateid of this MTable.  # noqa: E501


        :return: The templateid of this MTable.  # noqa: E501
        :rtype: int
        """
        return self._templateid

    @templateid.setter
    def templateid(self, templateid):
        """Sets the templateid of this MTable.


        :param templateid: The templateid of this MTable.  # noqa: E501
        :type: int
        """
        if templateid is None:
            raise ValueError("Invalid value for `templateid`, must not be `None`")  # noqa: E501

        self._templateid = templateid

    @property
    def template(self):
        """Gets the template of this MTable.  # noqa: E501


        :return: The template of this MTable.  # noqa: E501
        :rtype: Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this MTable.


        :param template: The template of this MTable.  # noqa: E501
        :type: Template
        """

        self._template = template

    @property
    def fields(self):
        """Gets the fields of this MTable.  # noqa: E501


        :return: The fields of this MTable.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this MTable.


        :param fields: The fields of this MTable.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
